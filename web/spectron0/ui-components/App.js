"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Tags_1 = require("polar-shared/src/tags/Tags");
const Functions_1 = require("polar-shared/src/util/Functions");
const ISODateTimeStrings_1 = require("polar-shared/src/metadata/ISODateTimeStrings");
const TasksCalculator_1 = require("polar-spaced-repetition/src/spaced_repetition/scheduler/S2Plus/TasksCalculator");
const Lorems_1 = require("polar-shared/src/util/Lorems");
const FontAwesomeIcon_1 = require("../../js/ui/fontawesome/FontAwesomeIcon");
const DocSidebar_1 = require("./DocSidebar");
const EditableText_1 = require("./EditableText");
const styles = {
    swatch: {
        width: '30px',
        height: '30px',
        float: 'left',
        borderRadius: '4px',
        margin: '0 6px 6px 0',
    }
};
const Folders = () => {
    return React.createElement("div", { style: { backgroundColor: 'red', overflow: 'auto' } }, "these are the folders");
};
const Preview = () => {
    return React.createElement("div", { style: { backgroundColor: 'orange', overflow: 'auto' } }, "This is the preview");
};
const Main = () => {
    return React.createElement("div", { style: { backgroundColor: 'blue' } }, "this is the right");
};
class App extends React.Component {
    constructor(props, context) {
        super(props, context);
    }
    render() {
        const tags = [
            '/CompSci/Google',
            '/CompSci/Linux',
            '/CompSci/Microsoft',
            '/CompSci/Programming Languages/C++',
            '/CompSci/Programming Languages/Java',
            '/History/WWII',
            '/History/United States/WWII',
        ].map(current => Tags_1.Tags.create(current))
            .map(current => {
            const count = Math.floor(Math.random() * 100);
            return Object.assign(Object.assign({}, current), { count });
        });
        const group = {
            nrMembers: 100,
            name: 'Linux',
            description: "A group about Linux, Ubuntu, Debian, and UNIX operating systems.",
            id: "101",
            visibility: 'public',
            created: ISODateTimeStrings_1.ISODateTimeStrings.create()
        };
        const keyBindingHandler = (event) => {
            if (event.key === 'F') {
                console.log("YUP!");
            }
        };
        const createReadingTaskReps = () => {
            const lorem = Lorems_1.Lorems.mediumLength();
            const tasks = [
                {
                    id: "10102",
                    action: lorem,
                    created: ISODateTimeStrings_1.ISODateTimeStrings.create(),
                    color: 'red',
                    mode: 'reading'
                },
                {
                    id: "10101",
                    action: "this is the first one",
                    created: ISODateTimeStrings_1.ISODateTimeStrings.create(),
                    color: 'yellow',
                    mode: 'reading'
                },
                {
                    id: "10102",
                    action: "this is the second one",
                    created: ISODateTimeStrings_1.ISODateTimeStrings.create(),
                    color: 'yellow',
                    mode: 'reading'
                },
            ];
            return tasks.map(task => TasksCalculator_1.TasksCalculator.createInitialLearningState(task));
        };
        const MockTag = (props) => {
            return React.createElement("div", { className: "bg-grey100 p-1 rounded mr-1", style: {
                    display: 'inline-block'
                } },
                props.children,
                React.createElement("span", { className: "text-sm" },
                    React.createElement(FontAwesomeIcon_1.FontAwesomeIcon, { name: "fas fa-close" })));
        };
        return (React.createElement("div", null,
            React.createElement("div", { className: "border border-dark m-1", style: { width: '450px' } },
                React.createElement(DocSidebar_1.DocSidebar, { meta: {
                        fingerprint: "0x01",
                        title: 'Bitcoin - A distributed currency system.',
                        description: "Some stuff about bitcoin and what it does.",
                        authors: [
                            {
                                displayName: "Alice Smith",
                            }
                        ],
                        doi: '12345'
                    } })),
            "this should be editable:",
            React.createElement(EditableText_1.EditableText, { value: "hello world", onCancel: Functions_1.NULL_FUNCTION, onDone: Functions_1.NULL_FUNCTION })));
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,