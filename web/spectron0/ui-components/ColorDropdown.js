"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const reactstrap_1 = require("reactstrap");
const reactstrap_2 = require("reactstrap");
const reactstrap_3 = require("reactstrap");
const reactstrap_4 = require("reactstrap");
const Functions_1 = require("polar-shared/src/util/Functions");
const Spacer = () => {
    return React.createElement("div", { style: { width: '10px' }, className: "ml-2" });
};
const ColorButton = (props) => {
    const createBackgroundColor = () => {
        switch (props.color) {
            case 'yellow':
                return 'rgba(255,255,0)';
            case 'red':
                return 'rgba(255,0,0)';
            case 'green':
                return 'rgba(0,255,0)';
            default:
                return props.color;
        }
    };
    const backgroundColor = createBackgroundColor();
    const onSelected = props.onSelected || Functions_1.NULL_FUNCTION;
    const size = props.size || '30px';
    return React.createElement(reactstrap_1.Button, { size: "lg", id: props.id, type: "button", className: "ml-1 mr-1 p-0", title: "", "aria-label": "", color: "light", onClick: () => onSelected(props.color), style: {
            display: 'inline-block',
            backgroundColor,
            border: '1pt solid rgba(0, 0, 0, 0.1)',
            width: size,
            height: size
        } });
};
const ColorExample = (props) => {
    return React.createElement("div", { style: {
            margin: '5px'
        } },
        React.createElement("div", { style: { position: 'relative', top: 0 } },
            "this is some example text",
            React.createElement("div", { style: { position: 'absolute',
                    top: 0, backgroundColor: props.color,
                    opacity: 1.0,
                    width: '200px',
                    mixBlendMode: 'multiply',
                    height: '1.4em' } })));
};
const ColorExamples = () => {
    return React.createElement("div", { style: { display: 'flex' } },
        React.createElement(ColorExample, { color: "#FF6900" }),
        React.createElement(ColorExample, { color: "#FCB900" }),
        React.createElement(ColorExample, { color: "#7BDCB5" }));
};
const ColorButtonsRow = (props) => {
    return React.createElement("div", null, props.colors.map(color => React.createElement(ColorButton, Object.assign({}, props, { color: color }))));
};
const ColorButtonsRow0 = (props) => {
    const colors = ['#FFFF00', '#F96676', '#8DFF76', '#00D084', '#8ED1FC', '#0693E3'];
    return React.createElement(ColorButtonsRow, Object.assign({}, props, { colors: colors }));
};
const ColorButtonsRow1 = (props) => {
    const colors = ['#EB144C', '#F78DA7', '#9900EF', '#FF6900', '#FCB900', '#7BDCB5'];
    return React.createElement(ColorButtonsRow, Object.assign({}, props, { colors: colors }));
};
const ColorButtons = (props) => {
    return React.createElement("div", { className: "pt-1 pb-1", style: {} },
        React.createElement(ColorButtonsRow0, Object.assign({}, props)),
        React.createElement("div", { className: "mt-2" },
            React.createElement(ColorButtonsRow1, Object.assign({}, props))));
};
class ColorDropdown extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.deactivate = this.deactivate.bind(this);
        this.state = {
            open: false
        };
    }
    deactivate() {
        this.setState({
            open: false
        });
    }
    activate() {
        this.setState({
            open: true
        });
    }
    render() {
        const props = this.props;
        const onSelected = props.onSelected || Functions_1.NULL_FUNCTION;
        return (React.createElement("div", null,
            React.createElement("br", null),
            React.createElement(ColorButtons, Object.assign({}, props)),
            React.createElement(ColorButton, { color: "yellow", id: "ColorButton1", onSelected: () => this.activate() }),
            React.createElement(reactstrap_3.Popover, { placement: "bottom", trigger: "legacy", fade: false, delay: 0, isOpen: this.state.open, target: "ColorButton1", toggle: this.deactivate },
                React.createElement(reactstrap_2.PopoverBody, { className: "shadow rounded p-2", style: { backgroundColor: '#ffffff' } },
                    React.createElement(ColorButtons, Object.assign({}, props, { onSelected: (color) => {
                            this.deactivate();
                            onSelected(color);
                        } })))),
            React.createElement("div", { style: {} }, "this is some example text that would be highlighted"),
            React.createElement(reactstrap_1.Button, { id: "Popover2", type: "button" }, "Launch Popover"),
            React.createElement(ColorExamples, null),
            React.createElement(reactstrap_4.UncontrolledPopover, { placement: "bottom", trigger: "legacy", delay: 0, hideArrow: true, className: "border-0", target: "Popover2" },
                React.createElement(reactstrap_2.PopoverBody, null))));
    }
}
exports.ColorDropdown = ColorDropdown;
//# sourceMappingURL=data:application/json;base64,