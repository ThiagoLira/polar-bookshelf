"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const WebDriverTestResultReader_1 = require("../../js/test/results/reader/WebDriverTestResultReader");
const Spectron_1 = require("../../js/test/Spectron");
const assert = require('assert');
const TIMEOUT = 10000;
describe('content-capture', function () {
    this.timeout(TIMEOUT);
    Spectron_1.Spectron.setup(__dirname);
    it('capture basic document', function () {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("mocha: Waiting for first window");
            assert.equal(yield this.app.client.getWindowCount(), 1);
            let webDriverTestResultReader = new WebDriverTestResultReader_1.WebDriverTestResultReader(this.app);
            let result = yield webDriverTestResultReader.read();
            assert.equal(result.version, "4.0.0");
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxzR0FBaUc7QUFFakcscURBQWdEO0FBRWhELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUVqQyxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFFdEIsUUFBUSxDQUFDLGlCQUFpQixFQUFFO0lBRXhCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFdEIsbUJBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFMUIsRUFBRSxDQUFDLHdCQUF3QixFQUFFOztZQUV6QixPQUFPLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7WUFFL0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRXhELElBQUkseUJBQXlCLEdBQUcsSUFBSSxxREFBeUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFeEUsSUFBSSxNQUFNLEdBQVEsTUFBTSx5QkFBeUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQStDekQsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTFDLENBQUM7S0FBQSxDQUFDLENBQUM7QUFFUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7V2ViRHJpdmVyVGVzdFJlc3VsdFJlYWRlcn0gZnJvbSAnLi4vLi4vanMvdGVzdC9yZXN1bHRzL3JlYWRlci9XZWJEcml2ZXJUZXN0UmVzdWx0UmVhZGVyJztcbmltcG9ydCB7YXNzZXJ0SlNPTn0gZnJvbSAnLi4vLi4vanMvdGVzdC9Bc3NlcnRpb25zJztcbmltcG9ydCB7U3BlY3Ryb259IGZyb20gJy4uLy4uL2pzL3Rlc3QvU3BlY3Ryb24nO1xuXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcblxuY29uc3QgVElNRU9VVCA9IDEwMDAwO1xuXG5kZXNjcmliZSgnY29udGVudC1jYXB0dXJlJywgZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy50aW1lb3V0KFRJTUVPVVQpO1xuXG4gICAgU3BlY3Ryb24uc2V0dXAoX19kaXJuYW1lKTtcblxuICAgIGl0KCdjYXB0dXJlIGJhc2ljIGRvY3VtZW50JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwibW9jaGE6IFdhaXRpbmcgZm9yIGZpcnN0IHdpbmRvd1wiKTtcblxuICAgICAgICBhc3NlcnQuZXF1YWwoYXdhaXQgdGhpcy5hcHAuY2xpZW50LmdldFdpbmRvd0NvdW50KCksIDEpO1xuXG4gICAgICAgIGxldCB3ZWJEcml2ZXJUZXN0UmVzdWx0UmVhZGVyID0gbmV3IFdlYkRyaXZlclRlc3RSZXN1bHRSZWFkZXIodGhpcy5hcHApO1xuXG4gICAgICAgIGxldCByZXN1bHQ6IGFueSA9IGF3YWl0IHdlYkRyaXZlclRlc3RSZXN1bHRSZWFkZXIucmVhZCgpO1xuICAgICAgICAvL1xuICAgICAgICAvLyBsZXQgZXhwZWN0ZWQgPSB7XG4gICAgICAgIC8vICAgICBcImNhcHR1cmVkRG9jdW1lbnRzXCI6IHtcbiAgICAgICAgLy8gICAgICAgICBcImZpbGU6Ly8vaG9tZS9idXJ0b24vcHJvamVjdHMvcG9sYXItYm9va3NoZWxmL3dlYi9zcGVjdHJvbi9jb250ZW50LWNhcHR1cmUvYXBwLmh0bWxcIjoge1xuICAgICAgICAvLyAgICAgICAgICAgICBcImNvbnRlbnRcIjogXCI8aHRtbD48aGVhZD48YmFzZSBocmVmPVxcXCJmaWxlOi8vL2hvbWUvYnVydG9uL3Byb2plY3RzL3BvbGFyLWJvb2tzaGVsZi93ZWIvc3BlY3Ryb24vY29udGVudC1jYXB0dXJlL2FwcC5odG1sXFxcIj48L2hlYWQ+PGJvZHk+XFxuXFxuPHA+XFxuICAgIFRoaXMgaXMgc29tZSBjb250ZW50LlxcbjwvcD5cXG5cXG5cXG5cXG5cXG5cXG48L2JvZHk+PC9odG1sPlwiLFxuICAgICAgICAvLyAgICAgICAgICAgICBcImNvbnRlbnRUZXh0TGVuZ3RoXCI6IDE3NyxcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJocmVmXCI6IFwiZmlsZTovLy9ob21lL2J1cnRvbi9wcm9qZWN0cy9wb2xhci1ib29rc2hlbGYvd2ViL3NwZWN0cm9uL2NvbnRlbnQtY2FwdHVyZS9hcHAuaHRtbFwiLFxuICAgICAgICAvLyAgICAgICAgICAgICBcIm11dGF0aW9uc1wiOiB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBcImJhc2VBZGRlZFwiOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwiY2xlYW51cEJhc2VcIjoge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiYmFzZUFkZGVkXCI6IHRydWUsXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJleGlzdGluZ0Jhc2VSZW1vdmVkXCI6IGZhbHNlXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgXCJjbGVhbnVwSGVhZFwiOiB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJoZWFkQWRkZWRcIjogZmFsc2VcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0sXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBcImNsZWFudXBSZW1vdmVTY3JpcHRzXCI6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBcInNjcmlwdHNSZW1vdmVkXCI6IDFcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH0sXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBcImV2ZW50QXR0cmlidXRlc1JlbW92ZWRcIjogMCxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwiZXhpc3RpbmdCYXNlUmVtb3ZlZFwiOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwiamF2YXNjcmlwdEFuY2hvcnNSZW1vdmVkXCI6IDAsXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBcInNob3dBcmlhSGlkZGVuXCI6IDBcbiAgICAgICAgLy8gICAgICAgICAgICAgfSxcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJzY3JvbGxCb3hcIjoge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgXCJoZWlnaHRcIjogMCxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwid2lkdGhcIjogMFxuICAgICAgICAvLyAgICAgICAgICAgICB9LFxuICAgICAgICAvLyAgICAgICAgICAgICBcInNjcm9sbEhlaWdodFwiOiAwLFxuICAgICAgICAvLyAgICAgICAgICAgICBcInRpdGxlXCI6IFwiXCIsXG4gICAgICAgIC8vICAgICAgICAgICAgIFwidXJsXCI6IFwiZmlsZTovLy9ob21lL2J1cnRvbi9wcm9qZWN0cy9wb2xhci1ib29rc2hlbGYvd2ViL3NwZWN0cm9uL2NvbnRlbnQtY2FwdHVyZS9hcHAuaHRtbFwiXG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgfSxcbiAgICAgICAgLy8gICAgIFwic2Nyb2xsXCI6IHtcbiAgICAgICAgLy8gICAgICAgICBcImhlaWdodFwiOiA1NzUsXG4gICAgICAgIC8vICAgICAgICAgXCJ3aWR0aFwiOiA4MDBcbiAgICAgICAgLy8gICAgIH0sXG4gICAgICAgIC8vICAgICBcInRpdGxlXCI6IFwiXCIsXG4gICAgICAgIC8vICAgICBcInR5cGVcIjogXCJwaHpcIixcbiAgICAgICAgLy8gICAgIFwidXJsXCI6IFwiLi4ucmVtb3ZlZC4uLlwiLFxuICAgICAgICAvLyAgICAgXCJ2ZXJzaW9uXCI6IFwiNC4wLjBcIlxuICAgICAgICAvLyB9O1xuICAgICAgICAvL1xuICAgICAgICAvLyBhc3NlcnRKU09OKHJlc3VsdCwgZXhwZWN0ZWQpO1xuXG4gICAgICAgIC8vIHJpZ2h0IG5vdyB3ZSdyZSBqdXN0IHZlcmlmeWluZyB0aGF0IGl0IHdvcmtzLCBub3QgdGhlIGNvbnRlbnQuXG4gICAgICAgIGFzc2VydC5lcXVhbChyZXN1bHQudmVyc2lvbiwgXCI0LjAuMFwiKTtcblxuICAgIH0pO1xuXG59KTtcbiJdfQ==