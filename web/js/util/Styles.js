"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("polar-shared/src/Preconditions");
const Optional_1 = require("polar-shared/src/util/ts/Optional");
const Strings_1 = require("polar-shared/src/util/Strings");
class Styles {
    static parsePX(value) {
        Preconditions_1.Preconditions.assertNotNull(value, "value");
        if (Strings_1.Strings.empty(value)) {
            throw new Error("Empty string given");
        }
        return parseInt(value.replace("px", ""));
    }
    static positioning(element) {
        const result = {
            left: undefined,
            top: undefined,
            right: undefined,
            bottom: undefined,
            width: undefined,
            height: undefined,
        };
        Object.keys(result).forEach(key => {
            if (result.hasOwnProperty(key)) {
                result[key] = Optional_1.Optional.of(element.style.getPropertyValue(key))
                    .filter(current => current !== null && current !== undefined)
                    .map((current) => current.toString())
                    .filter(current => current !== null && current !== "")
                    .getOrUndefined();
            }
        });
        return result;
    }
    static positioningToPX(positioning) {
        let result = {
            left: undefined,
            top: undefined,
            right: undefined,
            bottom: undefined,
            width: undefined,
            height: undefined,
        };
        for (let key in positioning) {
            if (!positioning.hasOwnProperty(key)) {
                continue;
            }
            result[key] = Optional_1.Optional.of(positioning[key])
                .map(current => Styles.parsePX(current))
                .getOrUndefined();
        }
        return result;
    }
}
exports.Styles = Styles;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3R5bGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0VBQTZEO0FBQzdELGdFQUEyRDtBQUMzRCwyREFBc0Q7QUFFdEQsTUFBYSxNQUFNO0lBT2YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFnQztRQUUzQyw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFNUMsSUFBRyxpQkFBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7U0FDekM7UUFFRCxPQUFPLFFBQVEsQ0FBQyxLQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFNTSxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQW9CO1FBRTFDLE1BQU0sTUFBTSxHQUFnQjtZQUN4QixJQUFJLEVBQUUsU0FBUztZQUNmLEdBQUcsRUFBRSxTQUFTO1lBQ2QsS0FBSyxFQUFFLFNBQVM7WUFDaEIsTUFBTSxFQUFFLFNBQVM7WUFDakIsS0FBSyxFQUFFLFNBQVM7WUFDaEIsTUFBTSxFQUFFLFNBQVM7U0FDcEIsQ0FBQztRQUVGLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBRTlCLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFFNUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLG1CQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQ3pELE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLFNBQVMsQ0FBQztxQkFDNUQsR0FBRyxDQUFDLENBQUMsT0FBWSxFQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7cUJBQ2pELE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLEVBQUUsQ0FBQztxQkFDckQsY0FBYyxFQUFFLENBQUM7YUFDekI7UUFFTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7SUFPRCxNQUFNLENBQUMsZUFBZSxDQUFDLFdBQXdCO1FBRTNDLElBQUksTUFBTSxHQUFrQjtZQUN4QixJQUFJLEVBQUUsU0FBUztZQUNmLEdBQUcsRUFBRSxTQUFTO1lBQ2QsS0FBSyxFQUFFLFNBQVM7WUFDaEIsTUFBTSxFQUFFLFNBQVM7WUFDakIsS0FBSyxFQUFFLFNBQVM7WUFDaEIsTUFBTSxFQUFFLFNBQVM7U0FDcEIsQ0FBQztRQUVGLEtBQUksSUFBSSxHQUFHLElBQUksV0FBVyxFQUFFO1lBRXhCLElBQUcsQ0FBRSxXQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQyxTQUFTO2FBQ1o7WUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsbUJBQVEsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUN0QyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUN2QyxjQUFjLEVBQUUsQ0FBQztTQUV6QjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7Q0FFSjtBQWxGRCx3QkFrRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvUHJlY29uZGl0aW9ucyc7XG5pbXBvcnQge09wdGlvbmFsfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3V0aWwvdHMvT3B0aW9uYWwnO1xuaW1wb3J0IHtTdHJpbmdzfSBmcm9tIFwicG9sYXItc2hhcmVkL3NyYy91dGlsL1N0cmluZ3NcIjtcblxuZXhwb3J0IGNsYXNzIFN0eWxlcyB7XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSB0aGUgYW1vdW50IG9mIHBpeGVscyBmcm9tIHRoZSBnaXZlbiB2YWx1ZS4gIFJpZ2h0IG5vdyB3ZSBvbmx5XG4gICAgICogc3VwcG9ydCBweCBidXQgaW4gdGhlIGZ1dHVyZSB3ZSBjb3VsZCBzdXBwb3J0IG90aGVyIHR5cGVzLlxuICAgICAqXG4gICAgICovXG4gICAgc3RhdGljIHBhcnNlUFgodmFsdWU6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpOiBudW1iZXIge1xuXG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbCh2YWx1ZSwgXCJ2YWx1ZVwiKTtcblxuICAgICAgICBpZihTdHJpbmdzLmVtcHR5KHZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1wdHkgc3RyaW5nIGdpdmVuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlIS5yZXBsYWNlKFwicHhcIiwgXCJcIikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgdG9wLCBsZWZ0LCB3aWR0aCwgYW5kIGhlaWdodCBvZiB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcG9zaXRpb25pbmcoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcblxuICAgICAgICBjb25zdCByZXN1bHQ6IFBvc2l0aW9uaW5nID0ge1xuICAgICAgICAgICAgbGVmdDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdG9wOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByaWdodDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYm90dG9tOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgICAgIH07XG5cbiAgICAgICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGtleSA9PiB7XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBPcHRpb25hbC5vZihlbGVtZW50LnN0eWxlLmdldFByb3BlcnR5VmFsdWUoa2V5KSlcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihjdXJyZW50ID0+IGN1cnJlbnQgIT09IG51bGwgJiYgY3VycmVudCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChjdXJyZW50OiBhbnkpOiBzdHJpbmcgPT4gY3VycmVudC50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGN1cnJlbnQgPT4gY3VycmVudCAhPT0gbnVsbCAmJiBjdXJyZW50ICE9PSBcIlwiKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0T3JVbmRlZmluZWQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhbGwgdGhlIHBvc2l0aW9uaW5nIGtleXMgdG8gcGl4ZWxzLlxuICAgICAqL1xuICAgIHN0YXRpYyBwb3NpdGlvbmluZ1RvUFgocG9zaXRpb25pbmc6IFBvc2l0aW9uaW5nKTogUG9zaXRpb25pbmdQWCB7XG5cbiAgICAgICAgbGV0IHJlc3VsdDogUG9zaXRpb25pbmdQWCA9IHtcbiAgICAgICAgICAgIGxlZnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRvcDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcmlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJvdHRvbTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuXG4gICAgICAgIGZvcihsZXQga2V5IGluIHBvc2l0aW9uaW5nKSB7XG5cbiAgICAgICAgICAgIGlmKCEgcG9zaXRpb25pbmcuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IE9wdGlvbmFsLm9mKHBvc2l0aW9uaW5nW2tleV0pXG4gICAgICAgICAgICAgICAgLm1hcChjdXJyZW50ID0+IFN0eWxlcy5wYXJzZVBYKGN1cnJlbnQpKVxuICAgICAgICAgICAgICAgIC5nZXRPclVuZGVmaW5lZCgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgfVxuXG59XG5cbnR5cGUgUG9zaXRpb25pbmdJbmRleCA9IHtba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWR9XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zaXRpb25pbmcgZXh0ZW5kcyBQb3NpdGlvbmluZ0luZGV4IHtcbiAgICBsZWZ0OiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgdG9wOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgcmlnaHQ6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICBib3R0b206IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICB3aWR0aDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgIGhlaWdodDogc3RyaW5nIHwgdW5kZWZpbmVkLFxufVxuXG50eXBlIFBvc2l0aW9uaW5nUFhJbmRleCA9IHtba2V5OiBzdHJpbmddOiBudW1iZXIgfCB1bmRlZmluZWR9XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zaXRpb25pbmdQWCBleHRlbmRzIFBvc2l0aW9uaW5nUFhJbmRleCB7XG4gICAgbGVmdDogbnVtYmVyIHwgdW5kZWZpbmVkLFxuICAgIHRvcDogbnVtYmVyIHwgdW5kZWZpbmVkLFxuICAgIHJpZ2h0OiBudW1iZXIgfCB1bmRlZmluZWQsXG4gICAgYm90dG9tOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gICAgd2lkdGg6IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgICBoZWlnaHQ6IG51bWJlciB8IHVuZGVmaW5lZCxcbn1cblxuXG5cblxuXG4iXX0=