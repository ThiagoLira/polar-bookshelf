"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const Logger_1 = require("polar-shared/src/logger/Logger");
const Button_1 = __importDefault(require("reactstrap/lib/Button"));
const Input_1 = __importDefault(require("reactstrap/lib/Input"));
const SocialLinks_1 = require("../../util/SocialLinks");
const RendererAnalytics_1 = require("../../ga/RendererAnalytics");
const SplitLayout_1 = require("../../ui/split_layout/SplitLayout");
const SplitLayout_2 = require("../../ui/split_layout/SplitLayout");
const SplitLayoutRight_1 = require("../../ui/split_layout/SplitLayoutRight");
const react_select_1 = __importDefault(require("react-select"));
const Visibility_1 = require("polar-shared/src/datastore/Visibility");
const log = Logger_1.Logger.create();
class Styles {
}
Styles.ShareButton = {
    fontSize: '35px',
    marginTop: 'auto',
    marginBottom: 'auto',
    marginRight: '10px',
};
Styles.ShareImage = {
    maxHeight: '35px',
    maxWidth: '35px',
};
class ShareContentControl extends react_1.default.PureComponent {
    constructor(props) {
        super(props);
        this.onVisibilityChanged = this.onVisibilityChanged.bind(this);
        this.onDone = this.onDone.bind(this);
        this.sharedVia = this.sharedVia.bind(this);
        this.state = {
            visibility: this.props.visibility || Visibility_1.Visibility.PRIVATE
        };
        this.props.createShareLink()
            .then((shareLink) => {
            log.info("Share link resolved to: " + shareLink);
            this.setState(Object.assign(Object.assign({}, this.state), { shareLink }));
        })
            .catch(err => log.error("Unable to create share link: ", err));
    }
    render() {
        const visibility = this.state.visibility;
        const shareLink = this.state.shareLink || "";
        const VisibilityDescription = () => {
            if (visibility === 'private') {
                return react_1.default.createElement("p", null,
                    "Documents that are ",
                    react_1.default.createElement("b", null, "private"),
                    " may only be seen or edited by you and are not available to anyone else including search engines.");
            }
            else {
                return react_1.default.createElement("div", null,
                    react_1.default.createElement("p", null,
                        "Documents that are ",
                        react_1.default.createElement("b", null, "public"),
                        " are ",
                        react_1.default.createElement("i", null, "shared publicly on the Internet"),
                        " with anyone who has access to the URL including search engines. Only you can add annotations which appear on this URL. The user may add the document to their own document repository to add their own annotations."),
                    react_1.default.createElement("div", { className: "mt-1 mb-1" },
                        react_1.default.createElement("b", null, "Link to share:")),
                    react_1.default.createElement("div", { className: "mb-1" },
                        react_1.default.createElement(Input_1.default, { type: "text", className: "pl-1 pr-1", style: {
                                minWidth: '150px',
                                maxWidth: '650px',
                                fontSize: '14px'
                            }, onFocus: (event) => event.target.select(), defaultValue: shareLink })),
                    react_1.default.createElement("div", { className: "mt-2", style: {
                            display: 'flex'
                        } },
                        react_1.default.createElement("div", { className: "text-muted mt-auto mb-auto mr-2 " }, "Share link via:"),
                        react_1.default.createElement("a", { target: "_new", style: Styles.ShareButton, onClick: () => this.sharedVia('twitter'), title: "Twitter", href: SocialLinks_1.SocialLinks.createForTwitter(shareLink) },
                            react_1.default.createElement("img", { style: Styles.ShareImage, alt: "twitter", src: "/web/assets/logos/twitter.svg" })),
                        react_1.default.createElement("a", { target: "_new", style: Styles.ShareButton, onClick: () => this.sharedVia('gmail'), title: "GMail", href: SocialLinks_1.SocialLinks.createForGMail(shareLink) },
                            react_1.default.createElement("img", { style: Styles.ShareImage, alt: "GMail", src: "/web/assets/logos/gmail.svg" })),
                        react_1.default.createElement("a", { target: "_new", style: Styles.ShareButton, onClick: () => this.sharedVia('facebook'), title: "Facebook", href: SocialLinks_1.SocialLinks.createForFacebook(shareLink) },
                            react_1.default.createElement("img", { style: Styles.ShareImage, alt: "Facebook", src: "/web/assets/logos/facebook.svg" }))));
            }
        };
        const WebSharing = () => {
            return react_1.default.createElement("div", { className: "twitter-bootstrap-content" },
                react_1.default.createElement("div", { style: {
                        display: 'flex',
                        verticalAlign: 'top'
                    } },
                    react_1.default.createElement("div", { className: "p-1" },
                        react_1.default.createElement("div", { style: { display: 'block', whiteSpace: 'nowrap' }, className: "mt-2 mb-2" },
                            react_1.default.createElement(Button_1.default, { id: "sharing-button-private", color: colors.PRIVATE, outline: outlines.PRIVATE, size: "md", onClick: () => this.onVisibilityChanged(Visibility_1.Visibility.PRIVATE) },
                                react_1.default.createElement("span", { className: "mr-1" },
                                    react_1.default.createElement("i", { className: "fas fa-lock" })),
                                "Private"),
                            react_1.default.createElement(Button_1.default, { id: "sharing-button-public", color: colors.PUBLIC, outline: outlines.PUBLIC, size: "md", onClick: () => this.onVisibilityChanged(Visibility_1.Visibility.PUBLIC), className: "ml-2" },
                                react_1.default.createElement("span", { className: "mr-1" },
                                    react_1.default.createElement("i", { className: "fas fa-lock-open" })),
                                "Public")),
                        react_1.default.createElement("p", null,
                            "This document is currently ",
                            react_1.default.createElement("b", null, visibility),
                            "."),
                        react_1.default.createElement(VisibilityDescription, null),
                        react_1.default.createElement("div", { className: "mt-1 mb-1" },
                            "TODO: - only accept input that looks like an email address -",
                            react_1.default.createElement(react_select_1.default, { isMulti: true, isClearable: true, autoFocus: true, classNamePrefix: "select", value: [], defaultValue: [], placeholder: "Enter names or email addresses" })),
                        react_1.default.createElement("div", { className: "text-right" },
                            react_1.default.createElement(Button_1.default, { id: "sharing-button-ok", color: "secondary", size: "sm", onClick: () => this.onDone(), className: "ml-1" }, "Done")))));
        };
        const NoSharingEnabled = () => {
            return react_1.default.createElement("div", { className: "twitter-bootstrap-content p-2" },
                react_1.default.createElement(SplitLayout_1.SplitLayout, null,
                    react_1.default.createElement(SplitLayout_2.SplitLayoutLeft, null,
                        react_1.default.createElement("h3", null, "Enable Cloud Sync"),
                        react_1.default.createElement("p", null, "Cloud Sync must be enabled for the Polar desktop app to work with sharing.")),
                    react_1.default.createElement(SplitLayoutRight_1.SplitLayoutRight, null,
                        react_1.default.createElement("i", { className: "fas fa-unlink text-danger", style: { fontSize: '75px' } }))));
        };
        const outlines = {
            PRIVATE: visibility !== Visibility_1.Visibility.PRIVATE,
            PUBLIC: visibility !== Visibility_1.Visibility.PUBLIC,
        };
        const colors = {
            PRIVATE: visibility === Visibility_1.Visibility.PRIVATE ? 'primary' : 'secondary',
            PUBLIC: visibility === Visibility_1.Visibility.PUBLIC ? 'primary' : 'secondary'
        };
        if (this.props.datastoreCapabilities.networkLayers.has('web')) {
            return react_1.default.createElement(WebSharing, null);
        }
        else {
            return react_1.default.createElement(NoSharingEnabled, null);
        }
    }
    onVisibilityChanged(visibility) {
        if (visibility === this.state.visibility) {
            return;
        }
        this.props.onVisibilityChanged(visibility)
            .then(() => {
            this.setState({ visibility });
        })
            .catch(err => log.error("Unable to change visibility: ", err));
    }
    sharedVia(platform) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'shared-via', action: platform });
    }
    onDone() {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'sharing', action: this.state.visibility });
        this.props.onDone();
    }
}
exports.ShareContentControl = ShareContentControl;
//# sourceMappingURL=data:application/json;base64,