"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const Logger_1 = require("polar-shared/src/logger/Logger");
const ResourcePaths_1 = require("../../electron/webresource/ResourcePaths");
const AuthHosts_1 = require("./AuthHosts");
const log = Logger_1.Logger.create();
const WIDTH = 900 * 1.2;
const HEIGHT = 1100 * 1.2;
const SIDEBAR_BUFFER = 100;
const DEFAULT_URL = ResourcePaths_1.ResourcePaths.resourceURLFromRelativeURL('./apps/home/default.html');
exports.APP_ICON = ResourcePaths_1.ResourcePaths.resourceURLFromRelativeURL('./icon.png');
exports.BROWSER_WINDOW_OPTIONS = Object.freeze({
    backgroundColor: '#FFF',
    width: WIDTH + SIDEBAR_BUFFER,
    height: HEIGHT,
    show: false,
    icon: exports.APP_ICON,
    webPreferences: {
        nodeIntegration: true,
        defaultEncoding: 'UTF-8',
        webSecurity: false,
        webaudio: true,
        partition: 'persist:polar-app'
    }
});
class MainAppBrowserWindowFactory {
    static createWindow(browserWindowOptions = exports.BROWSER_WINDOW_OPTIONS, url = DEFAULT_URL) {
        browserWindowOptions = Object.assign({}, browserWindowOptions);
        const position = this.computeXY();
        if (position) {
            browserWindowOptions.x = position.x;
            browserWindowOptions.y = position.y;
        }
        const display = electron_1.screen.getPrimaryDisplay();
        const MIN_FACTOR = 0.4;
        const dimensionMappings = [
            { original: 'minHeight', dimension: 'height', defaultValue: display.size.width * MIN_FACTOR },
            { original: 'minWidth', dimension: 'width', defaultValue: display.size.height * MIN_FACTOR },
            { original: 'height', dimension: 'height' },
            { original: 'width', dimension: 'width' }
        ];
        for (const dimensionMapping of dimensionMappings) {
            const current = browserWindowOptions[dimensionMapping.original] || dimensionMapping.defaultValue;
            const max = display.size[dimensionMapping.dimension];
            browserWindowOptions[dimensionMapping.original]
                = Math.min(current, max);
        }
        const browserWindow = new electron_1.BrowserWindow(browserWindowOptions);
        browserWindow.on('close', function (e) {
            e.preventDefault();
            if (browserWindow.webContents) {
                browserWindow.webContents.clearHistory();
                browserWindow.webContents.session.clearCache(() => {
                    browserWindow.destroy();
                });
            }
        });
        browserWindow.webContents.on('new-window', (e, url) => {
            e.preventDefault();
            electron_1.shell.openExternal(url)
                .catch(err => log.error("Cloud open external URL", err, url));
        });
        browserWindow.webContents.on('will-navigate', (e, navURL) => {
            const parsedURL = new URL(navURL);
            const host = parsedURL.hostname;
            const allowedHosts = AuthHosts_1.AuthHosts.get();
            if (host === "localhost") {
                log.info("Always allowing localhost URL");
                return;
            }
            if (navURL.startsWith("https://") && allowedHosts.includes(host)) {
                log.info("Allowing URL for authentication: " + navURL);
                return;
            }
            log.info("Attempt to navigate to new URL: ", navURL);
            e.preventDefault();
            electron_1.shell.openExternal(navURL)
                .catch(err => log.error("Cloud open external URL", err, url));
        });
        log.info("Loading URL: " + url);
        browserWindow.loadURL(url)
            .catch(err => log.error("Cloud not load URL ", err, url));
        return new Promise(resolve => {
            browserWindow.once('ready-to-show', () => {
                browserWindow.webContents.setZoomFactor(1.0);
                browserWindow.show();
                resolve(browserWindow);
            });
        });
    }
    static computeXY() {
        const offset = 35;
        const focusedWindow = electron_1.BrowserWindow.getFocusedWindow();
        if (focusedWindow) {
            const position = focusedWindow.getPosition();
            let x = position[0];
            let y = position[1];
            x += offset;
            y += offset;
            return { x, y };
        }
        return undefined;
    }
}
exports.MainAppBrowserWindowFactory = MainAppBrowserWindowFactory;
//# sourceMappingURL=data:application/json;base64,