"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ReactDOM = __importStar(require("react-dom"));
const React = __importStar(require("react"));
const FileImportController_1 = require("./FileImportController");
const SimpleReactor_1 = require("../../reactor/SimpleReactor");
const AppInstance_1 = require("../../electron/framework/AppInstance");
const PersistenceLayerManager_1 = require("../../datastore/PersistenceLayerManager");
const react_router_dom_1 = require("react-router-dom");
const SyncBar_1 = require("../../ui/sync_bar/SyncBar");
const DocRepoAnkiSyncController_1 = require("../../controller/DocRepoAnkiSyncController");
const AnnotationRepoScreen_1 = __importDefault(require("../../../../apps/repository/js/annotation_repo/AnnotationRepoScreen"));
const Logger_1 = require("polar-shared/src/logger/Logger");
const UpdatesController_1 = require("../../auto_updates/UpdatesController");
const RepoDocMetaManager_1 = require("../../../../apps/repository/js/RepoDocMetaManager");
const CloudService_1 = require("../../../../apps/repository/js/cloud/CloudService");
const RepoDocMetaLoader_1 = require("../../../../apps/repository/js/RepoDocMetaLoader");
const WhatsNewScreen_1 = __importDefault(require("../../../../apps/repository/js/whats_new/WhatsNewScreen"));
const CommunityScreen_1 = __importDefault(require("../../../../apps/repository/js/community/CommunityScreen"));
const StatsScreen_1 = __importDefault(require("../../../../apps/repository/js/stats/StatsScreen"));
const LogsScreen_1 = __importDefault(require("../../../../apps/repository/js/logs/LogsScreen"));
const ToasterService_1 = require("../../ui/toaster/ToasterService");
const ProgressService_1 = require("../../ui/progress_bar/ProgressService");
const ProgressTracker_1 = require("polar-shared/src/util/ProgressTracker");
const RepoDocMetas_1 = require("../../../../apps/repository/js/RepoDocMetas");
const EditorsPicksScreen_1 = __importDefault(require("../../../../apps/repository/js/editors_picks/EditorsPicksScreen"));
const RendererAnalytics_1 = require("../../ga/RendererAnalytics");
const Version_1 = require("polar-shared/src/util/Version");
const LoadExampleDocs_1 = require("./onboarding/LoadExampleDocs");
const RepositoryTour_1 = require("./RepositoryTour");
const LocalPrefs_1 = require("../../util/LocalPrefs");
const LifecycleEvents_1 = require("../../ui/util/LifecycleEvents");
const Platforms_1 = require("polar-shared/src/util/Platforms");
const AppOrigin_1 = require("../AppOrigin");
const AppRuntime_1 = require("../../AppRuntime");
const AuthHandler_1 = require("./auth_handler/AuthHandler");
const Input_1 = __importDefault(require("reactstrap/lib/Input"));
const Splashes_1 = require("../../../../apps/repository/js/splash2/Splashes");
const MachineDatastores_1 = require("../../telemetry/MachineDatastores");
const MailingList_1 = require("./auth_handler/MailingList");
const UniqueMachines_1 = require("../../telemetry/UniqueMachines");
const PremiumScreen_1 = require("../../../../apps/repository/js/splash/splashes/premium/PremiumScreen");
const Accounts_1 = require("../../accounts/Accounts");
const SupportScreen_1 = require("../../../../apps/repository/js/support/SupportScreen");
const DocRepoScreen_1 = __importDefault(require("../../../../apps/repository/js/doc_repo/DocRepoScreen"));
const CreateGroupScreen_1 = require("../../../../apps/repository/js/groups/create/CreateGroupScreen");
const GroupsScreen_1 = require("../../../../apps/repository/js/groups/GroupsScreen");
const GroupScreen_1 = require("../../../../apps/repository/js/group/GroupScreen");
const AuthRequired_1 = require("../../../../apps/repository/js/AuthRequired");
const UIModes_1 = require("../../ui/uimodes/UIModes");
const HighlightsScreen_1 = require("../../../../apps/repository/js/group/highlights/HighlightsScreen");
const ReactRouters_1 = require("../../ui/ReactRouters");
const GroupHighlightScreen_1 = require("../../../../apps/repository/js/group/highlight/GroupHighlightScreen");
const PrefetchedUserGroupsBackgroundListener_1 = require("../../datastore/sharing/db/PrefetchedUserGroupsBackgroundListener");
const PlatformStyles_1 = require("../../ui/PlatformStyles");
const Devices_1 = require("../../util/Devices");
const PDFModernTextLayers_1 = require("polar-pdf/src/pdf/PDFModernTextLayers");
const AccountProvider_1 = require("../../accounts/AccountProvider");
const log = Logger_1.Logger.create();
class RepositoryApp {
    constructor() {
        this.persistenceLayerManager = new PersistenceLayerManager_1.PersistenceLayerManager();
        this.repoDocInfoManager = new RepoDocMetaManager_1.RepoDocMetaManager(this.persistenceLayerManager);
        this.repoDocInfoLoader = new RepoDocMetaLoader_1.RepoDocMetaLoader(this.persistenceLayerManager);
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            log.info("Running with Polar version: " + Version_1.Version.get());
            UIModes_1.UIModes.register();
            PlatformStyles_1.PlatformStyles.assign();
            AppOrigin_1.AppOrigin.configure();
            PDFModernTextLayers_1.PDFModernTextLayers.configure();
            const updatedDocInfoEventDispatcher = new SimpleReactor_1.SimpleReactor();
            const syncBarProgress = new SimpleReactor_1.SimpleReactor();
            const authHandler = AuthHandler_1.AuthHandlers.get();
            const authStatus = yield authHandler.status();
            const userInfo = yield authHandler.userInfo();
            const account = yield Accounts_1.Accounts.get();
            yield AccountProvider_1.AccountProvider.init();
            const platform = Platforms_1.Platforms.get();
            log.notice("Running on platform: " + platform);
            if (authStatus !== 'needs-authentication') {
                MailingList_1.MailingList.subscribeWhenNecessary()
                    .catch(err => log.error(err));
                new FileImportController_1.FileImportController(this.persistenceLayerManager, updatedDocInfoEventDispatcher)
                    .start();
                new DocRepoAnkiSyncController_1.DocRepoAnkiSyncController(this.persistenceLayerManager, syncBarProgress)
                    .start();
                new UpdatesController_1.UpdatesController().start();
                new ToasterService_1.ToasterService().start();
                new ProgressService_1.ProgressService().start();
                yield PrefetchedUserGroupsBackgroundListener_1.PrefetchedUserGroupsBackgroundListener.start();
                yield this.doLoadExampleDocs();
                MachineDatastores_1.MachineDatastores.triggerBackgroundUpdates(this.persistenceLayerManager);
                UniqueMachines_1.UniqueMachines.trigger();
                updatedDocInfoEventDispatcher.addEventListener(docInfo => {
                    this.onUpdatedDocInfo(docInfo);
                });
                this.persistenceLayerManager.addEventListener(event => {
                    if (event.state === 'changed') {
                        event.persistenceLayer.addEventListener((persistenceLayerEvent) => {
                            this.onUpdatedDocInfo(persistenceLayerEvent.docInfo);
                        });
                    }
                });
            }
            const renderDocRepoScreen = () => {
                return (React.createElement(AuthRequired_1.AuthRequired, { authStatus: authStatus },
                    React.createElement(DocRepoScreen_1.default, { persistenceLayerManager: this.persistenceLayerManager, updatedDocInfoEventDispatcher: updatedDocInfoEventDispatcher, repoDocMetaManager: this.repoDocInfoManager, repoDocMetaLoader: this.repoDocInfoLoader })));
            };
            const renderAnnotationRepoScreen = () => {
                return (React.createElement(AuthRequired_1.AuthRequired, { authStatus: authStatus },
                    React.createElement(AnnotationRepoScreen_1.default, { persistenceLayerManager: this.persistenceLayerManager, updatedDocInfoEventDispatcher: updatedDocInfoEventDispatcher, repoDocMetaManager: this.repoDocInfoManager, repoDocMetaLoader: this.repoDocInfoLoader, syncBarProgress: syncBarProgress })));
            };
            const renderDefaultScreenByDevice = () => {
                if (Devices_1.Devices.get() === 'phone' || Platforms_1.Platforms.isMobile()) {
                    return renderAnnotationRepoScreen();
                }
                return renderDocRepoScreen();
            };
            const renderWhatsNewScreen = () => {
                return (React.createElement(WhatsNewScreen_1.default, { persistenceLayerManager: this.persistenceLayerManager }));
            };
            const renderCommunityScreen = () => {
                return (React.createElement(AuthRequired_1.AuthRequired, { authStatus: authStatus },
                    React.createElement(CommunityScreen_1.default, { persistenceLayerManager: this.persistenceLayerManager })));
            };
            const renderStatsScreen = () => {
                return (React.createElement(AuthRequired_1.AuthRequired, { authStatus: authStatus },
                    React.createElement(StatsScreen_1.default, { persistenceLayerManager: this.persistenceLayerManager, repoDocMetaManager: this.repoDocInfoManager })));
            };
            const renderLogsScreen = () => {
                return (React.createElement(AuthRequired_1.AuthRequired, { authStatus: authStatus },
                    React.createElement(LogsScreen_1.default, { persistenceLayerManager: this.persistenceLayerManager })));
            };
            const editorsPicksScreen = () => {
                return (React.createElement(AuthRequired_1.AuthRequired, { authStatus: authStatus },
                    React.createElement(EditorsPicksScreen_1.default, { persistenceLayerManager: this.persistenceLayerManager })));
            };
            const renderCreateGroupScreen = () => {
                return (React.createElement(AuthRequired_1.AuthRequired, { authStatus: authStatus },
                    React.createElement(CreateGroupScreen_1.CreateGroupScreen, { persistenceLayerManager: this.persistenceLayerManager, repoDocMetaManager: this.repoDocInfoManager })));
            };
            const plan = account ? account.plan : 'free';
            const premiumScreen = () => {
                return (React.createElement(PremiumScreen_1.PremiumScreen, { persistenceLayerManager: this.persistenceLayerManager, plan: plan, userInfo: userInfo.getOrUndefined() }));
            };
            const supportScreen = () => {
                return (React.createElement(SupportScreen_1.SupportScreen, { persistenceLayerManager: this.persistenceLayerManager, plan: plan }));
            };
            const renderGroupScreen = () => {
                return (React.createElement(GroupScreen_1.GroupScreen, { persistenceLayerManager: this.persistenceLayerManager }));
            };
            const renderGroupsScreen = () => {
                return (React.createElement(GroupsScreen_1.GroupsScreen, { persistenceLayerManager: this.persistenceLayerManager }));
            };
            const renderGroupHighlightsScreen = () => {
                return (React.createElement(HighlightsScreen_1.HighlightsScreen, { persistenceLayerManager: this.persistenceLayerManager }));
            };
            const renderGroupHighlightScreen = () => {
                return (React.createElement(GroupHighlightScreen_1.GroupHighlightScreen, { persistenceLayerManager: this.persistenceLayerManager }));
            };
            const onNavChange = () => {
                try {
                    const url = new URL(document.location.href);
                    const path = url.pathname + url.hash || "";
                    const hostname = url.hostname;
                    const title = document.title;
                    log.info("Navigating to: ", { path, hostname, title });
                    RendererAnalytics_1.RendererAnalytics.pageview(path, hostname, document.title);
                }
                catch (e) {
                    log.error("Unable to handle hash change", e);
                }
            };
            onNavChange();
            window.addEventListener("hashchange", () => onNavChange(), false);
            this.sendAnalytics();
            Accounts_1.Accounts.listenForPlanUpgrades()
                .catch(err => log.error("Unable to listen for plan upgrades: ", err));
            const rootElement = document.getElementById('root');
            if (!rootElement) {
                throw new Error("No root element to render to");
            }
            ReactDOM.render(React.createElement("div", { style: { height: '100%' } },
                React.createElement(Splashes_1.Splashes, { persistenceLayerManager: this.persistenceLayerManager }),
                React.createElement(SyncBar_1.SyncBar, { progress: syncBarProgress }),
                React.createElement(RepositoryTour_1.RepositoryTour, null),
                React.createElement(react_router_dom_1.BrowserRouter, null,
                    React.createElement(react_router_dom_1.Switch, { location: ReactRouters_1.ReactRouters.createLocationWithPathnameHash() },
                        React.createElement(react_router_dom_1.Route, { exact: true, path: '/#annotations', render: renderAnnotationRepoScreen }),
                        React.createElement(react_router_dom_1.Route, { exact: true, path: '/#whats-new', render: renderWhatsNewScreen }),
                        React.createElement(react_router_dom_1.Route, { exact: true, path: '/#(logout|overview|login|configured|invite|premium)?', render: renderDocRepoScreen }),
                        React.createElement(react_router_dom_1.Route, { exact: true, path: '/#community', render: renderCommunityScreen }),
                        React.createElement(react_router_dom_1.Route, { exact: true, path: '/#stats', render: renderStatsScreen }),
                        React.createElement(react_router_dom_1.Route, { exact: true, path: '/#logs', render: renderLogsScreen }),
                        React.createElement(react_router_dom_1.Route, { exact: true, path: '/#editors-picks', render: editorsPicksScreen }),
                        React.createElement(react_router_dom_1.Route, { exact: true, path: '/#plans', render: premiumScreen }),
                        React.createElement(react_router_dom_1.Route, { exact: true, path: '/#support', render: supportScreen }),
                        React.createElement(react_router_dom_1.Route, { exact: true, path: '/#premium', render: premiumScreen }),
                        React.createElement(react_router_dom_1.Route, { path: '/group/:group/highlights', render: renderGroupHighlightsScreen }),
                        React.createElement(react_router_dom_1.Route, { path: '/group/:group/docs', render: renderGroupScreen }),
                        React.createElement(react_router_dom_1.Route, { path: '/group/:group/highlight/:id', render: renderGroupHighlightScreen }),
                        React.createElement(react_router_dom_1.Route, { path: '/group/:group', render: renderGroupHighlightsScreen }),
                        React.createElement(react_router_dom_1.Route, { exact: true, path: '/groups', render: renderGroupsScreen }),
                        React.createElement(react_router_dom_1.Route, { exact: true, path: '/groups/create', render: renderCreateGroupScreen }),
                        React.createElement(react_router_dom_1.Route, { exact: true, path: '/', render: renderDefaultScreenByDevice }))),
                React.createElement(Input_1.default, { type: "file", id: "file-upload", name: "file-upload", accept: ".pdf, .PDF", multiple: true, onChange: () => this.onFileUpload(), style: { display: 'none' } })), rootElement);
            if (authStatus !== 'needs-authentication') {
                this.handleRepoDocInfoEvents();
                yield this.repoDocInfoLoader.start();
                new CloudService_1.CloudService(this.persistenceLayerManager)
                    .start();
                yield this.persistenceLayerManager.start();
                log.info("Started repo doc loader.");
            }
            AppInstance_1.AppInstance.notifyStarted('RepositoryApp');
        });
    }
    onFileUpload() {
        window.postMessage({ type: 'file-uploaded' }, '*');
    }
    handleRepoDocInfoEvents() {
        this.repoDocInfoLoader.addEventListener(event => {
            for (const mutation of event.mutations) {
                if (mutation.mutationType === 'created' || mutation.mutationType === 'updated') {
                    this.repoDocInfoManager.updateFromRepoDocMeta(mutation.fingerprint, mutation.repoDocMeta);
                }
                else {
                    this.repoDocInfoManager.updateFromRepoDocMeta(mutation.fingerprint);
                }
            }
        });
    }
    sendAnalytics() {
        const version = Version_1.Version.get();
        const platform = Platforms_1.Platforms.toSymbol(Platforms_1.Platforms.get());
        const screen = `${window.screen.width}x${window.screen.height}`;
        const runtime = AppRuntime_1.AppRuntime.type();
        RendererAnalytics_1.RendererAnalytics.event({ category: 'app', action: 'version-' + version });
        RendererAnalytics_1.RendererAnalytics.event({ category: 'platform', action: `${platform}` });
        RendererAnalytics_1.RendererAnalytics.event({ category: 'screen', action: screen });
        RendererAnalytics_1.RendererAnalytics.event({ category: 'runtime', action: runtime });
    }
    doLoadExampleDocs() {
        return __awaiter(this, void 0, void 0, function* () {
            const doLoad = () => __awaiter(this, void 0, void 0, function* () {
                yield LocalPrefs_1.LocalPrefs.markOnceExecuted(LifecycleEvents_1.LifecycleEvents.HAS_EXAMPLE_DOCS, () => __awaiter(this, void 0, void 0, function* () {
                    const loadExampleDocs = new LoadExampleDocs_1.LoadExampleDocs(this.persistenceLayerManager.get());
                    yield loadExampleDocs.load(docInfo => {
                        this.onUpdatedDocInfo(docInfo);
                    });
                }), () => __awaiter(this, void 0, void 0, function* () {
                    log.debug("Docs already exist in repo");
                }));
            });
            this.persistenceLayerManager.addEventListener(event => {
                if (event.state === 'initialized') {
                    doLoad()
                        .catch(err => log.error("Unable to load example docs: ", err));
                }
            });
        });
    }
    onUpdatedDocInfo(docInfo) {
        const persistenceLayerProvider = () => this.persistenceLayerManager.get();
        const handleUpdatedDocInfo = () => __awaiter(this, void 0, void 0, function* () {
            log.info("Received DocInfo update");
            const docMeta = yield this.persistenceLayerManager.get().getDocMeta(docInfo.fingerprint);
            const repoDocMeta = RepoDocMetas_1.RepoDocMetas.convert(persistenceLayerProvider, docInfo.fingerprint, docMeta);
            const validity = RepoDocMetas_1.RepoDocMetas.isValid(repoDocMeta);
            if (validity === 'valid') {
                this.repoDocInfoManager.updateFromRepoDocMeta(docInfo.fingerprint, repoDocMeta);
                const progress = new ProgressTracker_1.ProgressTracker({ total: 1, id: 'doc-info-update' }).terminate();
                this.repoDocInfoLoader.dispatchEvent({
                    mutations: [
                        {
                            mutationType: 'created',
                            fingerprint: docInfo.fingerprint,
                            repoDocMeta
                        }
                    ],
                    progress
                });
                const persistenceLayer = this.persistenceLayerManager.get();
                if (PersistenceLayerManager_1.PersistenceLayerTypes.get() === 'cloud') {
                    const handleWriteDocMeta = () => __awaiter(this, void 0, void 0, function* () {
                        yield persistenceLayer.synchronizeDocs({ fingerprint: docInfo.fingerprint, docMeta });
                    });
                    handleWriteDocMeta()
                        .catch(err => log.error("Unable to write docMeta to datastore: ", err));
                }
            }
            else {
                log.warn(`We were given an invalid DocInfo which yielded a broken RepoDocMeta ${validity}: `, docInfo, repoDocMeta);
            }
        });
        handleUpdatedDocInfo()
            .catch(err => log.error("Unable to update doc info with fingerprint: " + docInfo.fingerprint, err));
    }
}
exports.RepositoryApp = RepositoryApp;
//# sourceMappingURL=data:application/json;base64,