"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("polar-shared/src/logger/Logger");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const DocFormatFactory_1 = require("../../../docformat/DocFormatFactory");
const AnnotationRects_1 = require("../../../metadata/AnnotationRects");
const AreaHighlights_1 = require("../../../metadata/AreaHighlights");
const AnnotationPointers_1 = require("../../../annotations/AnnotationPointers");
const Rects_1 = require("../../../Rects");
const DocMetas_1 = require("../../../metadata/DocMetas");
const Arrays_1 = require("polar-shared/src/util/Arrays");
const log = Logger_1.Logger.create();
class AreaHighlightController {
    constructor(model) {
        this.model = Preconditions_1.Preconditions.assertNotNull(model, "model");
        this.docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
    }
    start() {
        this.model.registerListenerForDocumentLoaded((event) => this.onDocumentLoaded(event));
        window.addEventListener("message", event => this.onMessageReceived(event), false);
    }
    onDocumentLoaded(event) {
        log.info("onDocumentLoaded: ", event.docMeta);
    }
    onMessageReceived(event) {
        if (event.data && event.data.type === "create-area-highlight") {
            this.onCreateAreaHighlight(event.data);
        }
        if (event.data && event.data.type === "delete-area-highlight") {
            this.onDeleteAreaHighlight(event.data);
        }
    }
    onCreateAreaHighlight(contextMenuLocation) {
        log.info("Creating area highlight: ", contextMenuLocation);
        const rectFromEvent = AnnotationRects_1.AnnotationRects.createFromEvent(contextMenuLocation);
        const annotationRect = AreaHighlights_1.AreaHighlights.toCorrectScale(Rects_1.Rects.createFromBasicRect(rectFromEvent));
        log.info("annotationRect", annotationRect);
        const areaHighlight = AreaHighlights_1.AreaHighlights.create({ rect: annotationRect });
        log.info("areaHighlight", areaHighlight);
        const docMeta = this.model.docMeta;
        const pageMeta = DocMetas_1.DocMetas.getPageMeta(docMeta, contextMenuLocation.pageNum);
        pageMeta.areaHighlights[areaHighlight.id] = areaHighlight;
    }
    onDeleteAreaHighlight(triggerEvent) {
        const annotationPointers = AnnotationPointers_1.AnnotationPointers.toAnnotationPointers(".area-highlight", triggerEvent);
        const annotationPointer = Arrays_1.Arrays.first(annotationPointers);
        if (annotationPointer) {
            const datastore = this.model.persistenceLayerProvider();
            const pageMeta = DocMetas_1.DocMetas.getPageMeta(this.model.docMeta, annotationPointer.pageNum);
            const areaHighlight = pageMeta.areaHighlights[annotationPointer.id];
            const { docMeta } = this.model;
            const opts = {
                datastore, areaHighlight, pageMeta, docMeta
            };
            AreaHighlights_1.AreaHighlights.delete(opts)
                .catch(err => log.error("Unable to delete area highlight: ", err));
        }
    }
}
exports.AreaHighlightController = AreaHighlightController;
//# sourceMappingURL=data:application/json;base64,