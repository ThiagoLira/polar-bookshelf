"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TextHighlightModel_1 = require("./TextHighlightModel");
const Assertions_1 = require("../../../test/Assertions");
const DocMetas_1 = require("../../../metadata/DocMetas");
const TextHighlightRecords_1 = require("../../../metadata/TextHighlightRecords");
const Rect_1 = require("../../../Rect");
const TextRect_1 = require("../../../metadata/TextRect");
const TestingTime_1 = require("polar-shared/src/test/TestingTime");
const Proxies_1 = require("../../../proxies/Proxies");
TestingTime_1.TestingTime.freeze();
describe('TextHighlightModel', function () {
    describe('Listen for new highlights', function () {
        it("Initial values", function () {
            TestingTime_1.TestingTime.freeze();
            const docMeta = createDocMeta();
            const textHighlightModel = new TextHighlightModel_1.TextHighlightModel();
            const mutations = [];
            textHighlightModel.registerListener(docMeta, (textHighlightEvent) => {
                mutations.push(summarize(textHighlightEvent));
            });
            const expected = [
                {
                    "pageNum": 1,
                    "textHighlight": {
                        "id": "1Af41QXbBH",
                        "guid": "1Af41QXbBH",
                        "created": "2012-03-02T11:38:49.321Z",
                        "lastUpdated": "2012-03-02T11:38:49.321Z",
                        "rects": {
                            "0": {
                                "left": 100,
                                "top": 100,
                                "right": 200,
                                "bottom": 200,
                                "width": 100,
                                "height": 100
                            }
                        },
                        "textSelections": {
                            "0": {
                                "text": "hello world",
                                "rect": null
                            }
                        },
                        "text": {
                            "TEXT": "hello world"
                        },
                        "images": {},
                        "notes": {},
                        "questions": {},
                        "flashcards": {},
                        "color": "yellow"
                    },
                    "mutationType": "INITIAL"
                }
            ];
            Assertions_1.assertJSON(mutations, expected);
        });
        it("New text highlights on new pages", function () {
            TestingTime_1.TestingTime.freeze();
            const docMeta = createDocMeta();
            const textHighlightModel = new TextHighlightModel_1.TextHighlightModel();
            let mutations = [];
            textHighlightModel.registerListener(docMeta, function (textHighlightEvent) {
                mutations.push(summarize(textHighlightEvent));
            });
            mutations = [];
            const textHighlightRecord = createTextHighlightRecord();
            DocMetas_1.DocMetas.getPageMeta(docMeta, 3).textHighlights[textHighlightRecord.id] = textHighlightRecord.value;
            const expected = [
                {
                    "pageNum": 3,
                    "textHighlight": {
                        "id": "1Af41QXbBH",
                        "guid": "1Af41QXbBH",
                        "created": "2012-03-02T11:38:49.321Z",
                        "lastUpdated": "2012-03-02T11:38:49.321Z",
                        "rects": {
                            "0": {
                                "left": 100,
                                "top": 100,
                                "right": 200,
                                "bottom": 200,
                                "width": 100,
                                "height": 100
                            }
                        },
                        "textSelections": {
                            "0": {
                                "text": "hello world",
                                "rect": null
                            }
                        },
                        "text": {
                            "TEXT": "hello world"
                        },
                        "images": {},
                        "notes": {},
                        "questions": {},
                        "flashcards": {},
                        "color": "yellow"
                    },
                    "mutationType": "SET"
                }
            ];
            console.log(mutations);
            Assertions_1.assertJSON(mutations, expected);
        });
    });
});
function summarize(textHighlightEvent) {
    return {
        pageNum: textHighlightEvent.pageMeta.pageInfo.num,
        textHighlight: textHighlightEvent.value,
        mutationType: textHighlightEvent.mutationType
    };
}
function createDocMeta() {
    const fingerprint = "110dd61fd57444010b1ab5ff38782f0f";
    const docMeta = DocMetas_1.DocMetas.createWithinInitialPagemarks(fingerprint, 14);
    DocMetas_1.DocMetas.addPagemarks(docMeta, { nrPages: 1, offsetPage: 4, percentage: 50 });
    const textHighlightRecord = createTextHighlightRecord();
    DocMetas_1.DocMetas.getPageMeta(docMeta, 1).textHighlights[textHighlightRecord.id] = textHighlightRecord.value;
    return Proxies_1.Proxies.create(docMeta);
}
function createTextHighlightRecord() {
    const rects = [new Rect_1.Rect({ top: 100, left: 100, right: 200, bottom: 200, width: 100, height: 100 })];
    const textSelections = [new TextRect_1.TextRect({ text: "hello world" })];
    const text = "hello world";
    return TextHighlightRecords_1.TextHighlightRecords.create(rects, textSelections, { TEXT: text });
}
//# sourceMappingURL=data:application/json;base64,