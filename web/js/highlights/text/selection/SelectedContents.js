"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Ranges_1 = require("./Ranges");
const SelectedContent_1 = require("./SelectedContent");
const Selections_1 = require("./Selections");
const RectTexts_1 = require("../controller/RectTexts");
const HTMLSanitizer_1 = require("polar-html/src/sanitize/HTMLSanitizer");
const TextNodeRows_1 = require("./TextNodeRows");
class SelectedContents {
    static compute(win) {
        const selection = win.getSelection();
        const ranges = Ranges_1.Ranges.cloneRanges(Selections_1.Selections.toRanges(selection));
        const text = selection.toString();
        const html = HTMLSanitizer_1.HTMLSanitizer.sanitize(SelectedContents.toHTML(ranges));
        let textNodes = [];
        ranges.forEach(range => {
            textNodes.push(...Ranges_1.Ranges.getTextNodes(range));
        });
        textNodes = TextNodeRows_1.TextNodeRows.fromTextNodes(textNodes);
        const rectTexts = RectTexts_1.RectTexts.toRectTexts(textNodes);
        return new SelectedContent_1.SelectedContent({
            text,
            html,
            rectTexts
        });
    }
    static toHTML(ranges) {
        return ranges.map(range => Ranges_1.Ranges.toHTML(range)).join("");
    }
}
exports.SelectedContents = SelectedContents;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VsZWN0ZWRDb250ZW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNlbGVjdGVkQ29udGVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBZ0M7QUFDaEMsdURBQWtEO0FBQ2xELDZDQUF3QztBQUN4Qyx1REFBa0Q7QUFDbEQseUVBQW9FO0FBQ3BFLGlEQUE0QztBQUs1QyxNQUFhLGdCQUFnQjtJQVVsQixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQVc7UUFFN0IsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLFlBQVksRUFBRyxDQUFDO1FBR3RDLE1BQU0sTUFBTSxHQUFHLGVBQU0sQ0FBQyxXQUFXLENBQUMsdUJBQVUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUdsRSxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbEMsTUFBTSxJQUFJLEdBQUksNkJBQWEsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFdEUsSUFBSSxTQUFTLEdBQVcsRUFBRSxDQUFDO1FBRTNCLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbkIsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLGVBQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztRQVNILFNBQVMsR0FBRywyQkFBWSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVsRCxNQUFNLFNBQVMsR0FBRyxxQkFBUyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVuRCxPQUFPLElBQUksaUNBQWUsQ0FBQztZQUN2QixJQUFJO1lBQ0osSUFBSTtZQUNKLFNBQVM7U0FDWixDQUFDLENBQUM7SUFFUCxDQUFDO0lBTU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFlO1FBQ2hDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLGVBQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUQsQ0FBQztDQUVKO0FBdERELDRDQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UmFuZ2VzfSBmcm9tICcuL1Jhbmdlcyc7XG5pbXBvcnQge1NlbGVjdGVkQ29udGVudH0gZnJvbSAnLi9TZWxlY3RlZENvbnRlbnQnO1xuaW1wb3J0IHtTZWxlY3Rpb25zfSBmcm9tICcuL1NlbGVjdGlvbnMnO1xuaW1wb3J0IHtSZWN0VGV4dHN9IGZyb20gJy4uL2NvbnRyb2xsZXIvUmVjdFRleHRzJztcbmltcG9ydCB7SFRNTFNhbml0aXplcn0gZnJvbSAncG9sYXItaHRtbC9zcmMvc2FuaXRpemUvSFRNTFNhbml0aXplcic7XG5pbXBvcnQge1RleHROb2RlUm93c30gZnJvbSBcIi4vVGV4dE5vZGVSb3dzXCI7XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIFNlbGVjdGVkQ29udGVudHMge1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgU2VsZWN0ZWRDb250ZW50cyBiYXNlZCBvbiB0aGUgcGFnZSBvZmZzZXQsIG5vdCB0aGVcbiAgICAgKiBjbGllbnQvdmlld3BvcnQgb2Zmc2V0LCBhbmQgaW5jbHVkZSBhZGRpdGlvbmFsIG1ldGFkYXRhIGluY2x1ZGluZyB0aGVcbiAgICAgKiB0ZXh0IG9mIHRoZSBzZWxlY3Rpb24sIHRoZSBodG1sLCBldGMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gd2luIHtXaW5kb3d9XG4gICAgICogQHJldHVybiB7U2VsZWN0ZWRDb250ZW50fVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY29tcHV0ZSh3aW46IFdpbmRvdykge1xuXG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHdpbi5nZXRTZWxlY3Rpb24oKSE7XG5cbiAgICAgICAgLy8gZ2V0IGFsbCB0aGUgcmFuZ2VzIGFuZCBjbG9uZSB0aGVtIHNvIHRoZXkgY2FuJ3QgdmFuaXNoLlxuICAgICAgICBjb25zdCByYW5nZXMgPSBSYW5nZXMuY2xvbmVSYW5nZXMoU2VsZWN0aW9ucy50b1JhbmdlcyhzZWxlY3Rpb24pKTtcblxuICAgICAgICAvLyBub3cgZ2V0IHRoZSB0ZXh0IGFuZCB0aGUgc2FuaXRpemVkIEhUTUxcbiAgICAgICAgY29uc3QgdGV4dCA9IHNlbGVjdGlvbi50b1N0cmluZygpO1xuICAgICAgICBjb25zdCBodG1sID0gIEhUTUxTYW5pdGl6ZXIuc2FuaXRpemUoU2VsZWN0ZWRDb250ZW50cy50b0hUTUwocmFuZ2VzKSk7XG5cbiAgICAgICAgbGV0IHRleHROb2RlczogTm9kZVtdID0gW107XG5cbiAgICAgICAgcmFuZ2VzLmZvckVhY2gocmFuZ2UgPT4ge1xuICAgICAgICAgICAgdGV4dE5vZGVzLnB1c2goLi4uUmFuZ2VzLmdldFRleHROb2RlcyhyYW5nZSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBGSVhNRTogd2UncmUgZ2V0dGluZyBGRVdFUiByZXN1bHRzLi4gbm90IG1yb2UuLiB0aGF0J3MgYSBidWcuLlxuXG4gICAgICAgIC8vIGNvbnZlcnQgdGV4dE5vZGVzIHRvIHZpc3VhbCBibG9ja3MgdGhhdCBkb24ndCBvdmVybGFwIC4uLlxuICAgICAgICAvLyBGSVhNRTogdGhpcyBpcyB0aGUgcHJvYmxlbS4uIHdlJ3JlIHNwbGl0dGluZyB0aGUgZmlyc3Qgbm9kZSBhbmQgdGhlbiBpdCdzXG4gICAgICAgIC8vIG9ubHkgYSBwYXJ0aWFsIG5vZGUgYXQgdGhhdCBwb2ludC4uIHdlIGhhdmUgdG8ga2VlcCB0aGUgY2hpbGRyZW4gdG9vXG4gICAgICAgIC8vIGFuZCByZXR1cm4gaXQgYXMgc29tZSBzb3J0IG9mIGNvbnRhaW5lci5cblxuICAgICAgICB0ZXh0Tm9kZXMgPSBUZXh0Tm9kZVJvd3MuZnJvbVRleHROb2Rlcyh0ZXh0Tm9kZXMpO1xuXG4gICAgICAgIGNvbnN0IHJlY3RUZXh0cyA9IFJlY3RUZXh0cy50b1JlY3RUZXh0cyh0ZXh0Tm9kZXMpO1xuXG4gICAgICAgIHJldHVybiBuZXcgU2VsZWN0ZWRDb250ZW50KHtcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICBodG1sLFxuICAgICAgICAgICAgcmVjdFRleHRzXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgZ2l2ZW4gcmFuZ2VzIGFzIEhUTUwsIGZhY3RvcmluZyBpbiBzYW5pdGl6YXRpb24gYXMgd2VsbC5cbiAgICAgKiBAcGFyYW0gcmFuZ2VzXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyB0b0hUTUwocmFuZ2VzOiBSYW5nZVtdKSB7XG4gICAgICAgIHJldHVybiByYW5nZXMubWFwKHJhbmdlID0+IFJhbmdlcy50b0hUTUwocmFuZ2UpKS5qb2luKFwiXCIpO1xuICAgIH1cblxufVxuIl19