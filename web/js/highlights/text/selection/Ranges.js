"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("polar-shared/src/Preconditions");
const Logger_1 = require("polar-shared/src/logger/Logger");
const log = Logger_1.Logger.create();
class Ranges {
    static cloneRanges(ranges) {
        return ranges.map(range => range.cloneRange());
    }
    static splitTextNode(container, offset, useStartBoundary) {
        if (container.nodeType !== Node.TEXT_NODE &&
            container.nodeType !== Node.COMMENT_NODE &&
            container.nodeType !== Node.CDATA_SECTION_NODE) {
            if (offset > 0) {
                return container.childNodes[offset];
            }
            return container;
        }
        const newNode = container.splitText(offset);
        if (useStartBoundary) {
            return newNode;
        }
        else {
            return newNode.previousSibling;
        }
    }
    static toHTML(range) {
        let result = "";
        const docFragment = range.cloneContents();
        docFragment.childNodes.forEach(childNode => {
            if (childNode.nodeType === Node.TEXT_NODE) {
                result += childNode.textContent;
            }
            else {
                result += childNode.outerHTML;
            }
        });
        return result;
    }
    static toText(range) {
        let result = "";
        const docFragment = range.cloneContents();
        docFragment.childNodes.forEach(childNode => {
            if (childNode.nodeType === Node.TEXT_NODE) {
                result += childNode.textContent;
            }
            else {
                result += childNode.innerText;
            }
        });
        return result;
    }
    static getTextNodes(range) {
        Preconditions_1.Preconditions.assertPresent(range, "range");
        const startNode = Ranges.splitTextNode(range.startContainer, range.startOffset, true);
        const endNode = Ranges.splitTextNode(range.endContainer, range.endOffset, false);
        Preconditions_1.Preconditions.assertPresent(startNode, "startNode");
        Preconditions_1.Preconditions.assertPresent(endNode, "endNode");
        const doc = range.startContainer.ownerDocument;
        const treeWalker = doc.createTreeWalker(range.commonAncestorContainer);
        const result = [];
        let node;
        let inSelection = false;
        while (node = treeWalker.nextNode()) {
            if (startNode === node) {
                inSelection = true;
                break;
            }
        }
        while (node) {
            if (node.nodeType === Node.TEXT_NODE) {
                result.push(node);
            }
            if (endNode === node) {
                break;
            }
            node = treeWalker.nextNode();
        }
        return result;
    }
    static hasText(range) {
        Preconditions_1.Preconditions.assertNotNull(range, "range");
        const startNode = Ranges.splitTextNode(range.startContainer, range.startOffset, true);
        const endNode = Ranges.splitTextNode(range.endContainer, range.endOffset, false);
        Preconditions_1.Preconditions.assertPresent(startNode, "startNode");
        Preconditions_1.Preconditions.assertPresent(endNode, "endNode");
        const doc = range.startContainer.ownerDocument;
        const treeWalker = doc.createTreeWalker(range.commonAncestorContainer);
        const result = [];
        let node;
        let inSelection = false;
        while (node = treeWalker.nextNode()) {
            if (startNode === node) {
                inSelection = true;
                break;
            }
        }
        while (node) {
            if (node.nodeType === Node.TEXT_NODE) {
                if (node.textContent && node.textContent.trim() !== '') {
                    return true;
                }
            }
            if (endNode === node) {
                break;
            }
            node = treeWalker.nextNode();
        }
        return false;
    }
    static describeNode(node) {
        return node.cloneNode(false).outerHTML;
    }
}
exports.Ranges = Ranges;
//# sourceMappingURL=data:application/json;base64,