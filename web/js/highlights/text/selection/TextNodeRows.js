"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("polar-shared/src/Preconditions");
const TextNodes_1 = require("./TextNodes");
const Rects_1 = require("../../../Rects");
const Functions_1 = require("polar-shared/src/util/Functions");
const Text_1 = require("../../../util/Text");
class TextRegion {
    constructor() {
        this.textNodes = [];
    }
    push(textNode) {
        if (textNode.textContent.length > 1) {
            throw new Error("Nodes must be split");
        }
        this.textNodes.push(textNode);
    }
    getTextNodes() {
        return this.textNodes;
    }
    get length() {
        return this.textNodes.length;
    }
    toString() {
        let result = "";
        this.textNodes.forEach(textNode => {
            result += textNode.textContent;
        });
        return result;
    }
    format() {
        return `(${this.textNodes.length}): \n` + Text_1.Text.indent(this.toString(), "  ");
    }
    toJSON() {
        return { nrNodes: this.textNodes.length, text: this.toString() };
    }
}
exports.TextRegion = TextRegion;
class TextBlock extends TextRegion {
}
class MergedTextBlock {
    constructor(obj) {
        this.textNode = obj.textNode;
        this.rect = obj.rect;
        this.text = obj.text;
    }
    toString() {
        return this.text;
    }
    toExternal() {
        return { text: this.text, rect: this.rect };
    }
}
class NodeArray {
    constructor(nodes) {
        Preconditions_1.Preconditions.assertNotNull(nodes, "nodes");
        this.nodes = nodes;
    }
    get length() {
        return this.nodes.length;
    }
    static createFromElement(element) {
        if (element.nodeType === Node.ELEMENT_NODE) {
            return new NodeArray(element.childNodes);
        }
        else if (element.nodeType === Node.TEXT_NODE) {
            throw new Error("Text node not supported");
        }
        else {
            throw new Error("Unable to handle node type: " + element.nodeType);
        }
    }
}
exports.NodeArray = NodeArray;
class TextNodeRows {
    static fromTextNode(textNode) {
        if (textNode.nodeType !== Node.TEXT_NODE) {
            throw new Error("Not a text node");
        }
        let nodeArray = TextNodeRows.splitTextNodePerCharacter(textNode);
        let textRegions = TextNodeRows.computeTextRegions(nodeArray, null);
        let textBlocks = TextNodeRows.computeTextBlocks(textRegions);
        let mergedTextBlocks = TextNodeRows.mergeTextBlocks(textBlocks);
        let result = mergedTextBlocks.map(current => current.textNode);
        return result;
    }
    static fromTextNodes(textNodes) {
        const result = [];
        textNodes.forEach(textNode => {
            result.push(...TextNodeRows.fromTextNode(textNode));
        });
        return result;
    }
    static splitElement(element) {
        let result = 0;
        Array.from(element.childNodes).forEach(current => {
            if (current.nodeType === Node.TEXT_NODE) {
                let nodeArray = TextNodeRows.splitTextNodePerCharacter(current);
                result += nodeArray.length;
            }
            if (current.nodeType === Node.ELEMENT_NODE) {
                result += TextNodeRows.splitElement(current);
            }
        });
        return result;
    }
    static computeTextRegions(nodeArray, textRegions) {
        Preconditions_1.Preconditions.assertNotNull(nodeArray, "nodeArray");
        if (nodeArray.constructor !== NodeArray) {
            throw new Error("Not a node array: " + nodeArray.constructor);
        }
        Preconditions_1.Preconditions.assertNotNull(nodeArray.nodes, "nodeArray.nodes");
        if (!textRegions) {
            textRegions = [];
        }
        let textRegion = new TextRegion();
        Functions_1.createSiblings(nodeArray.nodes).forEach(position => {
            let currentNode = position.curr;
            if (currentNode.nodeType === Node.TEXT_NODE) {
                textRegion.push(currentNode);
            }
            if (currentNode.nodeType === Node.ELEMENT_NODE) {
                textRegions.push(textRegion);
                textRegion = new TextRegion();
                TextNodeRows.computeTextRegions(NodeArray.createFromElement(currentNode), textRegions);
            }
            if (position.next === null && textRegion.length > 0) {
                textRegions.push(textRegion);
            }
        });
        return textRegions;
    }
    static computeTextBlocks(textRegions) {
        const textBlocks = [];
        textRegions.forEach(textRegion => {
            let textBlock = new TextBlock();
            let prevRect = null;
            Functions_1.createSiblings(textRegion.getTextNodes()).forEach(position => {
                let currRect = TextNodes_1.TextNodes.getRange(position.curr).getBoundingClientRect();
                if (Rects_1.Rects.isVisible(currRect)) {
                    if (prevRect != null) {
                        if (TextNodeRows.computeRowKey(prevRect) !== TextNodeRows.computeRowKey(currRect)) {
                            textBlocks.push(textBlock);
                            textBlock = new TextBlock();
                        }
                    }
                    prevRect = currRect;
                }
                textBlock.push(position.curr);
                if (position.next === null && textBlock.length > 0) {
                    textBlocks.push(textBlock);
                }
            });
        });
        return textBlocks;
    }
    static mergeTextBlocks(textBlocks) {
        const result = [];
        textBlocks.forEach(textBlock => {
            let textNodes = textBlock.getTextNodes().slice();
            let text = textBlock.toString();
            let textNode = textNodes.pop();
            textNode.textContent = text;
            textNodes.forEach(orphanedNode => {
                orphanedNode.parentNode.removeChild(orphanedNode);
            });
            result.push(new MergedTextBlock({
                textNode,
                text,
                rect: TextNodes_1.TextNodes.getRange(textNode).getBoundingClientRect()
            }));
        });
        return result;
    }
    static computeRowKey(rect) {
        return `${rect.top}:${rect.bottom}`;
    }
    static splitTextNodePerCharacter(textNode) {
        let result = [];
        while (textNode.textContent.length > 1) {
            result.push(textNode);
            textNode = textNode.splitText(1);
        }
        result.push(textNode);
        return new NodeArray(result);
    }
}
exports.TextNodeRows = TextNodeRows;
//# sourceMappingURL=data:application/json;base64,