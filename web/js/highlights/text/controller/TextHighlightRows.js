"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("polar-shared/src/Preconditions");
const utils_1 = require("../../../utils");
const RectElement_1 = require("./RectElement");
const TextHighlightRow_1 = require("./TextHighlightRow");
const IntermediateRow_1 = require("./IntermediateRow");
const Rects_1 = require("../../../Rects");
const DocFormatFactory_1 = require("../../../docformat/DocFormatFactory");
const Elements_1 = require("../../../util/Elements");
const Functions_1 = require("polar-shared/src/util/Functions");
const Objects_1 = require("polar-shared/src/util/Objects");
class TextHighlightRows {
    static createFromSelector(selector) {
        let docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
        let targetDocument = docFormat.targetDocument();
        let elements = Array.from(targetDocument.querySelectorAll(selector));
        if (!elements) {
            throw new Error("No elements");
        }
        let rectElements = elements.map(current => this.computeOffset(current));
        return TextHighlightRows.computeContiguousRects(rectElements);
    }
    static createFromRects(selector) {
    }
    static computeOffset(element) {
        let docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
        Elements_1.Elements.requireClass(element, "text-highlight-span");
        let textHighlightSpanOffset = Elements_1.Elements.offset(element);
        if (docFormat.name === "html") {
            textHighlightSpanOffset = element.getBoundingClientRect();
        }
        let textLayerDivElement = element.parentElement;
        let textLayerDivOffset = utils_1.elementOffset(textLayerDivElement);
        let rect = textLayerDivOffset;
        if (docFormat.name === "html") {
            rect = {
                left: 0,
                top: 0,
                width: 0,
                height: 0,
                bottom: 0,
                right: 0
            };
        }
        let scaleX = utils_1.Styles.parseTransformScaleX(textLayerDivElement.style.transform);
        if (!scaleX) {
            scaleX = 1.0;
        }
        rect.left = rect.left + (textHighlightSpanOffset.left * scaleX);
        rect.top = rect.top + textHighlightSpanOffset.top;
        rect.height = textHighlightSpanOffset.height;
        rect.width = textHighlightSpanOffset.width * scaleX;
        rect.width = Math.min(rect.width, textLayerDivOffset.width);
        rect.bottom = rect.top + rect.height;
        rect.right = rect.left + rect.width;
        rect = Rects_1.Rects.validate(rect);
        let currentScale = docFormat.currentScale();
        Preconditions_1.Preconditions.assertPresent(currentScale, "currentScale");
        Preconditions_1.Preconditions.assertNumber(currentScale, "currentScale");
        rect = Rects_1.Rects.scale(rect, 1.0 / currentScale);
        return new RectElement_1.RectElement(rect, element);
    }
    static computeRows(rectElements) {
        let tuples = Functions_1.createSiblingTuples(rectElements);
        let result = [];
        let row = [];
        tuples.forEach(function (tuple) {
            if (!tuple.curr.rect) {
                throw new Error("Not a RectElement");
            }
            row.push(tuple.curr);
            if (tuple.next == null || (tuple.next && tuple.curr.rect.top !== tuple.next.rect.top)) {
                result.push(row);
                row = [];
            }
        });
        if (row.length !== 0)
            result.push(row);
        return result;
    }
    static computeRectForRow(row) {
        if (row.length == null || row.length === 0)
            throw new Error("Invalid row data");
        let result = Rects_1.Rects.validate(Objects_1.Objects.duplicate(row[0].rect));
        row.forEach(function (rectElement) {
            if (rectElement.rect.left < result.left) {
                result.left = rectElement.rect.left;
            }
            if (rectElement.rect.top < result.top) {
                result.top = rectElement.rect.top;
            }
            if (rectElement.rect.bottom > result.bottom) {
                result.bottom = rectElement.rect.bottom;
            }
            if (rectElement.rect.right > result.right) {
                result.right = rectElement.rect.right;
            }
            result.width = result.right - result.left;
            result.height = result.bottom - result.top;
        });
        return Rects_1.Rects.validate(result);
    }
    static computeIntermediateRows(rectElements) {
        let rows = TextHighlightRows.computeRows(rectElements);
        let result = [];
        rows.forEach(function (rectElementsWithinRow) {
            let rect = TextHighlightRows.computeRectForRow(rectElementsWithinRow);
            let intermediateRow = new IntermediateRow_1.IntermediateRow(rect, rectElementsWithinRow);
            result.push(intermediateRow);
        });
        return result;
    }
    static computeContiguousRects(rectElements) {
        let intermediateRows = TextHighlightRows.computeIntermediateRows(rectElements);
        let intermediateRowPager = Functions_1.createSiblingTuples(intermediateRows);
        let result = [];
        intermediateRowPager.forEach(function (page) {
            if (!page.curr.rect || !page.curr.rectElements) {
                throw new Error("Not a IntermediateRow");
            }
            let adjustedRect = {
                left: page.curr.rect.left,
                top: page.curr.rect.top,
                right: page.curr.rect.right,
                bottom: page.curr.rect.bottom,
                width: 0,
                height: 0
            };
            if (page.next && page.next.rect.top !== page.curr.rect.top) {
                adjustedRect.bottom = Math.max(page.next.rect.top, adjustedRect.bottom);
            }
            adjustedRect.width = adjustedRect.right - adjustedRect.left;
            adjustedRect.height = adjustedRect.bottom - adjustedRect.top;
            adjustedRect = Rects_1.Rects.validate(adjustedRect);
            let textHighlightRow = new TextHighlightRow_1.TextHighlightRow(adjustedRect, page.curr.rectElements);
            result.push(textHighlightRow);
        });
        return result;
    }
}
exports.TextHighlightRows = TextHighlightRows;
//# sourceMappingURL=data:application/json;base64,