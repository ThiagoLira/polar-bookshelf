"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FilePaths_1 = require("polar-shared/src/util/FilePaths");
const ToasterMessages_1 = require("../ui/toaster/ToasterMessages");
const Toaster_1 = require("../ui/toaster/Toaster");
const ProgressTracker_1 = require("polar-shared/src/util/ProgressTracker");
const ProgressMessages_1 = require("../ui/progress_bar/ProgressMessages");
const FileImportClient_1 = require("../apps/repository/FileImportClient");
const Logger_1 = require("polar-shared/src/logger/Logger");
const Functions_1 = require("polar-shared/src/util/Functions");
const FileImportRequests_1 = require("../apps/repository/FileImportRequests");
const log = Logger_1.Logger.create();
class PDFDownloadHandlers {
    static create(webContents, onDownloaded = Functions_1.NULL_FUNCTION, onDownload = Functions_1.NULL_FUNCTION) {
        const willDownloadHandler = (event, downloadItem, downloadWebContents) => {
            log.info("Going to to download: ", downloadItem.getURL());
            const mimeType = downloadItem.getMimeType();
            const basename = FilePaths_1.FilePaths.basename(downloadItem.getURL());
            const tmpPath = FilePaths_1.FilePaths.createTempName(basename);
            log.info("Download PDF file to " + tmpPath);
            ToasterMessages_1.ToasterMessages.send({ type: Toaster_1.ToasterMessageType.INFO, message: "PDF download starting for " + basename });
            downloadItem.setSavePath(tmpPath);
            const progressTracker = new ProgressTracker_1.ProgressTracker({ total: downloadItem.getTotalBytes(), id: 'download:' + basename });
            downloadItem.once('done', (event, state) => {
                ProgressMessages_1.ProgressMessages.broadcast(progressTracker.terminate());
                const message = `PDF download ${state} for ${basename}`;
                switch (state) {
                    case 'completed':
                        ToasterMessages_1.ToasterMessages.send({ type: Toaster_1.ToasterMessageType.SUCCESS, message });
                        FileImportClient_1.FileImportClient.send(FileImportRequests_1.FileImportRequests.fromPath(tmpPath));
                        break;
                    case 'cancelled':
                        ToasterMessages_1.ToasterMessages.send({ type: Toaster_1.ToasterMessageType.WARNING, message });
                        break;
                    case 'interrupted':
                        ToasterMessages_1.ToasterMessages.send({ type: Toaster_1.ToasterMessageType.WARNING, message });
                        break;
                }
                onDownloaded();
            });
            downloadItem.on('updated', () => {
                const progress = progressTracker.abs(downloadItem.getReceivedBytes());
                ProgressMessages_1.ProgressMessages.broadcast(progress);
            });
            onDownload();
        };
        const session = webContents.session;
        session.addListener('will-download', willDownloadHandler);
        webContents.on('destroyed', () => {
            session.removeListener('will-download', willDownloadHandler);
        });
    }
}
exports.PDFDownloadHandlers = PDFDownloadHandlers;
//# sourceMappingURL=data:application/json;base64,