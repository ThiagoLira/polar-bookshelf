"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Preconditions_1 = require("polar-shared/src/Preconditions");
const Optional_1 = require("polar-shared/src/util/ts/Optional");
const Logger_1 = require("polar-shared/src/logger/Logger");
const Strings_1 = require("polar-shared/src/util/Strings");
const Objects_1 = require("polar-shared/src/util/Objects");
const log = Logger_1.Logger.create();
class AggregateParser {
    constructor() {
        this.delegates = [
            new TwitterCardParser(),
            new OGCardParser()
        ];
    }
    parse(doc) {
        const results = this.delegates.map(current => {
            try {
                return current.parse(doc);
            }
            catch (e) {
                log.error("Unable to parse doc: ", e);
                return createNullContentMeta();
            }
        });
        const result = createNullContentMeta();
        for (const key of Objects_1.Objects.typedKeys(result)) {
            result[key] = this.first(current => current[key], ...results);
        }
        return result;
    }
    first(converter, ...contentMeta) {
        const results = contentMeta.map(current => converter(current))
            .map(current => Strings_1.Strings.filterEmpty(current));
        return Optional_1.Optional.first(...results).getOrUndefined();
    }
}
class ContentMetas {
    static parse(doc) {
        return this.parser.parse(doc);
    }
}
exports.ContentMetas = ContentMetas;
ContentMetas.parser = new AggregateParser();
class TwitterCardParser {
    parse(doc) {
        const result = createNullContentMeta();
        result.title = metaValue(doc, 'twitter:title').getOrUndefined();
        result.description = metaValue(doc, 'twitter:description').getOrUndefined();
        return result;
    }
}
class OGCardParser {
    parse(doc) {
        const result = createNullContentMeta();
        result.title = metaValue(doc, 'article:title').getOrUndefined();
        result.description = metaValue(doc, 'article:description').getOrUndefined();
        return result;
    }
}
function createNullContentMeta() {
    const result = {
        title: undefined,
        description: undefined
    };
    return result;
}
function metaValue(doc, name) {
    const optionalMetaElement = meta(doc, name);
    if (!optionalMetaElement.isPresent()) {
        return Optional_1.Optional.empty();
    }
    const metaElement = optionalMetaElement.get();
    let content = metaElement.getAttribute("content");
    if (Preconditions_1.isPresent(content)) {
        return Optional_1.Optional.of(content);
    }
    content = metaElement.getAttribute("value");
    return Optional_1.Optional.of(content);
}
function meta(doc, name) {
    let match = doc.querySelector(`meta[name=${name}]`);
    if (!match) {
        match = doc.querySelector(`meta[property=${name}]`);
    }
    if (!match) {
        match = doc.querySelector(`meta[itemprop=${name}]`);
    }
    return Optional_1.Optional.of(match);
}
//# sourceMappingURL=data:application/json;base64,