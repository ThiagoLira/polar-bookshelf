"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PagemarkRects_1 = require("../../../metadata/PagemarkRects");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const Rects_1 = require("../../../Rects");
const PlacedPagemark_1 = require("./PlacedPagemark");
const Line_1 = require("../../../util/Line");
class PlacedPagemarkCalculator {
    calculate(parentRect, pagemark) {
        let pagemarkRect = pagemark.rect;
        if (!pagemarkRect) {
            pagemarkRect = PagemarkRects_1.PagemarkRects.createDefault(pagemark);
        }
        Preconditions_1.Preconditions.assertNotNull(parentRect, "parentRect");
        Preconditions_1.Preconditions.assertNotNull(pagemarkRect, "pagemarkRect");
        let fractionalRect = pagemarkRect.toFractionalRect();
        let resultX = this._scaleAxis(parentRect, fractionalRect, "x");
        let resultY = this._scaleAxis(parentRect, fractionalRect, "y");
        let rect = Rects_1.Rects.createFromLines(resultX, resultY);
        return new PlacedPagemark_1.PlacedPagemark({ rect });
    }
    _scaleAxis(parentRect, fractionalRect, axis) {
        return this._scaleLine(parentRect.toLine(axis), fractionalRect.toLine(axis));
    }
    _scaleLine(parentLine, fractionalLine) {
        let start = parentLine.start * fractionalLine.start;
        let end = parentLine.end * fractionalLine.end;
        return new Line_1.Line(start, end, parentLine.axis);
    }
}
exports.PlacedPagemarkCalculator = PlacedPagemarkCalculator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGxhY2VkUGFnZW1hcmtDYWxjdWxhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUGxhY2VkUGFnZW1hcmtDYWxjdWxhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsbUVBQThEO0FBQzlELGtFQUE2RDtBQUM3RCwwQ0FBcUM7QUFDckMscURBQWdEO0FBQ2hELDZDQUF3QztBQUV4QyxNQUFhLHdCQUF3QjtJQU1qQyxTQUFTLENBQUMsVUFBZ0IsRUFBRSxRQUFrQjtRQUUxQyxJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBRWpDLElBQUcsQ0FBRSxZQUFZLEVBQUU7WUFDZixZQUFZLEdBQUcsNkJBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDeEQ7UUFFRCw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDdEQsNkJBQWEsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRTFELElBQUksY0FBYyxHQUFHLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRXJELElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFL0QsSUFBSSxJQUFJLEdBQUcsYUFBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFbkQsT0FBTyxJQUFJLCtCQUFjLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBRXRDLENBQUM7SUFLRCxVQUFVLENBQUMsVUFBZ0IsRUFBRSxjQUFvQixFQUFFLElBQVU7UUFDekQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQ2hGLENBQUM7SUFLRCxVQUFVLENBQUMsVUFBZ0IsRUFBRSxjQUFvQjtRQUM3QyxJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUM7UUFDcEQsSUFBSSxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUcsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDO1FBQzlDLE9BQU8sSUFBSSxXQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakQsQ0FBQztDQUVKO0FBNUNELDREQTRDQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHtBeGlzLCBSZWN0fSBmcm9tICcuLi8uLi8uLi9SZWN0JztcbmltcG9ydCB7UGFnZW1hcmt9IGZyb20gJy4uLy4uLy4uL21ldGFkYXRhL1BhZ2VtYXJrJztcbmltcG9ydCB7UGFnZW1hcmtSZWN0c30gZnJvbSAnLi4vLi4vLi4vbWV0YWRhdGEvUGFnZW1hcmtSZWN0cyc7XG5pbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvUHJlY29uZGl0aW9ucyc7XG5pbXBvcnQge1JlY3RzfSBmcm9tICcuLi8uLi8uLi9SZWN0cyc7XG5pbXBvcnQge1BsYWNlZFBhZ2VtYXJrfSBmcm9tICcuL1BsYWNlZFBhZ2VtYXJrJztcbmltcG9ydCB7TGluZX0gZnJvbSAnLi4vLi4vLi4vdXRpbC9MaW5lJztcblxuZXhwb3J0IGNsYXNzIFBsYWNlZFBhZ2VtYXJrQ2FsY3VsYXRvciB7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIGEgUmVjdCBmb3IgcmVuZGVyaW5nIHRoZSBwYWdlbWFya1JlY3Qgb250byB0aGUgcGFyZW50UmVjdC5cbiAgICAgKlxuICAgICAqL1xuICAgIGNhbGN1bGF0ZShwYXJlbnRSZWN0OiBSZWN0LCBwYWdlbWFyazogUGFnZW1hcmspIHtcblxuICAgICAgICBsZXQgcGFnZW1hcmtSZWN0ID0gcGFnZW1hcmsucmVjdDtcblxuICAgICAgICBpZighIHBhZ2VtYXJrUmVjdCkge1xuICAgICAgICAgICAgcGFnZW1hcmtSZWN0ID0gUGFnZW1hcmtSZWN0cy5jcmVhdGVEZWZhdWx0KHBhZ2VtYXJrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbChwYXJlbnRSZWN0LCBcInBhcmVudFJlY3RcIik7XG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0Tm90TnVsbChwYWdlbWFya1JlY3QsIFwicGFnZW1hcmtSZWN0XCIpO1xuXG4gICAgICAgIGxldCBmcmFjdGlvbmFsUmVjdCA9IHBhZ2VtYXJrUmVjdC50b0ZyYWN0aW9uYWxSZWN0KCk7XG5cbiAgICAgICAgbGV0IHJlc3VsdFggPSB0aGlzLl9zY2FsZUF4aXMocGFyZW50UmVjdCwgZnJhY3Rpb25hbFJlY3QsIFwieFwiKTtcbiAgICAgICAgbGV0IHJlc3VsdFkgPSB0aGlzLl9zY2FsZUF4aXMocGFyZW50UmVjdCwgZnJhY3Rpb25hbFJlY3QsIFwieVwiKTtcblxuICAgICAgICBsZXQgcmVjdCA9IFJlY3RzLmNyZWF0ZUZyb21MaW5lcyhyZXN1bHRYLCByZXN1bHRZKTtcblxuICAgICAgICByZXR1cm4gbmV3IFBsYWNlZFBhZ2VtYXJrKHtyZWN0fSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIF9zY2FsZUF4aXMocGFyZW50UmVjdDogUmVjdCwgZnJhY3Rpb25hbFJlY3Q6IFJlY3QsIGF4aXM6IEF4aXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NjYWxlTGluZShwYXJlbnRSZWN0LnRvTGluZShheGlzKSwgZnJhY3Rpb25hbFJlY3QudG9MaW5lKGF4aXMpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgX3NjYWxlTGluZShwYXJlbnRMaW5lOiBMaW5lLCBmcmFjdGlvbmFsTGluZTogTGluZSkge1xuICAgICAgICBsZXQgc3RhcnQgPSBwYXJlbnRMaW5lLnN0YXJ0ICogZnJhY3Rpb25hbExpbmUuc3RhcnQ7XG4gICAgICAgIGxldCBlbmQgPSBwYXJlbnRMaW5lLmVuZCAqIGZyYWN0aW9uYWxMaW5lLmVuZDtcbiAgICAgICAgcmV0dXJuIG5ldyBMaW5lKHN0YXJ0LCBlbmQsIHBhcmVudExpbmUuYXhpcyk7XG4gICAgfVxuXG59XG4iXX0=