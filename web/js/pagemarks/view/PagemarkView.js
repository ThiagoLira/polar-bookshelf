"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ComponentManager_1 = require("../../components/ComponentManager");
const DefaultContainerProvider_1 = require("../../components/containers/providers/impl/DefaultContainerProvider");
const PagemarkModel_1 = require("../model/PagemarkModel");
const ThumbnailContainerProvider_1 = require("../../components/containers/providers/impl/ThumbnailContainerProvider");
const ProgressView_1 = require("./ProgressView");
const PrimaryPagemarkComponent_1 = require("./components/PrimaryPagemarkComponent");
const ThumbnailPagemarkComponent_1 = require("./components/ThumbnailPagemarkComponent");
exports.PAGEMARK_VIEW_ENABLED = true;
class PagemarkView {
    constructor(model) {
        this.model = model;
        this.primaryPagemarkComponentManager
            = new ComponentManager_1.ComponentManager("pagemark", model, new DefaultContainerProvider_1.DefaultContainerProvider(), () => new PrimaryPagemarkComponent_1.PrimaryPagemarkComponent(), () => new PagemarkModel_1.PagemarkModel());
        this.thumbnailPagemarkComponentManager
            = new ComponentManager_1.ComponentManager("thumbnail", model, new ThumbnailContainerProvider_1.ThumbnailContainerProvider(), () => new ThumbnailPagemarkComponent_1.ThumbnailPagemarkComponent(), () => new PagemarkModel_1.PagemarkModel());
        this.progressView = new ProgressView_1.ProgressView(this.model);
    }
    start() {
        if (this.primaryPagemarkComponentManager) {
            this.primaryPagemarkComponentManager.start();
        }
        if (this.thumbnailPagemarkComponentManager) {
            this.thumbnailPagemarkComponentManager.start();
        }
        this.progressView.start();
    }
}
exports.PagemarkView = PagemarkView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnZW1hcmtWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUGFnZW1hcmtWaWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsd0VBQW1FO0FBQ25FLGtIQUE2RztBQUM3RywwREFBcUQ7QUFDckQsc0hBQWlIO0FBQ2pILGlEQUE0QztBQUM1QyxvRkFBK0U7QUFDL0Usd0ZBQW1GO0FBRXRFLFFBQUEscUJBQXFCLEdBQUcsSUFBSSxDQUFDO0FBRTFDLE1BQWEsWUFBWTtJQVVyQixZQUFZLEtBQVk7UUFFcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsSUFBSSxDQUFDLCtCQUErQjtjQUM5QixJQUFJLG1DQUFnQixDQUFDLFVBQVUsRUFDVixLQUFLLEVBQ0wsSUFBSSxtREFBd0IsRUFBRSxFQUM5QixHQUFHLEVBQUUsQ0FBQyxJQUFJLG1EQUF3QixFQUFFLEVBQ3BDLEdBQUcsRUFBRSxDQUFDLElBQUksNkJBQWEsRUFBRSxDQUFDLENBQUM7UUFFdEQsSUFBSSxDQUFDLGlDQUFpQztjQUNoQyxJQUFJLG1DQUFnQixDQUFDLFdBQVcsRUFDWCxLQUFLLEVBQ0wsSUFBSSx1REFBMEIsRUFBRSxFQUNoQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLHVEQUEwQixFQUFFLEVBQ3RDLEdBQUcsRUFBRSxDQUFDLElBQUksNkJBQWEsRUFBRSxDQUFDLENBQUM7UUFHdEQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLDJCQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJELENBQUM7SUFFTSxLQUFLO1FBRVIsSUFBSSxJQUFJLENBQUMsK0JBQStCLEVBQUU7WUFDdEMsSUFBSSxDQUFDLCtCQUErQixDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hEO1FBRUQsSUFBSSxJQUFJLENBQUMsaUNBQWlDLEVBQUU7WUFDeEMsSUFBSSxDQUFDLGlDQUFpQyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2xEO1FBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUU5QixDQUFDO0NBRUo7QUEvQ0Qsb0NBK0NDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge01vZGVsfSBmcm9tICcuLi8uLi9tb2RlbC9Nb2RlbCc7XG5pbXBvcnQge0NvbXBvbmVudE1hbmFnZXJ9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQ29tcG9uZW50TWFuYWdlcic7XG5pbXBvcnQge0RlZmF1bHRDb250YWluZXJQcm92aWRlcn0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9jb250YWluZXJzL3Byb3ZpZGVycy9pbXBsL0RlZmF1bHRDb250YWluZXJQcm92aWRlcic7XG5pbXBvcnQge1BhZ2VtYXJrTW9kZWx9IGZyb20gJy4uL21vZGVsL1BhZ2VtYXJrTW9kZWwnO1xuaW1wb3J0IHtUaHVtYm5haWxDb250YWluZXJQcm92aWRlcn0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9jb250YWluZXJzL3Byb3ZpZGVycy9pbXBsL1RodW1ibmFpbENvbnRhaW5lclByb3ZpZGVyJztcbmltcG9ydCB7UHJvZ3Jlc3NWaWV3fSBmcm9tICcuL1Byb2dyZXNzVmlldyc7XG5pbXBvcnQge1ByaW1hcnlQYWdlbWFya0NvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnRzL1ByaW1hcnlQYWdlbWFya0NvbXBvbmVudCc7XG5pbXBvcnQge1RodW1ibmFpbFBhZ2VtYXJrQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudHMvVGh1bWJuYWlsUGFnZW1hcmtDb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgUEFHRU1BUktfVklFV19FTkFCTEVEID0gdHJ1ZTtcblxuZXhwb3J0IGNsYXNzIFBhZ2VtYXJrVmlldyB7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IG1vZGVsOiBNb2RlbDtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJpbWFyeVBhZ2VtYXJrQ29tcG9uZW50TWFuYWdlcjogQ29tcG9uZW50TWFuYWdlcjtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgdGh1bWJuYWlsUGFnZW1hcmtDb21wb25lbnRNYW5hZ2VyOiBDb21wb25lbnRNYW5hZ2VyO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9ncmVzc1ZpZXc6IFByb2dyZXNzVmlldztcblxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBNb2RlbCkge1xuXG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcblxuICAgICAgICB0aGlzLnByaW1hcnlQYWdlbWFya0NvbXBvbmVudE1hbmFnZXJcbiAgICAgICAgICAgID0gbmV3IENvbXBvbmVudE1hbmFnZXIoXCJwYWdlbWFya1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERlZmF1bHRDb250YWluZXJQcm92aWRlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKSA9PiBuZXcgUHJpbWFyeVBhZ2VtYXJrQ29tcG9uZW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IG5ldyBQYWdlbWFya01vZGVsKCkpO1xuXG4gICAgICAgIHRoaXMudGh1bWJuYWlsUGFnZW1hcmtDb21wb25lbnRNYW5hZ2VyXG4gICAgICAgICAgICA9IG5ldyBDb21wb25lbnRNYW5hZ2VyKFwidGh1bWJuYWlsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGh1bWJuYWlsQ29udGFpbmVyUHJvdmlkZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4gbmV3IFRodW1ibmFpbFBhZ2VtYXJrQ29tcG9uZW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+IG5ldyBQYWdlbWFya01vZGVsKCkpO1xuXG5cbiAgICAgICAgdGhpcy5wcm9ncmVzc1ZpZXcgPSBuZXcgUHJvZ3Jlc3NWaWV3KHRoaXMubW9kZWwpO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXJ0KCkge1xuXG4gICAgICAgIGlmICh0aGlzLnByaW1hcnlQYWdlbWFya0NvbXBvbmVudE1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRoaXMucHJpbWFyeVBhZ2VtYXJrQ29tcG9uZW50TWFuYWdlci5zdGFydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudGh1bWJuYWlsUGFnZW1hcmtDb21wb25lbnRNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLnRodW1ibmFpbFBhZ2VtYXJrQ29tcG9uZW50TWFuYWdlci5zdGFydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm9ncmVzc1ZpZXcuc3RhcnQoKTtcblxuICAgIH1cblxufVxuIl19