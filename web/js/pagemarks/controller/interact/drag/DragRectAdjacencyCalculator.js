"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Rects_1 = require("../../../../Rects");
const LineAdjustment_1 = require("./LineAdjustment");
const Line_1 = require("../../../../util/Line");
const Adjacency_1 = require("./Adjacency");
const Preconditions_1 = require("polar-shared/src/Preconditions");
class DragRectAdjacencyCalculator {
    static calculate(primaryRect, secondaryRect, restrictionRect) {
        Preconditions_1.Preconditions.assertPresent(primaryRect, "primaryRect");
        Preconditions_1.Preconditions.assertPresent(secondaryRect, "secondaryRect");
        const result = new Adjacency_1.Adjacency();
        if (!restrictionRect) {
            restrictionRect = Rects_1.Rects.createFromBasicRect({
                left: -1000000,
                top: -1000000,
                bottom: 1000000,
                right: 1000000
            });
        }
        result.primaryRect = Rects_1.Rects.validate(primaryRect);
        result.secondaryRect = Rects_1.Rects.validate(secondaryRect);
        const secondaryBox = {
            horizontal: new Line_1.Line(secondaryRect.left, secondaryRect.right),
            vertical: new Line_1.Line(secondaryRect.top, secondaryRect.bottom)
        };
        const primaryBox = {
            horizontal: new Line_1.Line(primaryRect.left, primaryRect.right),
            vertical: new Line_1.Line(primaryRect.top, primaryRect.bottom)
        };
        const restrictionBox = {
            horizontal: new Line_1.Line(restrictionRect.left, restrictionRect.right),
            vertical: new Line_1.Line(restrictionRect.top, restrictionRect.bottom)
        };
        Preconditions_1.Preconditions.assertPresent(primaryBox, "primaryBox");
        Preconditions_1.Preconditions.assertPresent(secondaryBox, "secondaryBox");
        Preconditions_1.Preconditions.assertPresent(restrictionBox, "restrictionBox");
        result.adjustments.horizontal
            = DragRectAdjacencyCalculator.adjust(primaryBox.horizontal, secondaryBox.horizontal, restrictionBox.horizontal, "x");
        result.adjustments.vertical
            = DragRectAdjacencyCalculator.adjust(primaryBox.vertical, secondaryBox.vertical, restrictionBox.vertical, "y");
        let successfulAdjustments = [result.adjustments.horizontal, result.adjustments.vertical];
        successfulAdjustments = successfulAdjustments.filter(current => current.overlapped === true);
        successfulAdjustments = successfulAdjustments.sort((adj0, adj1) => adj0.delta - adj1.delta);
        if (successfulAdjustments.length >= 1) {
            result.adjustment = successfulAdjustments[0];
            result.adjustedRect = result.adjustment.adjustRect(primaryRect);
        }
        return result;
    }
    static adjust(primaryLine, secondaryLine, restrictionLine, axis) {
        const none = new LineAdjustment_1.LineAdjustment({
            axis,
            overlapped: false,
            start: primaryLine.start,
            snapped: null
        });
        let result = none;
        if (secondaryLine.overlaps(primaryLine) || primaryLine.overlaps(secondaryLine)) {
            let results = [];
            results.push(LineAdjustment_1.LineAdjustment.create({
                axis,
                start: secondaryLine.end,
                previous: primaryLine.start,
                snapped: "AFTER"
            }));
            results.push(LineAdjustment_1.LineAdjustment.create({
                axis,
                start: secondaryLine.start - primaryLine.width,
                previous: primaryLine.start,
                snapped: "BEFORE"
            }));
            results = results.filter(result => {
                if (result.start < restrictionLine.start) {
                    return false;
                }
                if ((result.start + primaryLine.width) > restrictionLine.end) {
                    return false;
                }
                return true;
            });
            results = results.sort((r0, r1) => r0.delta - r1.delta);
            if (results.length > 0) {
                result = results[0];
            }
        }
        return result;
    }
}
exports.DragRectAdjacencyCalculator = DragRectAdjacencyCalculator;
//# sourceMappingURL=data:application/json;base64,