"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DocFormatFactory_1 = require("../docformat/DocFormatFactory");
const Logger_1 = require("polar-shared/src/logger/Logger");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const MutationState_1 = require("../proxies/MutationState");
const DocMetaListeners_1 = require("../datastore/sharing/db/DocMetaListeners");
const log = Logger_1.Logger.create();
class ComponentManager {
    constructor(type, model, containerProvider, createComponent, createDocMetaModel) {
        this.type = type;
        this.model = model;
        this.containers = {};
        this.components = {};
        this.containerProvider = containerProvider;
        this.docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
        this.createComponent = createComponent;
        this.createDocMetaModel = createDocMetaModel;
    }
    start() {
        this.model.registerListenerForDocumentLoaded((documentLoadedEvent) => this.onDocumentLoaded(documentLoadedEvent));
    }
    onDocumentLoaded(documentLoadedEvent) {
        log.debug("onDocumentLoaded: ", documentLoadedEvent.fingerprint);
        this.containers = this.containerProvider.getContainers();
        log.debug("Working with containers: ", this.containers);
        const { docMeta } = documentLoadedEvent;
        this.registerListenerForDocMeta(docMeta);
        this.registerListenerForSecondaryDocMetas(docMeta.docInfo.fingerprint);
    }
    registerListenerForDocMeta(docMeta) {
        const docMetaModel = this.createDocMetaModel();
        docMetaModel.registerListener(docMeta, annotationEvent => this.onAnnotationEvent(annotationEvent));
    }
    registerListenerForSecondaryDocMetas(fingerprint) {
        const docMetaHandler = (docMeta) => {
            this.registerListenerForDocMeta(docMeta);
        };
        const errHandler = (err) => {
            log.error("Failed to handle docMeta group group: ", err);
        };
        DocMetaListeners_1.DocMetaListeners.register(fingerprint, docMetaHandler, errHandler)
            .catch(err => errHandler(err));
    }
    onAnnotationEvent(annotationEvent) {
        log.debug("onComponentEvent: ", annotationEvent);
        const containerID = annotationEvent.pageMeta.pageInfo.num;
        Preconditions_1.Preconditions.assertNumber(containerID, "containerID");
        if (annotationEvent.mutationState === MutationState_1.MutationState.PRESENT) {
            log.debug("PRESENT");
            const container = this.containers[containerID];
            if (!container) {
                throw new Error("No container for containerID: " + containerID);
            }
            annotationEvent.container = container;
            const component = this.createComponent();
            component.init(annotationEvent);
            let initialized = true;
            const callback = (containerLifecycleState) => {
                if (containerLifecycleState.visible) {
                    if (!initialized) {
                        component.init(annotationEvent);
                        initialized = true;
                    }
                    setTimeout(() => {
                        component.render();
                    }, 1);
                }
                else {
                    component.destroy();
                    initialized = false;
                }
            };
            const containerLifecycleListener = this.containerProvider.createContainerLifecycleListener(container);
            containerLifecycleListener.register(callback);
            const containerState = containerLifecycleListener.getState();
            if (containerState && containerState.visible) {
                callback(containerState);
            }
            this.components[annotationEvent.id] = new ComponentEntry(containerLifecycleListener, component);
        }
        else if (annotationEvent.mutationState === MutationState_1.MutationState.ABSENT) {
            log.debug("ABSENT");
            const componentEntry = this.components[annotationEvent.id];
            if (componentEntry) {
                componentEntry.containerLifecycleListener.unregister();
                componentEntry.component.destroy();
                log.debug("Destroyed component: " + annotationEvent.id);
                delete this.components[annotationEvent.id];
            }
            else {
                log.warn("No component entry for: " + annotationEvent.id);
            }
        }
    }
}
exports.ComponentManager = ComponentManager;
class ComponentEntry {
    constructor(containerLifecycleListener, component) {
        this.containerLifecycleListener = containerLifecycleListener;
        this.component = component;
    }
}
exports.ComponentEntry = ComponentEntry;
//# sourceMappingURL=data:application/json;base64,