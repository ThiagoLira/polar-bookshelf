"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DocAnnotations_1 = require("./DocAnnotations");
const AreaHighlightModel_1 = require("../highlights/area/model/AreaHighlightModel");
const TextHighlightModel_1 = require("../highlights/text/model/TextHighlightModel");
const CommentModel_1 = require("./CommentModel");
const FlashcardModel_1 = require("./FlashcardModel");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const MutationType_1 = require("../proxies/MutationType");
const Logger_1 = require("polar-shared/src/logger/Logger");
const log = Logger_1.Logger.create();
class DocAnnotationIndexManager {
    constructor(docFileResolver, docAnnotationIndex, onUpdated) {
        this.docFileResolver = docFileResolver;
        this.docAnnotationIndex = docAnnotationIndex;
        this.onUpdated = onUpdated;
        this.registering = false;
    }
    registerListenerForDocMeta(docMeta, opts = {}) {
        const { docFileResolver } = this;
        this.registering = true;
        new AreaHighlightModel_1.AreaHighlightModel().registerListener(docMeta, annotationEvent => {
            const handleConversion = () => {
                const converter = (annotationValue) => {
                    return DocAnnotations_1.DocAnnotations.createFromAreaHighlight(docFileResolver, docMeta, annotationValue, annotationEvent.pageMeta);
                };
                const docAnnotation = this.convertAnnotation(annotationEvent.value, converter);
                this.handleAnnotationEvent(annotationEvent.id, annotationEvent.traceEvent.mutationType, docAnnotation);
            };
            handleConversion();
        }, opts);
        new TextHighlightModel_1.TextHighlightModel().registerListener(docMeta, annotationEvent => {
            const docAnnotation = this.convertAnnotation(annotationEvent.value, annotationValue => DocAnnotations_1.DocAnnotations.createFromTextHighlight(docMeta, annotationValue, annotationEvent.pageMeta));
            this.handleAnnotationEvent(annotationEvent.id, annotationEvent.traceEvent.mutationType, docAnnotation);
        }, opts);
        new CommentModel_1.CommentModel().registerListener(docMeta, annotationEvent => {
            const comment = annotationEvent.value || annotationEvent.previousValue;
            const childDocAnnotation = DocAnnotations_1.DocAnnotations.createFromComment(docMeta, comment, annotationEvent.pageMeta);
            this.handleChildAnnotationEvent(annotationEvent.id, annotationEvent.traceEvent.mutationType, childDocAnnotation);
        }, opts);
        new FlashcardModel_1.FlashcardModel().registerListener(docMeta, annotationEvent => {
            const flashcard = annotationEvent.value || annotationEvent.previousValue;
            const childDocAnnotation = DocAnnotations_1.DocAnnotations.createFromFlashcard(docMeta, flashcard, annotationEvent.pageMeta);
            this.handleChildAnnotationEvent(annotationEvent.id, annotationEvent.traceEvent.mutationType, childDocAnnotation);
        }, opts);
        this.registering = false;
        this.fireUpdated();
    }
    convertAnnotation(value, converter) {
        if (!Preconditions_1.isPresent(value)) {
            return undefined;
        }
        return converter(value);
    }
    handleChildAnnotationEvent(id, mutationType, childDocAnnotation) {
        if (!childDocAnnotation.ref) {
            log.warn("Annotation hidden from sidebar: ", childDocAnnotation);
            return;
        }
        if (mutationType === MutationType_1.MutationType.DELETE) {
            this.deleteDocAnnotation(id);
        }
        else {
            this.addDocAnnotation(childDocAnnotation);
        }
    }
    handleAnnotationEvent(id, mutationType, docAnnotation) {
        if (mutationType === MutationType_1.MutationType.DELETE) {
            this.deleteDocAnnotation(id);
        }
        else {
            this.addDocAnnotation(docAnnotation);
        }
    }
    deleteDocAnnotation(id) {
        this.docAnnotationIndex.delete(id);
        this.fireUpdated();
    }
    addDocAnnotation(docAnnotation) {
        this.docAnnotationIndex.put(docAnnotation);
        this.fireUpdated();
    }
    fireUpdated() {
        const annotations = this.docAnnotationIndex.getDocAnnotationsSorted();
        if (!this.registering) {
            this.onUpdated(annotations);
        }
    }
}
exports.DocAnnotationIndexManager = DocAnnotationIndexManager;
//# sourceMappingURL=data:application/json;base64,