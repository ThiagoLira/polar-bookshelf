"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const AnnotationType_1 = require("polar-shared/src/metadata/AnnotationType");
const Optional_1 = require("polar-shared/src/util/ts/Optional");
const Flashcards_1 = require("../metadata/Flashcards");
const ObjectIDs_1 = require("../util/ObjectIDs");
const Images_1 = require("../metadata/Images");
const Providers_1 = require("polar-shared/src/util/Providers");
const AnnotationTexts_1 = require("polar-shared/src/metadata/AnnotationTexts");
const HighlightColor_1 = require("polar-shared/src/metadata/HighlightColor");
class DocAnnotations {
    static isImmutable(author) {
        if (author && author.guest) {
            return true;
        }
        return false;
    }
    static getAnnotationsForPage(docFileResolver, docAnnotationIndex, docMeta) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            const pageMetas = Object.values(docMeta.pageMetas);
            for (const pageMeta of pageMetas) {
                const areaHighlights = yield this.getAreaHighlights(docFileResolver, docMeta, pageMeta);
                const textHighlights = this.getTextHighlights(docMeta, pageMeta);
                result.push(...textHighlights);
                result.push(...areaHighlights);
            }
            return result;
        });
    }
    static createFromFlashcard(docMeta, flashcard, pageMeta) {
        const iTextConverter = ITextConverters.create(AnnotationType_1.AnnotationType.FLASHCARD, flashcard);
        const init = this.createInit(docMeta);
        return Object.assign(Object.assign(Object.assign(Object.assign({}, init), { oid: ObjectIDs_1.ObjectIDs.create(), id: flashcard.id, guid: flashcard.guid, fingerprint: docMeta.docInfo.fingerprint, docInfo: docMeta.docInfo }), iTextConverter), { fields: Flashcards_1.Flashcards.convertFieldsToMap(flashcard.fields), pageNum: pageMeta.pageInfo.num, position: {
                x: 0,
                y: 0
            }, created: flashcard.created, docMeta,
            pageMeta, ref: flashcard.ref, original: flashcard, author: flashcard.author, immutable: this.isImmutable(flashcard.author), color: undefined, img: undefined });
    }
    static createFromComment(docMeta, comment, pageMeta) {
        const iTextConverter = ITextConverters.create(AnnotationType_1.AnnotationType.COMMENT, comment);
        const init = this.createInit(docMeta);
        return Object.assign(Object.assign(Object.assign(Object.assign({}, init), { oid: ObjectIDs_1.ObjectIDs.create(), id: comment.id, guid: comment.guid, fingerprint: docMeta.docInfo.fingerprint, docInfo: docMeta.docInfo }), iTextConverter), { pageNum: pageMeta.pageInfo.num, position: {
                x: 0,
                y: 0
            }, created: comment.created, docMeta,
            pageMeta, ref: comment.ref, original: comment, author: comment.author, immutable: this.isImmutable(comment.author), color: undefined, img: undefined });
    }
    static createFromAreaHighlight(docFileResolver, docMeta, areaHighlight, pageMeta) {
        const createPosition = () => {
            if (areaHighlight.position) {
                return Object.assign({}, areaHighlight.position);
            }
            return {
                x: this.firstRect(areaHighlight).map(current => current.left).getOrElse(0),
                y: this.firstRect(areaHighlight).map(current => current.top).getOrElse(0),
            };
        };
        const img = Providers_1.Providers.memoize(() => Images_1.Images.toImg(docFileResolver, areaHighlight.image));
        const position = createPosition();
        const init = this.createInit(docMeta);
        return Object.assign(Object.assign({}, init), { oid: ObjectIDs_1.ObjectIDs.create(), id: areaHighlight.id, guid: areaHighlight.guid, fingerprint: docMeta.docInfo.fingerprint, docInfo: docMeta.docInfo, annotationType: AnnotationType_1.AnnotationType.AREA_HIGHLIGHT, get img() {
                return img();
            }, text: undefined, html: undefined, pageNum: pageMeta.pageInfo.num, position, color: HighlightColor_1.HighlightColors.withDefaultColor(areaHighlight.color), created: areaHighlight.created, docMeta,
            pageMeta, original: areaHighlight, author: areaHighlight.author, immutable: this.isImmutable(areaHighlight.author) });
    }
    static createFromTextHighlight(docMeta, textHighlight, pageMeta) {
        const iTextConverter = ITextConverters.create(AnnotationType_1.AnnotationType.TEXT_HIGHLIGHT, textHighlight);
        const init = this.createInit(docMeta);
        return Object.assign(Object.assign(Object.assign(Object.assign({}, init), { oid: ObjectIDs_1.ObjectIDs.create(), id: textHighlight.id, guid: textHighlight.guid, fingerprint: docMeta.docInfo.fingerprint, docInfo: docMeta.docInfo }), iTextConverter), { pageNum: pageMeta.pageInfo.num, position: {
                x: this.firstRect(textHighlight).map(current => current.left).getOrElse(0),
                y: this.firstRect(textHighlight).map(current => current.top).getOrElse(0),
            }, color: HighlightColor_1.HighlightColors.withDefaultColor(textHighlight.color), created: textHighlight.created, docMeta,
            pageMeta, original: textHighlight, author: textHighlight.author, immutable: this.isImmutable(textHighlight.author), img: undefined });
    }
    static getTextHighlights(docMeta, pageMeta) {
        return Object.values(pageMeta.textHighlights).map(textHighlight => {
            return this.createFromTextHighlight(docMeta, textHighlight, pageMeta);
        });
    }
    static getAreaHighlights(docFileResolver, docMeta, pageMeta) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            const areaHighlights = Object.values(pageMeta.areaHighlights);
            for (const areaHighlight of areaHighlights) {
                const docAnnotation = yield this.createFromAreaHighlight(docFileResolver, docMeta, areaHighlight, pageMeta);
                result.push(docAnnotation);
            }
            return result;
        });
    }
    static createInit(docMeta) {
        return {
            tags: docMeta.docInfo.tags || {},
        };
    }
    static firstRect(highlight) {
        return Optional_1.Optional.of(highlight)
            .map(current => current.rects)
            .map(current => current[0]);
    }
}
exports.DocAnnotations = DocAnnotations;
class ITextConverters {
    static create(annotationType, annotation) {
        const toText = Providers_1.Providers.memoize(() => AnnotationTexts_1.AnnotationTexts.toText(annotationType, annotation));
        const toHTML = Providers_1.Providers.memoize(() => AnnotationTexts_1.AnnotationTexts.toHTML(annotationType, annotation));
        return {
            annotationType,
            get text() {
                return toText();
            },
            get html() {
                return toHTML();
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,