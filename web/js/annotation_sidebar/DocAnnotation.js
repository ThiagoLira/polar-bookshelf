"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class DefaultDocAnnotation {
    constructor(index, obj) {
        this.index = index;
        this.obj = obj;
        this.getIndex = () => index;
        this.oid = obj.oid;
        this.id = obj.id;
        this.guid = obj.guid;
        this.fingerprint = obj.fingerprint;
        this.docInfo = obj.docInfo;
        this.annotationType = obj.annotationType;
        this.text = obj.text;
        this.html = obj.html;
        this.fields = obj.fields;
        this.pageNum = obj.pageNum;
        this.position = obj.position;
        this.created = obj.created;
        this.ref = obj.ref;
        this.img = obj.img;
        this.color = obj.color;
        this.docMeta = obj.docMeta;
        this.pageMeta = obj.pageMeta;
        this.original = obj.original;
        this.author = obj.author;
        this.immutable = obj.immutable;
        this.tags = obj.tags;
    }
    getChildren() {
        return this.getIndex()._getChildren(this.id);
    }
    setChildren(children) {
        this.getIndex()._setChildren(this.id, children);
    }
    addChild(docAnnotation) {
        this.getIndex()._addChild(this.id, docAnnotation);
    }
    removeChild(id) {
        this.getIndex()._removeChild(this.id, id);
    }
}
exports.DefaultDocAnnotation = DefaultDocAnnotation;
//# sourceMappingURL=data:application/json;base64,