"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const AnnotationType_1 = require("polar-shared/src/metadata/AnnotationType");
const ViewOrEditComment_1 = require("./comments/ViewOrEditComment");
const CommentActions_1 = require("./comments/CommentActions");
const ViewOrEditFlashcard_1 = require("./flashcards/ViewOrEditFlashcard");
const FlashcardActions_1 = require("./flashcards/FlashcardActions");
class ChildAnnotationSection extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.onComment = this.onComment.bind(this);
        this.onFlashcard = this.onFlashcard.bind(this);
        this.state = {};
    }
    render() {
        const docAnnotations = [...this.props.docAnnotations];
        docAnnotations.sort((a, b) => a.created.localeCompare(b.created));
        const result = [];
        docAnnotations.map(child => {
            if (child.annotationType === AnnotationType_1.AnnotationType.COMMENT) {
                result.push(React.createElement(ViewOrEditComment_1.ViewOrEditComment, { key: child.id, doc: this.props.doc, id: child.id, onComment: (html, existingComment) => this.onComment(html, existingComment), comment: child }));
            }
            else {
                result.push(React.createElement(ViewOrEditFlashcard_1.ViewOrEditFlashcard, { key: child.id, doc: this.props.doc, id: child.id, onFlashcard: (flashcardType, fields, existingFlashcard) => this.onFlashcard(flashcardType, fields, existingFlashcard), flashcard: child }));
            }
        });
        return result;
    }
    onComment(html, existingComment) {
        CommentActions_1.CommentActions.update(this.props.doc.docMeta, this.props.parent, html, existingComment);
    }
    onFlashcard(flashcardType, fields, existingFlashcard) {
        FlashcardActions_1.FlashcardActions.update(this.props.doc.docMeta, this.props.parent, flashcardType, fields, existingFlashcard);
    }
}
exports.ChildAnnotationSection = ChildAnnotationSection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hpbGRBbm5vdGF0aW9uU2VjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNoaWxkQW5ub3RhdGlvblNlY3Rpb24udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDZDQUErQjtBQUUvQiw2RUFBd0U7QUFDeEUsb0VBQStEO0FBQy9ELDhEQUF5RDtBQUN6RCwwRUFBcUU7QUFJckUsb0VBQStEO0FBTy9ELE1BQWEsc0JBQXVCLFNBQVEsS0FBSyxDQUFDLFNBQXlCO0lBRXZFLFlBQVksS0FBYSxFQUFFLE9BQVk7UUFDbkMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV0QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7SUFFcEIsQ0FBQztJQUVNLE1BQU07UUFFVCxNQUFNLGNBQWMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV0RCxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFbEUsTUFBTSxNQUFNLEdBQVEsRUFBRSxDQUFDO1FBRXZCLGNBQWMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFFdkIsSUFBSSxLQUFLLENBQUMsY0FBYyxLQUFLLCtCQUFjLENBQUMsT0FBTyxFQUFFO2dCQUVqRCxNQUFNLENBQUMsSUFBSSxDQUFFLG9CQUFDLHFDQUFpQixJQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUNiLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFDbkIsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQ1osU0FBUyxFQUFFLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLEVBQzNFLE9BQU8sRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDO2FBRXREO2lCQUFNO2dCQUNILE1BQU0sQ0FBQyxJQUFJLENBQUUsb0JBQUMseUNBQW1CLElBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQ2IsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUNuQixFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFDWixXQUFXLEVBQUUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsaUJBQWlCLENBQUMsRUFDckgsU0FBUyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUM7YUFDMUQ7UUFHTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7SUFFTyxTQUFTLENBQUMsSUFBWSxFQUFFLGVBQXdCO1FBQ3BELCtCQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDNUYsQ0FBQztJQUVPLFdBQVcsQ0FBQyxhQUE0QixFQUFFLE1BQTBDLEVBQUUsaUJBQTZCO1FBQ3ZILG1DQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2pILENBQUM7Q0FFSjtBQXJERCx3REFxREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0RvY0Fubm90YXRpb259IGZyb20gJy4uL0RvY0Fubm90YXRpb24nO1xuaW1wb3J0IHtBbm5vdGF0aW9uVHlwZX0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9Bbm5vdGF0aW9uVHlwZSc7XG5pbXBvcnQge1ZpZXdPckVkaXRDb21tZW50fSBmcm9tIFwiLi9jb21tZW50cy9WaWV3T3JFZGl0Q29tbWVudFwiO1xuaW1wb3J0IHtDb21tZW50QWN0aW9uc30gZnJvbSBcIi4vY29tbWVudHMvQ29tbWVudEFjdGlvbnNcIjtcbmltcG9ydCB7Vmlld09yRWRpdEZsYXNoY2FyZH0gZnJvbSAnLi9mbGFzaGNhcmRzL1ZpZXdPckVkaXRGbGFzaGNhcmQnO1xuaW1wb3J0IHtDb21tZW50fSBmcm9tICcuLi8uLi9tZXRhZGF0YS9Db21tZW50JztcbmltcG9ydCB7Rmxhc2hjYXJkVHlwZX0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9GbGFzaGNhcmRUeXBlJztcbmltcG9ydCB7Rmxhc2hjYXJkSW5wdXRGaWVsZHNUeXBlfSBmcm9tICcuL2ZsYXNoY2FyZHMvZmxhc2hjYXJkX2lucHV0L0ZsYXNoY2FyZElucHV0cyc7XG5pbXBvcnQge0ZsYXNoY2FyZEFjdGlvbnN9IGZyb20gJy4vZmxhc2hjYXJkcy9GbGFzaGNhcmRBY3Rpb25zJztcbmltcG9ydCB7Rmxhc2hjYXJkfSBmcm9tICcuLi8uLi9tZXRhZGF0YS9GbGFzaGNhcmQnO1xuaW1wb3J0IHtEb2N9IGZyb20gJy4uLy4uL21ldGFkYXRhL0RvYyc7XG5cbi8qKlxuICogQSBnZW5lcmljIHdyYXBwZXIgdGhhdCBkZXRlcm1pbmVzIHdoaWNoIHN1Yi1jb21wb25lbnQgdG8gcmVuZGVyLlxuICovXG5leHBvcnQgY2xhc3MgQ2hpbGRBbm5vdGF0aW9uU2VjdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcywgY29udGV4dDogYW55KSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcblxuICAgICAgICB0aGlzLm9uQ29tbWVudCA9IHRoaXMub25Db21tZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25GbGFzaGNhcmQgPSB0aGlzLm9uRmxhc2hjYXJkLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuXG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpIHtcblxuICAgICAgICBjb25zdCBkb2NBbm5vdGF0aW9ucyA9IFsuLi50aGlzLnByb3BzLmRvY0Fubm90YXRpb25zXTtcblxuICAgICAgICBkb2NBbm5vdGF0aW9ucy5zb3J0KChhLCBiKSA9PiBhLmNyZWF0ZWQubG9jYWxlQ29tcGFyZShiLmNyZWF0ZWQpKTtcblxuICAgICAgICBjb25zdCByZXN1bHQ6IGFueSA9IFtdO1xuXG4gICAgICAgIGRvY0Fubm90YXRpb25zLm1hcChjaGlsZCA9PiB7XG5cbiAgICAgICAgICAgIGlmIChjaGlsZC5hbm5vdGF0aW9uVHlwZSA9PT0gQW5ub3RhdGlvblR5cGUuQ09NTUVOVCkge1xuXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2ggKDxWaWV3T3JFZGl0Q29tbWVudCBrZXk9e2NoaWxkLmlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jPXt0aGlzLnByb3BzLmRvY31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXtjaGlsZC5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29tbWVudD17KGh0bWwsIGV4aXN0aW5nQ29tbWVudCkgPT4gdGhpcy5vbkNvbW1lbnQoaHRtbCwgZXhpc3RpbmdDb21tZW50KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQ9e2NoaWxkfS8+KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCAoPFZpZXdPckVkaXRGbGFzaGNhcmQga2V5PXtjaGlsZC5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jPXt0aGlzLnByb3BzLmRvY31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e2NoaWxkLmlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkZsYXNoY2FyZD17KGZsYXNoY2FyZFR5cGUsIGZpZWxkcywgZXhpc3RpbmdGbGFzaGNhcmQpID0+IHRoaXMub25GbGFzaGNhcmQoZmxhc2hjYXJkVHlwZSwgZmllbGRzLCBleGlzdGluZ0ZsYXNoY2FyZCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXNoY2FyZD17Y2hpbGR9Lz4pO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIH1cblxuICAgIHByaXZhdGUgb25Db21tZW50KGh0bWw6IHN0cmluZywgZXhpc3RpbmdDb21tZW50OiBDb21tZW50KSB7XG4gICAgICAgIENvbW1lbnRBY3Rpb25zLnVwZGF0ZSh0aGlzLnByb3BzLmRvYy5kb2NNZXRhLCB0aGlzLnByb3BzLnBhcmVudCwgaHRtbCwgZXhpc3RpbmdDb21tZW50KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uRmxhc2hjYXJkKGZsYXNoY2FyZFR5cGU6IEZsYXNoY2FyZFR5cGUsIGZpZWxkczogUmVhZG9ubHk8Rmxhc2hjYXJkSW5wdXRGaWVsZHNUeXBlPiwgZXhpc3RpbmdGbGFzaGNhcmQ/OiBGbGFzaGNhcmQpIHtcbiAgICAgICAgRmxhc2hjYXJkQWN0aW9ucy51cGRhdGUodGhpcy5wcm9wcy5kb2MuZG9jTWV0YSwgdGhpcy5wcm9wcy5wYXJlbnQsIGZsYXNoY2FyZFR5cGUsIGZpZWxkcywgZXhpc3RpbmdGbGFzaGNhcmQpO1xuICAgIH1cblxufVxuXG5pbnRlcmZhY2UgSVByb3BzIHtcblxuICAgIHJlYWRvbmx5IGRvYzogRG9jO1xuXG4gICAgcmVhZG9ubHkgcGFyZW50OiBEb2NBbm5vdGF0aW9uO1xuXG4gICAgcmVhZG9ubHkgZG9jQW5ub3RhdGlvbnM6IFJlYWRvbmx5QXJyYXk8RG9jQW5ub3RhdGlvbj47XG5cbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG5cbn1cblxuXG4iXX0=