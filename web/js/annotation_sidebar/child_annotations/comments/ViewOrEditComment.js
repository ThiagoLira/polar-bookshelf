"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const EditButton_1 = require("../EditButton");
const EditComment_1 = require("./EditComment");
const ViewComment_1 = require("./ViewComment");
const CancelButton_1 = require("../CancelButton");
class ViewOrEditComment extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.onEdit = this.onEdit.bind(this);
        this.onCancel = this.onCancel.bind(this);
        this.state = {
            mode: 'view'
        };
    }
    render() {
        const editButton = React.createElement(EditButton_1.EditButton, { id: 'edit-button-for-' + this.props.id, disabled: !this.props.doc.mutable, onClick: () => this.onEdit(), type: "comment" });
        const cancelButton = React.createElement(CancelButton_1.CancelButton, { onClick: () => this.onCancel() });
        const existingComment = this.props.comment.original;
        if (this.state.mode === 'view') {
            return React.createElement(ViewComment_1.ViewComment, { comment: this.props.comment, doc: this.props.doc, editButton: editButton });
        }
        else {
            return React.createElement(EditComment_1.EditComment, { id: 'edit-comment-for' + this.props.id, onComment: (html) => this.props.onComment(html, existingComment), existingComment: existingComment, cancelButton: cancelButton });
        }
    }
    onEdit() {
        this.setState({ mode: 'edit' });
    }
    onCancel() {
        this.setState({ mode: 'view' });
    }
}
exports.ViewOrEditComment = ViewOrEditComment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlld09yRWRpdENvbW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJWaWV3T3JFZGl0Q29tbWVudC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsNkNBQStCO0FBRS9CLDhDQUF5QztBQUN6QywrQ0FBMEM7QUFDMUMsK0NBQTBDO0FBQzFDLGtEQUE2QztBQUk3QyxNQUFhLGlCQUFrQixTQUFRLEtBQUssQ0FBQyxTQUF5QjtJQUVsRSxZQUFZLEtBQWEsRUFBRSxPQUFZO1FBQ25DLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXpDLElBQUksQ0FBQyxLQUFLLEdBQUc7WUFDVCxJQUFJLEVBQUUsTUFBTTtTQUNmLENBQUM7SUFFTixDQUFDO0lBRU0sTUFBTTtRQUVULE1BQU0sVUFBVSxHQUFHLG9CQUFDLHVCQUFVLElBQUMsRUFBRSxFQUFFLGtCQUFrQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUN0QyxRQUFRLEVBQUUsQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQ2xDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQzVCLElBQUksRUFBQyxTQUFTLEdBQUUsQ0FBQztRQUVoRCxNQUFNLFlBQVksR0FBRyxvQkFBQywyQkFBWSxJQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztRQUVyRSxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFtQixDQUFDO1FBRS9ELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFO1lBRTVCLE9BQU8sb0JBQUMseUJBQVcsSUFBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQzNCLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFDbkIsVUFBVSxFQUFFLFVBQVUsR0FBRyxDQUFDO1NBRWpEO2FBQU07WUFDSCxPQUFPLG9CQUFDLHlCQUFXLElBQUMsRUFBRSxFQUFFLGtCQUFrQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUN0QyxTQUFTLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsRUFDaEUsZUFBZSxFQUFFLGVBQWUsRUFDaEMsWUFBWSxFQUFFLFlBQVksR0FBRyxDQUFDO1NBQ3JEO0lBRUwsQ0FBQztJQUVPLE1BQU07UUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVPLFFBQVE7UUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUVKO0FBaERELDhDQWdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7RG9jQW5ub3RhdGlvbn0gZnJvbSAnLi4vLi4vRG9jQW5ub3RhdGlvbic7XG5pbXBvcnQge0VkaXRCdXR0b259IGZyb20gXCIuLi9FZGl0QnV0dG9uXCI7XG5pbXBvcnQge0VkaXRDb21tZW50fSBmcm9tIFwiLi9FZGl0Q29tbWVudFwiO1xuaW1wb3J0IHtWaWV3Q29tbWVudH0gZnJvbSBcIi4vVmlld0NvbW1lbnRcIjtcbmltcG9ydCB7Q2FuY2VsQnV0dG9ufSBmcm9tIFwiLi4vQ2FuY2VsQnV0dG9uXCI7XG5pbXBvcnQge0NvbW1lbnR9IGZyb20gJy4uLy4uLy4uL21ldGFkYXRhL0NvbW1lbnQnO1xuaW1wb3J0IHtEb2N9IGZyb20gJy4uLy4uLy4uL21ldGFkYXRhL0RvYyc7XG5cbmV4cG9ydCBjbGFzcyBWaWV3T3JFZGl0Q29tbWVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcywgY29udGV4dDogYW55KSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcblxuICAgICAgICB0aGlzLm9uRWRpdCA9IHRoaXMub25FZGl0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25DYW5jZWwgPSB0aGlzLm9uQ2FuY2VsLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG1vZGU6ICd2aWV3J1xuICAgICAgICB9O1xuXG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpIHtcblxuICAgICAgICBjb25zdCBlZGl0QnV0dG9uID0gPEVkaXRCdXR0b24gaWQ9eydlZGl0LWJ1dHRvbi1mb3ItJyArIHRoaXMucHJvcHMuaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ISB0aGlzLnByb3BzLmRvYy5tdXRhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5vbkVkaXQoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjb21tZW50XCIvPjtcblxuICAgICAgICBjb25zdCBjYW5jZWxCdXR0b24gPSA8Q2FuY2VsQnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMub25DYW5jZWwoKX0vPjtcblxuICAgICAgICBjb25zdCBleGlzdGluZ0NvbW1lbnQgPSB0aGlzLnByb3BzLmNvbW1lbnQub3JpZ2luYWwgYXMgQ29tbWVudDtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5tb2RlID09PSAndmlldycpIHtcblxuICAgICAgICAgICAgcmV0dXJuIDxWaWV3Q29tbWVudCBjb21tZW50PXt0aGlzLnByb3BzLmNvbW1lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvYz17dGhpcy5wcm9wcy5kb2N9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRCdXR0b249e2VkaXRCdXR0b259Lz47XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiA8RWRpdENvbW1lbnQgaWQ9eydlZGl0LWNvbW1lbnQtZm9yJyArIHRoaXMucHJvcHMuaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29tbWVudD17KGh0bWwpID0+IHRoaXMucHJvcHMub25Db21tZW50KGh0bWwsIGV4aXN0aW5nQ29tbWVudCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nQ29tbWVudD17ZXhpc3RpbmdDb21tZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b249e2NhbmNlbEJ1dHRvbn0vPjtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkVkaXQoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe21vZGU6ICdlZGl0J30pO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25DYW5jZWwoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe21vZGU6ICd2aWV3J30pO1xuICAgIH1cblxufVxuaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcbiAgICByZWFkb25seSBkb2M6IERvYztcbiAgICByZWFkb25seSBjb21tZW50OiBEb2NBbm5vdGF0aW9uO1xuICAgIHJlYWRvbmx5IG9uQ29tbWVudDogKGh0bWw6IHN0cmluZywgZXhpc3RpbmdDb21tZW50OiBDb21tZW50KSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICByZWFkb25seSBtb2RlOiAndmlldycgfCAnZWRpdCc7XG59XG5cblxuIl19