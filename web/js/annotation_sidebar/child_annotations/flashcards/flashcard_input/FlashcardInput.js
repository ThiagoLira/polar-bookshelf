"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("polar-shared/src/logger/Logger");
const FlashcardType_1 = require("polar-shared/src/metadata/FlashcardType");
const FlashcardInputForCloze_1 = require("./FlashcardInputForCloze");
const FlashcardInputForFrontAndBack_1 = require("./FlashcardInputForFrontAndBack");
const log = Logger_1.Logger.create();
class FlashcardInput extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.onFlashcard = this.onFlashcard.bind(this);
        this.state = {
            iter: 0,
            flashcardType: this.props.flashcardType || this.defaultFlashcardType()
        };
    }
    render() {
        if (this.state.flashcardType === FlashcardType_1.FlashcardType.BASIC_FRONT_BACK) {
            return (React.createElement(FlashcardInputForFrontAndBack_1.FlashcardInputForFrontAndBack, { id: this.props.id, cancelButton: this.props.cancelButton, existingFlashcard: this.props.existingFlashcard, defaultValue: this.props.defaultValue, onFlashcard: (flashcardType, fields) => this.onFlashcard(flashcardType, fields), onFlashcardChangeType: flashcardType => this.onFlashcardChangeType(flashcardType) }));
        }
        else {
            return (React.createElement(FlashcardInputForCloze_1.FlashcardInputForCloze, { id: this.props.id, cancelButton: this.props.cancelButton, existingFlashcard: this.props.existingFlashcard, defaultValue: this.props.defaultValue, onFlashcard: (flashcardType, fields) => this.onFlashcard(flashcardType, fields), onFlashcardChangeType: flashcardType => this.onFlashcardChangeType(flashcardType) }));
        }
    }
    onFlashcardChangeType(flashcardType) {
        this.setState(Object.assign(Object.assign({}, this.state), { flashcardType }));
        this.setDefaultFlashcardType(flashcardType);
    }
    defaultFlashcardType() {
        const defaultFlashcardType = window.localStorage.getItem('default-flashcard-type');
        switch (defaultFlashcardType) {
            case FlashcardType_1.FlashcardType.BASIC_FRONT_BACK:
                return FlashcardType_1.FlashcardType.BASIC_FRONT_BACK;
            case FlashcardType_1.FlashcardType.CLOZE:
                return FlashcardType_1.FlashcardType.CLOZE;
            default:
                return FlashcardType_1.FlashcardType.BASIC_FRONT_BACK;
        }
    }
    setDefaultFlashcardType(flashcardType) {
        window.localStorage.setItem('default-flashcard-type', flashcardType);
    }
    onFlashcard(flashcardType, fields) {
        this.props.onFlashcard(flashcardType, fields, this.props.existingFlashcard);
        this.setState({
            iter: this.state.iter + 1
        });
    }
}
exports.FlashcardInput = FlashcardInput;
//# sourceMappingURL=data:application/json;base64,