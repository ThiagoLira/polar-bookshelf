"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("polar-shared/src/logger/Logger");
const Button_1 = __importDefault(require("reactstrap/lib/Button"));
const FlashcardType_1 = require("polar-shared/src/metadata/FlashcardType");
const FlashcardButtons_1 = require("./FlashcardButtons");
const FlashcardTypeSelector_1 = require("./FlashcardTypeSelector");
const RichTextArea_1 = require("../../../RichTextArea");
const FlashcardInputs_1 = require("./FlashcardInputs");
const reactstrap_1 = require("reactstrap");
const Ranges_1 = require("../../../../highlights/text/selection/Ranges");
const FlashcardStyles_1 = require("./FlashcardStyles");
const log = Logger_1.Logger.create();
class FlashcardInputForCloze extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.flashcardType = FlashcardType_1.FlashcardType.CLOZE;
        this.fields = { text: "" };
        this.counter = 1;
        this.onCreate = this.onCreate.bind(this);
        this.state = {
            iter: 0,
        };
        this.fields = this.toFields();
    }
    render() {
        const { id } = this.props;
        const fields = this.toFields();
        return (React.createElement("div", { id: "annotation-flashcard-box", className: "mt-1" },
            React.createElement(RichTextArea_1.RichTextArea, { id: `text-${this.props.id}`, value: fields.text, defaultValue: this.props.defaultValue, autofocus: true, onKeyDown: event => this.onKeyDown(event), onRichTextMutator: richTextMutator => this.richTextMutator = richTextMutator, onChange: (html) => this.fields.text = html }),
            React.createElement("div", { style: FlashcardStyles_1.FlashcardStyles.BottomBar },
                React.createElement("div", { style: FlashcardStyles_1.FlashcardStyles.BottomBarItem },
                    React.createElement(FlashcardTypeSelector_1.FlashcardTypeSelector, { flashcardType: this.flashcardType, onChangeFlashcardType: flashcardType => this.props.onFlashcardChangeType(flashcardType) })),
                React.createElement("div", { style: FlashcardStyles_1.FlashcardStyles.BottomBarItem, className: "ml-1" },
                    React.createElement(Button_1.default, { id: `button-${this.props.id}`, color: "light", size: "md", onClick: () => this.onClozeDelete(), className: "ml-1 p-1 border" }, "[\u2026]"),
                    React.createElement(reactstrap_1.UncontrolledTooltip, { placement: "bottom", delay: { show: 750, hide: 0 }, target: `button-${this.props.id}` },
                        "Create cloze deletion for text ",
                        React.createElement("span", { className: "text-muted" }, "Control+Shift+C"))),
                React.createElement("div", { style: FlashcardStyles_1.FlashcardStyles.BottomBarItemRight, className: "text-right" },
                    React.createElement(FlashcardButtons_1.FlashcardButtons, { cancelButton: this.props.cancelButton, existingFlashcard: this.props.existingFlashcard, onCreate: () => this.onCreate() })))));
    }
    toFields() {
        const text = FlashcardInputs_1.FlashcardInputs.fieldToString('text', this.props.existingFlashcard);
        return { text };
    }
    onClozeDelete() {
        const sel = window.getSelection();
        if (!sel) {
            return;
        }
        const range = sel.getRangeAt(0);
        const textNodes = Ranges_1.Ranges.getTextNodes(range);
        if (textNodes.length === 0) {
            return;
        }
        const c = this.counter++;
        const prefix = document.createTextNode(`{{c${c}::`);
        const suffix = document.createTextNode('}}');
        const firstNode = textNodes[0];
        const lastNode = textNodes[textNodes.length - 1];
        firstNode.parentNode.insertBefore(prefix, firstNode);
        lastNode.parentNode.insertBefore(suffix, lastNode.nextSibling);
        sel.removeAllRanges();
        this.fields.text = this.richTextMutator.currentValue();
    }
    onKeyDown(event) {
        if (this.isKeyboardControlShiftC(event)) {
            this.onClozeDelete();
        }
        if (event.getModifierState("Control") && event.key === "Enter") {
            this.onCreate();
        }
    }
    isKeyboardControlShiftC(event) {
        return event.getModifierState("Control") &&
            event.getModifierState("Shift") &&
            event.key === "C";
    }
    onCreate() {
        if (this.props.onFlashcard) {
            this.props.onFlashcard(this.flashcardType, this.fields);
        }
        this.setState({
            iter: this.state.iter + 1
        });
    }
}
exports.FlashcardInputForCloze = FlashcardInputForCloze;
//# sourceMappingURL=data:application/json;base64,