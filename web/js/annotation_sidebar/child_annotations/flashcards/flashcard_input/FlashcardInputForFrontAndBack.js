"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("polar-shared/src/logger/Logger");
const FlashcardType_1 = require("polar-shared/src/metadata/FlashcardType");
const FlashcardButtons_1 = require("./FlashcardButtons");
const FlashcardTypeSelector_1 = require("./FlashcardTypeSelector");
const RichTextArea_1 = require("../../../RichTextArea");
const FlashcardInputs_1 = require("./FlashcardInputs");
const FlashcardStyles_1 = require("./FlashcardStyles");
const log = Logger_1.Logger.create();
class FlashcardInputForFrontAndBack extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.flashcardType = FlashcardType_1.FlashcardType.BASIC_FRONT_BACK;
        this.fields = { front: "", back: "" };
        this.onCreate = this.onCreate.bind(this);
        this.state = {
            iter: 0,
        };
        this.fields = this.toFields();
    }
    render() {
        const { id } = this.props;
        const fields = this.toFields();
        return (React.createElement("div", { id: "annotation-flashcard-box", className: "mt-1" },
            React.createElement(RichTextArea_1.RichTextArea, { label: "front", id: `front-${this.props.id}`, value: fields.front, defaultValue: this.props.defaultValue, autofocus: true, onKeyDown: event => this.onKeyDown(event), onChange: (html) => this.fields.front = html }),
            React.createElement(RichTextArea_1.RichTextArea, { label: "back", id: `back-${this.props.id}`, value: fields.back, onKeyDown: event => this.onKeyDown(event), onChange: (html) => this.fields.back = html }),
            React.createElement("div", { style: FlashcardStyles_1.FlashcardStyles.BottomBar },
                React.createElement("div", { style: FlashcardStyles_1.FlashcardStyles.BottomBarItem },
                    React.createElement(FlashcardTypeSelector_1.FlashcardTypeSelector, { flashcardType: this.flashcardType, onChangeFlashcardType: flashcardType => this.props.onFlashcardChangeType(flashcardType) })),
                React.createElement("div", { style: FlashcardStyles_1.FlashcardStyles.BottomBarItemRight, className: "text-right" },
                    React.createElement(FlashcardButtons_1.FlashcardButtons, { cancelButton: this.props.cancelButton, existingFlashcard: this.props.existingFlashcard, onCreate: () => this.onCreate() })))));
    }
    toFields() {
        const front = FlashcardInputs_1.FlashcardInputs.fieldToString('front', this.props.existingFlashcard);
        const back = FlashcardInputs_1.FlashcardInputs.fieldToString('back', this.props.existingFlashcard);
        return { front, back };
    }
    onKeyDown(event) {
        if (event.getModifierState("Control") && event.key === "Enter") {
            this.onCreate();
        }
    }
    onCreate() {
        if (this.props.onFlashcard) {
            this.props.onFlashcard(this.flashcardType, this.fields);
        }
        this.setState({
            iter: this.state.iter + 1
        });
    }
}
exports.FlashcardInputForFrontAndBack = FlashcardInputForFrontAndBack;
//# sourceMappingURL=data:application/json;base64,