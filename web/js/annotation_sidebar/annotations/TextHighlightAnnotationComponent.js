"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const AnnotationTypes_1 = require("../../metadata/AnnotationTypes");
const Optional_1 = require("polar-shared/src/util/ts/Optional");
const AnnotationControlBar_1 = require("../AnnotationControlBar");
const ChildAnnotationSection_1 = require("../child_annotations/ChildAnnotationSection");
const HighlightColor_1 = require("polar-shared/src/metadata/HighlightColor");
class TextHighlightAnnotationComponent extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.state = {};
    }
    render() {
        const { annotation } = this.props;
        const attrType = AnnotationTypes_1.AnnotationTypes.toDataAttribute(annotation.annotationType);
        const html = Optional_1.Optional.first(annotation.html).getOrElse('');
        const key = 'text-highlight-' + annotation.id;
        const borderColor = HighlightColor_1.HighlightColors.toBackgroundColor(annotation.color, 0.7);
        return (React.createElement("div", { className: "m-0 mb-2" },
            React.createElement("div", { key: key, "data-annotation-id": annotation.id, "data-annotation-type": attrType, "data-annotation-color": annotation.color, className: attrType },
                React.createElement("div", { style: { display: 'flex', flexDirection: 'column' } },
                    React.createElement("div", { className: "muted-color-root" },
                        React.createElement("div", { style: { display: 'flex' } },
                            React.createElement("div", { className: "p-1", style: {
                                    borderLeft: `5px solid ${borderColor}`
                                } }),
                            React.createElement("div", { className: "text-sm", dangerouslySetInnerHTML: { __html: html } }),
                            React.createElement("div", null)),
                        React.createElement("div", null,
                            React.createElement(AnnotationControlBar_1.AnnotationControlBar, { doc: this.props.doc, annotation: annotation }))),
                    React.createElement("div", null,
                        React.createElement("div", { className: "comments" },
                            React.createElement(ChildAnnotationSection_1.ChildAnnotationSection, { doc: this.props.doc, parent: annotation, docAnnotations: annotation.getChildren() })))))));
    }
}
exports.TextHighlightAnnotationComponent = TextHighlightAnnotationComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dEhpZ2hsaWdodEFubm90YXRpb25Db21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJUZXh0SGlnaGxpZ2h0QW5ub3RhdGlvbkNvbXBvbmVudC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsNkNBQStCO0FBQy9CLG9FQUErRDtBQUUvRCxnRUFBMkQ7QUFDM0Qsa0VBQTZEO0FBQzdELHdGQUFtRjtBQUduRiw2RUFBeUU7QUFFekUsTUFBYSxnQ0FBaUMsU0FBUSxLQUFLLENBQUMsU0FBeUI7SUFFakYsWUFBWSxLQUFhLEVBQUUsT0FBWTtRQUNuQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRXRCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBRXBCLENBQUM7SUFFTSxNQUFNO1FBRVQsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFbEMsTUFBTSxRQUFRLEdBQUcsaUNBQWUsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTVFLE1BQU0sSUFBSSxHQUFHLG1CQUFRLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFM0QsTUFBTSxHQUFHLEdBQUcsaUJBQWlCLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUU5QyxNQUFNLFdBQVcsR0FBRyxnQ0FBZSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFN0UsT0FBTyxDQUVILDZCQUFLLFNBQVMsRUFBQyxVQUFVO1lBRXJCLDZCQUFLLEdBQUcsRUFBRSxHQUFHLHdCQUNZLFVBQVUsQ0FBQyxFQUFFLDBCQUNYLFFBQVEsMkJBQ1AsVUFBVSxDQUFDLEtBQUssRUFDdkMsU0FBUyxFQUFFLFFBQVE7Z0JBUXBCLDZCQUFLLEtBQUssRUFBRSxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBQztvQkFFbEQsNkJBQUssU0FBUyxFQUFDLGtCQUFrQjt3QkFDN0IsNkJBQUssS0FBSyxFQUFFLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBQzs0QkFFekIsNkJBQUssU0FBUyxFQUFDLEtBQUssRUFDUixLQUFLLEVBQUU7b0NBQ0gsVUFBVSxFQUFFLGFBQWEsV0FBVyxFQUFFO2lDQUN6QyxHQUVQOzRCQUVOLDZCQUFLLFNBQVMsRUFBQyxTQUFTLEVBQ2xCLHVCQUF1QixFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQyxHQUV2Qzs0QkFFTixnQ0FBTSxDQUVKO3dCQUVOOzRCQUNJLG9CQUFDLDJDQUFvQixJQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFDbkIsVUFBVSxFQUFFLFVBQVUsR0FBRyxDQUU3QyxDQUNKO29CQUVOO3dCQUVJLDZCQUFLLFNBQVMsRUFBQyxVQUFVOzRCQUNyQixvQkFBQywrQ0FBc0IsSUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQ25CLE1BQU0sRUFBRSxVQUFVLEVBQ2xCLGNBQWMsRUFBRSxVQUFVLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FDakUsQ0FFSixDQUVKLENBRUosQ0FFSixDQUNULENBQUM7SUFDTixDQUFDO0NBRUo7QUFuRkQsNEVBbUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtBbm5vdGF0aW9uVHlwZXN9IGZyb20gJy4uLy4uL21ldGFkYXRhL0Fubm90YXRpb25UeXBlcyc7XG5pbXBvcnQge0RvY0Fubm90YXRpb259IGZyb20gJy4uL0RvY0Fubm90YXRpb24nO1xuaW1wb3J0IHtPcHRpb25hbH0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy91dGlsL3RzL09wdGlvbmFsJztcbmltcG9ydCB7QW5ub3RhdGlvbkNvbnRyb2xCYXJ9IGZyb20gJy4uL0Fubm90YXRpb25Db250cm9sQmFyJztcbmltcG9ydCB7Q2hpbGRBbm5vdGF0aW9uU2VjdGlvbn0gZnJvbSAnLi4vY2hpbGRfYW5ub3RhdGlvbnMvQ2hpbGRBbm5vdGF0aW9uU2VjdGlvbic7XG5pbXBvcnQge0RvY30gZnJvbSAnLi4vLi4vbWV0YWRhdGEvRG9jJztcbmltcG9ydCB7TGF6eVByb3BzLCBMYXp5U3RhdGV9IGZyb20gJy4uLy4uL3JlYWN0L0xhenlDb21wb25lbnRzJztcbmltcG9ydCB7SGlnaGxpZ2h0Q29sb3JzfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL21ldGFkYXRhL0hpZ2hsaWdodENvbG9yJztcblxuZXhwb3J0IGNsYXNzIFRleHRIaWdobGlnaHRBbm5vdGF0aW9uQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzLCBjb250ZXh0OiBhbnkpIHtcbiAgICAgICAgc3VwZXIocHJvcHMsIGNvbnRleHQpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fTtcblxuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG5cbiAgICAgICAgY29uc3QgeyBhbm5vdGF0aW9uIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIGNvbnN0IGF0dHJUeXBlID0gQW5ub3RhdGlvblR5cGVzLnRvRGF0YUF0dHJpYnV0ZShhbm5vdGF0aW9uLmFubm90YXRpb25UeXBlKTtcblxuICAgICAgICBjb25zdCBodG1sID0gT3B0aW9uYWwuZmlyc3QoYW5ub3RhdGlvbi5odG1sKS5nZXRPckVsc2UoJycpO1xuXG4gICAgICAgIGNvbnN0IGtleSA9ICd0ZXh0LWhpZ2hsaWdodC0nICsgYW5ub3RhdGlvbi5pZDtcblxuICAgICAgICBjb25zdCBib3JkZXJDb2xvciA9IEhpZ2hsaWdodENvbG9ycy50b0JhY2tncm91bmRDb2xvcihhbm5vdGF0aW9uLmNvbG9yLCAwLjcpO1xuXG4gICAgICAgIHJldHVybiAoXG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibS0wIG1iLTJcIj5cblxuICAgICAgICAgICAgICAgIDxkaXYga2V5PXtrZXl9XG4gICAgICAgICAgICAgICAgICAgICBkYXRhLWFubm90YXRpb24taWQ9e2Fubm90YXRpb24uaWR9XG4gICAgICAgICAgICAgICAgICAgICBkYXRhLWFubm90YXRpb24tdHlwZT17YXR0clR5cGV9XG4gICAgICAgICAgICAgICAgICAgICBkYXRhLWFubm90YXRpb24tY29sb3I9e2Fubm90YXRpb24uY29sb3J9XG4gICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2F0dHJUeXBlfT5cblxuICAgICAgICAgICAgICAgICAgICB7LypOT1RFOiB0aGlzIEhUTUwgbGF5b3V0IGlzIHNwZWNpZmljYWxseSBkZXNpZ25lZCB0byBwcmV2ZW50ICovfVxuICAgICAgICAgICAgICAgICAgICB7LypleGNlc3MgSFRNTCBlbGVtZW50IGNvcHlpbmcgd2hlbiB0aGUgdXNlciBkb3VibGUgY2xpY2tzIHRoZSAqL31cbiAgICAgICAgICAgICAgICAgICAgey8qdGV4dC4gIFBsYWNpbmcgdGhlIGVsZW1lbnRzIGluIHRoZSBkaXYgbGF5b3V0IGJlbG93ICh3aXRoICovfVxuICAgICAgICAgICAgICAgICAgICB7Lyp0cmFpbGluZyBlbXB0eSBkaXYgaW4gYSBmbGV4Ym94IHBhcmVudCkgcHJldmVudHMgdGhlIGZvcm0gKi99XG4gICAgICAgICAgICAgICAgICAgIHsvKmJveGVzIHRoYXQgZm9sbG93IGZyb20gYmVpbmcgc2VsZWN0ZWQuKi99XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e2Rpc3BsYXk6ICdmbGV4JywgZmxleERpcmVjdGlvbjogJ2NvbHVtbid9fT5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdXRlZC1jb2xvci1yb290XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e2Rpc3BsYXk6ICdmbGV4J319PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC0xXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckxlZnQ6IGA1cHggc29saWQgJHtib3JkZXJDb2xvcn1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBodG1sfX0+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdi8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBbm5vdGF0aW9uQ29udHJvbEJhciBkb2M9e3RoaXMucHJvcHMuZG9jfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbj17YW5ub3RhdGlvbn0vPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29tbWVudHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoaWxkQW5ub3RhdGlvblNlY3Rpb24gZG9jPXt0aGlzLnByb3BzLmRvY31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50PXthbm5vdGF0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NBbm5vdGF0aW9ucz17YW5ub3RhdGlvbi5nZXRDaGlsZHJlbigpfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxufVxuaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIExhenlQcm9wcyB7XG5cbiAgICByZWFkb25seSBkb2M6IERvYztcblxuICAgIHJlYWRvbmx5IGFubm90YXRpb246IERvY0Fubm90YXRpb247XG5cbn1cblxuaW50ZXJmYWNlIElTdGF0ZSBleHRlbmRzIExhenlTdGF0ZSB7XG5cbn1cblxuIl19