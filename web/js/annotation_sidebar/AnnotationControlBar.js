"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const AnnotationSidebars_1 = require("./AnnotationSidebars");
const AnnotationDropdown_1 = require("./AnnotationDropdown");
const AnnotationType_1 = require("polar-shared/src/metadata/AnnotationType");
const reactstrap_1 = require("reactstrap");
const RendererAnalytics_1 = require("../ga/RendererAnalytics");
const CommentIcon_1 = require("../ui/standard_icons/CommentIcon");
const FlashcardIcon_1 = require("../ui/standard_icons/FlashcardIcon");
const CreateComment_1 = require("./child_annotations/comments/CreateComment");
const CommentActions_1 = require("./child_annotations/comments/CommentActions");
const CreateFlashcard_1 = require("./child_annotations/flashcards/CreateFlashcard");
const FlashcardActions_1 = require("./child_annotations/flashcards/FlashcardActions");
const ColorSelector_1 = require("../ui/colors/ColorSelector");
const TextHighlights_1 = require("../metadata/TextHighlights");
const AreaHighlights_1 = require("../metadata/AreaHighlights");
const DocAnnotationMoment_1 = require("./DocAnnotationMoment");
const DocAuthor_1 = require("./DocAuthor");
const NullCollapse_1 = require("../ui/null_collapse/NullCollapse");
const EditTextHighlight_1 = require("./child_annotations/comments/EditTextHighlight");
const EditIcon_1 = require("../ui/standard_icons/EditIcon");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const Styles = {
    button: {
        marginTop: 'auto',
        marginBottom: 'auto',
        color: 'red !important',
        fontSize: '15px'
    },
    barBody: {
        display: 'flex'
    },
    barChild: {
        marginTop: 'auto',
        marginBottom: 'auto',
    }
};
class AnnotationControlBar extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.onCommentCreated = this.onCommentCreated.bind(this);
        this.onColor = this.onColor.bind(this);
        this.onTextHighlightReset = this.onTextHighlightReset.bind(this);
        this.onTextHighlightEdited = this.onTextHighlightEdited.bind(this);
        this.state = {
            activeInputComponent: 'none'
        };
    }
    render() {
        const { annotation } = this.props;
        const ChangeTextHighlightButton = () => {
            if (this.props.annotation.annotationType !== AnnotationType_1.AnnotationType.TEXT_HIGHLIGHT) {
                return null;
            }
            return React.createElement(reactstrap_1.Button, { className: "text-muted p-1", title: "Edit text highlight", size: "sm", color: "light", style: Styles.button, disabled: !this.props.doc.mutable, onClick: () => this.toggleActiveInputComponent('text-highlight') },
                React.createElement(EditIcon_1.EditIcon, null));
        };
        const CreateCommentButton = () => {
            return React.createElement(reactstrap_1.Button, { className: "text-muted p-1", title: "Create comment", size: "sm", color: "light", style: Styles.button, disabled: !this.props.doc.mutable, onClick: () => this.toggleActiveInputComponent('comment') },
                React.createElement(CommentIcon_1.CommentIcon, null));
        };
        const CreateFlashcardButton = () => {
            return React.createElement(reactstrap_1.Button, { className: "ml-1 text-muted p-1", title: "Create flashcard", style: Styles.button, size: "sm", color: "light", disabled: !this.props.doc.mutable, onClick: () => this.toggleActiveInputComponent('flashcard') },
                React.createElement(FlashcardIcon_1.FlashcardIcon, null));
        };
        return (React.createElement("div", { style: { userSelect: 'none' }, className: "annotation-control-bar mb-3" },
            React.createElement("div", { style: Styles.barBody, className: "flexbar annotation-buttons border-bottom pt-0 pb-0" },
                React.createElement(DocAuthor_1.DocAuthor, { author: annotation.author }),
                React.createElement("div", { style: Styles.barChild, className: "text-muted annotation-context-link" },
                    React.createElement("a", { href: "#", onClick: () => this.onJumpToContext(annotation) },
                        React.createElement(DocAnnotationMoment_1.DocAnnotationMoment, { created: annotation.created }))),
                React.createElement("div", { style: Styles.barChild, className: "flexbar-right muted-color" },
                    React.createElement(ChangeTextHighlightButton, null),
                    React.createElement(CreateCommentButton, null),
                    React.createElement(CreateFlashcardButton, null),
                    React.createElement(NullCollapse_1.NullCollapse, { open: !annotation.immutable },
                        React.createElement(ColorSelector_1.ColorSelector, { className: "mt-auto mb-auto muted-color-target-bg", size: '16px', color: this.props.annotation.color || 'yellow', onSelected: color => this.onColor(color) })),
                    React.createElement("div", { className: "ml-1" },
                        React.createElement(AnnotationDropdown_1.AnnotationDropdown, { id: 'annotation-dropdown-' + annotation.id, disabled: this.props.annotation.immutable, annotation: annotation, onDelete: () => this.onDelete(annotation), onCreateComment: () => this.toggleActiveInputComponent('comment'), onCreateFlashcard: () => this.toggleActiveInputComponent('flashcard'), onJumpToContext: () => this.onJumpToContext(annotation) })))),
            React.createElement(EditTextHighlight_1.EditTextHighlight, { id: annotation.id, hidden: this.props.annotation.annotationType !== AnnotationType_1.AnnotationType.TEXT_HIGHLIGHT, active: this.state.activeInputComponent === 'text-highlight', html: this.props.annotation.html || "", onReset: () => this.onTextHighlightReset(), onChanged: text => this.onTextHighlightEdited(text), onCancel: () => this.toggleActiveInputComponent('none') }),
            React.createElement(CreateComment_1.CreateComment, { id: annotation.id, active: this.state.activeInputComponent === 'comment', onCancel: () => this.toggleActiveInputComponent('none'), onComment: (html) => this.onCommentCreated(html) }),
            React.createElement(CreateFlashcard_1.CreateFlashcard, { id: annotation.id, active: this.state.activeInputComponent === 'flashcard', defaultValue: this.props.annotation.html, onCancel: () => this.toggleActiveInputComponent('none'), onFlashcardCreated: (type, fields) => this.onFlashcardCreated(type, fields) })));
    }
    onTextHighlightReset() {
        const { annotation, doc } = this.props;
        setTimeout(() => {
            TextHighlights_1.TextHighlights.resetRevisedText(doc.docMeta, annotation.pageMeta, annotation.id);
            this.toggleActiveInputComponent('none');
        }, 1);
    }
    onTextHighlightEdited(text) {
        const { annotation, doc } = this.props;
        setTimeout(() => {
            TextHighlights_1.TextHighlights.setRevisedText(doc.docMeta, annotation.pageMeta, annotation.id, text);
            this.toggleActiveInputComponent('none');
        }, 1);
    }
    onColor(color) {
        setTimeout(() => {
            const { annotation } = this.props;
            if (annotation.annotationType === AnnotationType_1.AnnotationType.TEXT_HIGHLIGHT) {
                TextHighlights_1.TextHighlights.update(annotation.id, annotation.docMeta, annotation.pageMeta, { color });
            }
            if (annotation.annotationType === AnnotationType_1.AnnotationType.AREA_HIGHLIGHT) {
                AreaHighlights_1.AreaHighlights.update(annotation.id, annotation.docMeta, annotation.pageMeta, { color });
            }
        }, 1);
    }
    onDelete(annotation) {
        Preconditions_1.Preconditions.assertPresent(annotation);
        switch (annotation.annotationType) {
            case AnnotationType_1.AnnotationType.TEXT_HIGHLIGHT:
                delete annotation.pageMeta.textHighlights[annotation.id];
                break;
            case AnnotationType_1.AnnotationType.AREA_HIGHLIGHT:
                delete annotation.pageMeta.areaHighlights[annotation.id];
                break;
            default:
                break;
        }
    }
    onJumpToContext(annotation) {
        AnnotationSidebars_1.AnnotationSidebars.scrollToAnnotation(annotation.id, annotation.pageNum);
    }
    toggleActiveInputComponent(activeInputComponent) {
        this.setState({
            activeInputComponent: this.state.activeInputComponent === activeInputComponent ? 'none' : activeInputComponent
        });
    }
    onCommentCreated(html, existingComment) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'annotations', action: 'comment-created' });
        CommentActions_1.CommentActions.create(this.props.doc.docMeta, this.props.annotation, html);
        this.setState({
            activeInputComponent: 'none'
        });
    }
    onFlashcardCreated(type, fields) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'annotations', action: 'flashcard-created' });
        FlashcardActions_1.FlashcardActions.create(this.props.annotation, type, fields);
        this.setState({
            activeInputComponent: 'none'
        });
    }
}
exports.AnnotationControlBar = AnnotationControlBar;
//# sourceMappingURL=data:application/json;base64,