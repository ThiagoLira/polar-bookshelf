"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const reactstrap_1 = require("reactstrap");
const Logger_1 = require("polar-shared/src/logger/Logger");
const Dialogs_1 = require("../ui/dialogs/Dialogs");
const Functions_1 = require("polar-shared/src/util/Functions");
const DropdownIcon_1 = require("../ui/standard_icons/DropdownIcon");
const log = Logger_1.Logger.create();
class Styles {
}
Styles.DropdownMenu = {
    zIndex: 999,
    fontSize: '16px'
};
Styles.DropdownItem = {
    fontSize: '15px'
};
class AnnotationDropdown extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.open = false;
        this.toggle = this.toggle.bind(this);
        this.onDelete = this.onDelete.bind(this);
        this.onCreateComment = this.onCreateComment.bind(this);
        this.onCreateFlashcard = this.onCreateFlashcard.bind(this);
        this.onJumpToContext = this.onJumpToContext.bind(this);
        this.state = {
            open: this.open,
        };
    }
    render() {
        const toggleID = this.props.id + '-dropdown-toggle';
        return (React.createElement("div", { className: "text-right" },
            React.createElement(reactstrap_1.Dropdown, { id: this.props.id, isOpen: this.state.open, toggle: this.toggle },
                React.createElement(reactstrap_1.DropdownToggle, { color: "light", disabled: this.props.disabled, className: "doc-dropdown-button btn text-muted pl-1 pr-1", id: toggleID },
                    React.createElement(DropdownIcon_1.DropdownIcon, null)),
                React.createElement(reactstrap_1.DropdownMenu, { right: true },
                    React.createElement(reactstrap_1.DropdownItem, { style: Styles.DropdownItem, onClick: () => this.onCreateComment() }, "Create comment"),
                    React.createElement(reactstrap_1.DropdownItem, { style: Styles.DropdownItem, onClick: () => this.onCreateFlashcard() }, "Create flashcard"),
                    React.createElement(reactstrap_1.DropdownItem, { style: Styles.DropdownItem, onClick: () => this.onJumpToContext() }, "Jump to context"),
                    React.createElement(reactstrap_1.DropdownItem, { divider: true }),
                    React.createElement(reactstrap_1.DropdownItem, { style: Styles.DropdownItem, className: "text-danger", disabled: this.props.annotation.immutable, onClick: () => this.onDeleteSelected() }, "Delete")))));
    }
    onDeleteSelected() {
        Dialogs_1.Dialogs.confirm({
            title: "Are you sure you want to delete this annotation? ",
            subtitle: "This will also delete all associated comments and flashcards.",
            type: 'danger',
            onCancel: Functions_1.NULL_FUNCTION,
            onConfirm: () => this.onDelete()
        });
    }
    onCreateComment() {
        this.props.onCreateComment(this.props.annotation);
    }
    onCreateFlashcard() {
        this.props.onCreateFlashcard(this.props.annotation);
    }
    onJumpToContext() {
        this.props.onJumpToContext(this.props.annotation);
    }
    onDelete() {
        this.props.onDelete(this.props.annotation);
    }
    toggle() {
        this.open = !this.state.open;
        this.refresh();
    }
    refresh() {
        this.setState({
            open: this.open,
        });
    }
}
exports.AnnotationDropdown = AnnotationDropdown;
//# sourceMappingURL=data:application/json;base64,