"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("polar-shared/src/logger/Logger");
const FrameEvents_1 = require("./FrameEvents");
const Events_1 = require("../../util/dom/Events");
const IFrames_1 = require("../../util/dom/IFrames");
const DocumentReadyStates_1 = require("../../util/dom/DocumentReadyStates");
const log = Logger_1.Logger.create();
class EventBridge {
    constructor(targetElement, iframe) {
        this.targetElement = targetElement;
        this.iframe = iframe;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.iframe.parentElement) {
                throw new Error("No parent for iframe");
            }
            if (!this.iframe.contentDocument) {
                throw new Error("No contentDocument for iframe");
            }
            yield IFrames_1.IFrames.waitForContentDocument(this.iframe);
            yield DocumentReadyStates_1.DocumentReadyStates.waitFor(this.iframe.contentDocument, 'interactive');
            this.addListeners(this.iframe);
            log.info("Event bridge started on: ", this.iframe.contentDocument.location.href);
        });
    }
    addListeners(iframe) {
        if (!iframe.contentDocument) {
            return;
        }
        iframe.contentDocument.defaultView.addEventListener("wheel", event => {
            event.preventDefault();
            document.querySelector(".polar-viewer")
                .scrollBy(event.deltaX, event.deltaY);
            return false;
        }, { passive: false });
        iframe.contentDocument.defaultView.addEventListener('mouseup', event => this.forwardWindowEvent(event));
        iframe.contentDocument.body.addEventListener("keyup", this.forwardKeyboardEvent.bind(this));
        iframe.contentDocument.body.addEventListener("keydown", this.forwardKeyboardEvent.bind(this));
        iframe.contentDocument.body.addEventListener("mouseup", this.forwardMouseEvent.bind(this));
        iframe.contentDocument.body.addEventListener("mousedown", this.forwardMouseEvent.bind(this));
        iframe.contentDocument.body.addEventListener('contextmenu', (event) => {
            this.forwardMouseEvent(event);
            event.preventDefault();
        });
        iframe.contentDocument.body.addEventListener("click", event => {
            const anchor = Events_1.Events.getAnchor(event.target);
            if (anchor) {
                log.info("Link click prevented.");
                event.preventDefault();
                const href = anchor.href;
                if (href && (href.startsWith("http:") || href.startsWith("https:"))) {
                    document.location.href = href;
                }
            }
            else {
                this.forwardMouseEvent(event);
            }
        });
    }
    forwardMouseEvent(event) {
        const eventPoints = FrameEvents_1.FrameEvents.calculatePoints(this.iframe, event);
        const newEvent = new event.constructor(event.type, event);
        Object.defineProperty(newEvent, "pageX", { value: eventPoints.page.x });
        Object.defineProperty(newEvent, "pageY", { value: eventPoints.page.y });
        Object.defineProperty(newEvent, "clientX", { value: eventPoints.client.x });
        Object.defineProperty(newEvent, "clientY", { value: eventPoints.client.y });
        Object.defineProperty(newEvent, "offsetX", { value: eventPoints.offset.x });
        Object.defineProperty(newEvent, "offsetY", { value: eventPoints.offset.y });
        if (newEvent.pageX !== eventPoints.page.x) {
            throw new Error("Define of properties failed");
        }
        this.targetElement.dispatchEvent(newEvent);
    }
    forwardKeyboardEvent(event) {
        const newEvent = new event.constructor(event.type, event);
        this.targetElement.dispatchEvent(newEvent);
    }
    forwardWindowEvent(event) {
        const newEvent = new event.constructor(event.type, event);
        window.dispatchEvent(newEvent);
    }
}
exports.EventBridge = EventBridge;
//# sourceMappingURL=data:application/json;base64,