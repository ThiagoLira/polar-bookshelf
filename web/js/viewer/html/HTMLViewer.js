"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const JQuery_1 = __importDefault(require("../../ui/JQuery"));
const Viewer_1 = require("../Viewer");
const Logger_1 = require("polar-shared/src/logger/Logger");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const LinkHandler_1 = require("./LinkHandler");
const Services_1 = require("../../util/services/Services");
const HTMLFormat_1 = require("../../docformat/HTMLFormat");
const FrameInitializer_1 = require("./FrameInitializer");
const BackgroundFrameResizer_1 = require("./BackgroundFrameResizer");
const Descriptors_1 = require("./Descriptors");
const IFrameWatcher_1 = require("./IFrameWatcher");
const FrameResizer_1 = require("./FrameResizer");
const RendererAnalytics_1 = require("../../ga/RendererAnalytics");
const DocMetas_1 = require("../../metadata/DocMetas");
const DirectPHZLoader_1 = require("../../phz/DirectPHZLoader");
const Optional_1 = require("polar-shared/src/util/ts/Optional");
const IFrames_1 = require("../../util/dom/IFrames");
const log = Logger_1.Logger.create();
const ENABLE_VIDEO = true;
class HTMLViewer extends Viewer_1.Viewer {
    constructor(model) {
        super();
        this.content = document.createElement('iframe');
        this.contentParent = document.createElement('div');
        this.textLayer = document.createElement('div');
        this.model = model;
    }
    start() {
        log.info("Starting HTMLViewer");
        this.content = document.querySelector("#content");
        this.contentParent = document.querySelector("#content-parent");
        this.textLayer = document.querySelector(".textLayer");
        this.htmlFormat = new HTMLFormat_1.HTMLFormat();
        RendererAnalytics_1.RendererAnalytics.pageview("/htmlviewer");
        this.loadStrategy = LoadStrategies.loadStrategy();
        const onReady = () => __awaiter(this, void 0, void 0, function* () {
            this._captureBrowserZoom();
            const docDetail = this._docDetail = yield this.doLoad();
            this.frameResizer = new FrameResizer_1.FrameResizer(this.contentParent, this.content);
            const onIFrameLoaded = () => {
                log.info("Loading page now...");
                const backgroundFrameResizer = new BackgroundFrameResizer_1.BackgroundFrameResizer(this.contentParent, this.content, () => this.onResized());
                backgroundFrameResizer.start();
                const frameInitializer = new FrameInitializer_1.FrameInitializer(this.content, this.textLayer);
                frameInitializer.start();
                this.startHandlingZoom();
                this.configurePageDimensions(docDetail);
            };
            new IFrameWatcher_1.IFrameWatcher(this.content, () => onIFrameLoaded())
                .start();
            window.addEventListener("resize", () => {
                this.doZoom();
                this.frameResizer.resize(true)
                    .catch(err => log.error("Unable to resize: ", err));
            });
            yield Services_1.Services.start(new LinkHandler_1.LinkHandler(this.content));
        });
        JQuery_1.default(document).ready(() => {
            onReady()
                .catch(err => log.error("Could not load doc: ", err));
        });
    }
    onResized() {
        const docMeta = this.model.docMeta;
        const pageMeta = DocMetas_1.DocMetas.getPageMeta(docMeta, 1);
        if (!pageMeta.pageInfo.dimensions) {
            const width = this.content.offsetWidth;
            const height = this.content.offsetHeight;
            pageMeta.pageInfo.dimensions = { width, height };
        }
    }
    _captureBrowserZoom() {
        JQuery_1.default(document).keydown(function (event) {
            if (event.ctrlKey && (event.which === 61 ||
                event.which === 107 ||
                event.which === 173 ||
                event.which === 109 ||
                event.which === 187 ||
                event.which === 189)) {
                log.info("Browser zoom detected. Preventing.");
                event.preventDefault();
            }
        });
        JQuery_1.default(window).bind('mousewheel DOMMouseScroll', function (event) {
            if (event.ctrlKey) {
                log.info("Browser zoom detected. Preventing.");
                event.preventDefault();
            }
        });
    }
    startHandlingZoom() {
        JQuery_1.default(".polar-zoom-select")
            .change(() => {
            this.doZoom();
        });
    }
    configurePageDimensions(docDetail) {
        log.info("Loading with descriptor: ", docDetail.metadata);
        const docDimensions = Descriptors_1.Descriptors.calculateDocDimensions(docDetail.metadata);
        log.info(`Configuring page with width=${docDimensions.width} and minHeight=${docDimensions.minHeight}`);
        document.querySelectorAll("#content-parent, .page, iframe").forEach(element => {
            element.style.width = `${docDimensions.width}px`;
        });
        document.querySelectorAll(".page, iframe").forEach((element) => {
            const htmlElement = element;
            const minHeightElement = htmlElement.parentElement;
            minHeightElement.style.minHeight = `${docDimensions.minHeight}px`;
        });
    }
    doZoom() {
        const selectElement = document.querySelector(".polar-zoom-select");
        if (selectElement === null) {
            console.log("No select");
            return;
        }
        const zoom = selectElement.options[selectElement.selectedIndex].value;
        this.changeScale(parseFloat(zoom));
        selectElement.blur();
    }
    changeScale(scale) {
        log.info("Changing scale to: " + scale);
        this._changeScaleMeta(scale);
        this._changeScale(scale);
        this._removeAnnotations();
        this._signalScale();
    }
    _changeScaleMeta(scale) {
        const metaElement = Preconditions_1.notNull(document.querySelector("meta[name='polar-scale']"));
        metaElement.setAttribute("content", `${scale}`);
    }
    _changeScale(scale) {
        const contentParent = Preconditions_1.notNull(document.querySelector("#content-parent"));
        contentParent.style.transform = `scale(${scale})`;
        const height = parseInt(this.content.getAttribute('data-original-height'));
        const newHeight = height * scale;
        this.frameResizer.resize(true, newHeight)
            .catch(err => log.error("Unable to change scale: ", err));
    }
    _removeAnnotations() {
        document.querySelectorAll(".page .annotation").forEach(function (annotation) {
            annotation.parentElement.removeChild(annotation);
        });
    }
    _signalScale() {
        log.info("HTMLViewer: Signaling rescale.");
        const pageElement = Preconditions_1.notNull(document.querySelector(".page"));
        pageElement.setAttribute("data-loaded", "true");
    }
    doLoad() {
        return __awaiter(this, void 0, void 0, function* () {
            const file = Optional_1.Optional.of(this.getFile()).getOrElse("example1.html");
            const toStrategyHandler = () => {
                if (this.loadStrategy === 'portable') {
                    return new PortableStrategyHandler();
                }
                else {
                    return new ElectronStrategyHandler();
                }
            };
            const strategyHandler = toStrategyHandler();
            const docDetail = yield strategyHandler.doLoad(this.content, file);
            const fingerprint = docDetail.fingerprint;
            if (!fingerprint) {
                throw new Error("Fingerprint is required");
            }
            this.htmlFormat.setCurrentDocFingerprint(fingerprint);
            return docDetail;
        });
    }
    static createYoutubeEmbed(url, content) {
        const DEFAULT_WIDTH = 560;
        const DEFAULT_HEIGHT = 315;
        const width = content.contentDocument.body.offsetWidth;
        const height = (DEFAULT_HEIGHT / DEFAULT_WIDTH) * width;
        const u = new URL(url);
        const videoID = u.searchParams.get('v');
        return `<iframe width="${width}" height="${height}" src="https://www.youtube.com/embed/${videoID}" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>`;
    }
    docDetail() {
        return this._docDetail;
    }
}
exports.HTMLViewer = HTMLViewer;
class LoadStrategies {
    static loadStrategy() {
        const url = new URL(window.location.href);
        const strategy = url.searchParams.get("strategy");
        return Optional_1.Optional.of(strategy).getOrElse("electron");
    }
}
class StrategyHandler {
    getFilename() {
        const url = new URL(window.location.href);
        return Preconditions_1.notNull(url.searchParams.get("filename"));
    }
    getFingerprint() {
        const url = new URL(window.location.href);
        return Preconditions_1.notNull(url.searchParams.get("fingerprint"));
    }
}
class PortableStrategyHandler extends StrategyHandler {
    doLoad(content, file) {
        return __awaiter(this, void 0, void 0, function* () {
            const loader = yield DirectPHZLoader_1.DirectPHZLoader.create(file);
            const captured = yield loader.load();
            if (!captured.isPresent()) {
                throw new Error("Unable to load page (no captured data)");
            }
            const url = captured.get().url;
            IFrames_1.IFrames.markLoadedManually(content, url);
            return {
                fingerprint: this.getFingerprint(),
                title: captured.get().title,
                url,
                nrPages: 1,
                filename: this.getFilename(),
                metadata: captured.get()
            };
        });
    }
}
class ElectronStrategyHandler extends StrategyHandler {
    doLoad(content, file) {
        return __awaiter(this, void 0, void 0, function* () {
            content.src = file;
            return this.docDetail();
        });
    }
    docDetail() {
        const url = new URL(window.location.href);
        const metadata = JSON.parse(Preconditions_1.notNull(url.searchParams.get("descriptor")));
        return {
            fingerprint: this.getFingerprint(),
            title: metadata.title,
            url: metadata.url,
            nrPages: 1,
            filename: this.getFilename(),
            metadata
        };
    }
}
//# sourceMappingURL=data:application/json;base64,