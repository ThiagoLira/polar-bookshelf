"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TraceListeners_1 = require("./TraceListeners");
const TraceHandler_1 = require("./TraceHandler");
const ObjectPaths_1 = require("./ObjectPaths");
const Paths_1 = require("polar-shared/src/util/Paths");
const Objects_1 = require("polar-shared/src/util/Objects");
let sequence = 0;
class Proxies {
    static create(target, traceListeners, opts) {
        if (typeof target !== "object") {
            throw new Error("Only works on objects: " + typeof target);
        }
        opts = Objects_1.Objects.defaults(opts, {
            pathPrefix: ""
        });
        if (!traceListeners) {
            traceListeners = [];
        }
        const traceListenersArray = TraceListeners_1.TraceListeners.asArray(traceListeners);
        const objectPathEntries = ObjectPaths_1.ObjectPaths.recurse(target);
        let root;
        objectPathEntries.forEach((objectPathEntry) => {
            let path = objectPathEntry.path;
            if (opts.pathPrefix && opts.pathPrefix !== "") {
                path = Paths_1.Paths.create(opts.pathPrefix, objectPathEntry.path);
            }
            const proxy = Proxies.trace(path, objectPathEntry.value, traceListenersArray);
            if (objectPathEntry.parent != null) {
                objectPathEntry.parent[objectPathEntry.parentKey] = proxy;
            }
            else {
                root = proxy;
            }
        });
        return root;
    }
    static trace(path, value, traceListeners) {
        if (typeof value !== "object") {
            throw new Error("We can only trace object types.");
        }
        traceListeners = TraceListeners_1.TraceListeners.asArray(traceListeners);
        if (Object.isFrozen(value)) {
            return value;
        }
        const traceIdentifier = sequence++;
        const traceHandler = new TraceHandler_1.TraceHandler(path, traceListeners, value, traceIdentifier, Proxies);
        const privateMembers = [];
        if (value.addTraceListener) {
            value.addTraceListener(traceListeners);
        }
        else {
            Object.defineProperty(value, "addTraceListener", {
                value: traceHandler.addTraceListener.bind(traceHandler),
                enumerable: false,
                writable: false
            });
        }
        return new Proxy(value, traceHandler);
    }
}
exports.Proxies = Proxies;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJveGllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlByb3hpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFTQSxxREFBZ0Q7QUFDaEQsaURBQTRDO0FBQzVDLCtDQUEwQztBQUMxQyx1REFBa0Q7QUFHbEQsMkRBQXNEO0FBTXRELElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQztBQUVqQixNQUFhLE9BQU87SUFPVCxNQUFNLENBQUMsTUFBTSxDQUFJLE1BQVMsRUFDVCxjQUFxRixFQUNyRixJQUFVO1FBRTlCLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO1lBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLEdBQUcsT0FBTyxNQUFNLENBQUMsQ0FBQztTQUM5RDtRQUVELElBQUksR0FBRyxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7WUFDMUIsVUFBVSxFQUFFLEVBQUU7U0FDakIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNqQixjQUFjLEdBQUcsRUFBRSxDQUFDO1NBQ3ZCO1FBRUQsTUFBTSxtQkFBbUIsR0FBRywrQkFBYyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVuRSxNQUFNLGlCQUFpQixHQUFHLHlCQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXRELElBQUksSUFBUyxDQUFDO1FBRWQsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsZUFBZSxFQUFFLEVBQUU7WUFFMUMsSUFBSSxJQUFJLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQztZQUVoQyxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxFQUFFLEVBQUU7Z0JBQzNDLElBQUksR0FBRyxhQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzlEO1lBRUQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLEtBQUssRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1lBSTlFLElBQUksZUFBZSxDQUFDLE1BQU0sSUFBSSxJQUFJLEVBQUU7Z0JBQ2hDLGVBQWUsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLFNBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQzthQUM5RDtpQkFBTTtnQkFDSCxJQUFJLEdBQUcsS0FBSyxDQUFDO2FBQ2hCO1FBRUwsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQztJQUVoQixDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFZLEVBQUUsS0FBVSxFQUFFLGNBQW1CO1FBRTdELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzNCLE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztTQUN0RDtRQUVELGNBQWMsR0FBRywrQkFBYyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV4RCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFReEIsT0FBTyxLQUFLLENBQUM7U0FFaEI7UUFFRCxNQUFNLGVBQWUsR0FBRyxRQUFRLEVBQUUsQ0FBQztRQU1uQyxNQUFNLFlBQVksR0FBRyxJQUFJLDJCQUFZLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBUzdGLE1BQU0sY0FBYyxHQUFHLEVBa0J0QixDQUFDO1FBY0YsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLEVBQUU7WUFDeEIsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQzFDO2FBQU07WUFDSCxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxrQkFBa0IsRUFBRTtnQkFDN0MsS0FBSyxFQUFFLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO2dCQUN2RCxVQUFVLEVBQUUsS0FBSztnQkFDakIsUUFBUSxFQUFFLEtBQUs7YUFDbEIsQ0FBQyxDQUFDO1NBQ047UUFFRCxPQUFPLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztJQUUxQyxDQUFDO0NBRUo7QUF0SUQsMEJBc0lDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBGcmFtZXdvcmsgdG8gY3JlYXRlIGxpc3RlbmVycyB0byB3YXRjaCBjaGFuZ2VzIGluIGRpY3Rpb25hcmllcy4gIFdlIGNhblxuICogY2hhbmdlIHRoZXNlIGludG8gb2JzZXJ2YWJsZXMgaWYgd2Ugd2FudCBieSBtYWtpbmcgdGhlbSBzdHJlYW1zIG9mIFNFVCBhbmRcbiAqIERFTEVURSBvcGVyYXRpb25zIGJ1dCBzaW5jZSB3ZSdyZSBub3QgcmVhbGx5IHVzaW5nIFJ4SlMgb3IgYW55dGhpbmcgb2YgdGhlXG4gKiBzb3J0IHlldCBvdXIgb3B0aW9ucyBhcmUgb3Blbi5cbiAqXG4gKiBOb3RlIHRoYXQgT2JqZWN0Lm9ic2VydmUgYW5kIG90aGVyIGNoYW5nZXMgd2VyZSBhcHBhcmVudGx5IG5ldmVyIHJhdGlmaWVkXG4gKiBzbyB3ZSBoYXZlIHRvIHVzZSBQcm94eSBvYmplY3RzIHRvIGltcGxlbWVudCB0aGlzIGZ1bmN0aW9uYWxpdHkuXG4gKi9cbmltcG9ydCB7VHJhY2VMaXN0ZW5lcnN9IGZyb20gXCIuL1RyYWNlTGlzdGVuZXJzXCI7XG5pbXBvcnQge1RyYWNlSGFuZGxlcn0gZnJvbSBcIi4vVHJhY2VIYW5kbGVyXCI7XG5pbXBvcnQge09iamVjdFBhdGhzfSBmcm9tIFwiLi9PYmplY3RQYXRoc1wiO1xuaW1wb3J0IHtQYXRoc30gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvdXRpbC9QYXRoc1wiO1xuaW1wb3J0IHtUcmFjZUxpc3RlbmVyLCBUcmFjZUxpc3RlbmVyRnVuY3Rpb259IGZyb20gJy4vVHJhY2VMaXN0ZW5lcic7XG5pbXBvcnQge1RyYWNlRXZlbnR9IGZyb20gJy4vVHJhY2VFdmVudCc7XG5pbXBvcnQge09iamVjdHN9IGZyb20gXCJwb2xhci1zaGFyZWQvc3JjL3V0aWwvT2JqZWN0c1wiO1xuXG4vKipcbiAqIEEgc2VxdWVuY2UgaWRlbnRpZmllciBnZW5lcmF0b3Igc28gdGhhdCB3ZSBjYW4gYXNzaWduIG9iamVjdHMgYSB1bmlxdWUgdmFsdWVcbiAqIHdoaWxlIHdlJ3JlIGVudW1lcmF0aW5nIHRoZW0uXG4gKi9cbmxldCBzZXF1ZW5jZSA9IDA7XG5cbmV4cG9ydCBjbGFzcyBQcm94aWVzIHtcblxuICAgIC8qKlxuICAgICAqIERlZXBseSB0cmFjZSB0aGUgZ2l2ZW4gb2JqZWN0IGFuZCBjYWxsIGJhY2sgb24gdGhlIHRyYWNlTGlzdGVuZXIgZXZlcnlcbiAgICAgKiB0aW1lIHdlIG5vdGljZSBhIG11dGF0aW9uLiAgVGhlIHRyYWNlIGxpc3RlbmVyIHJlY2VpdmVzIHRoZSBmb2xsb3dpbmdcbiAgICAgKiBhcmd1bWVudHM6XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGU8VD4odGFyZ2V0OiBULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNlTGlzdGVuZXJzPzogVHJhY2VMaXN0ZW5lciB8IFRyYWNlTGlzdGVuZXJGdW5jdGlvbiB8IFJlYWRvbmx5QXJyYXk8VHJhY2VMaXN0ZW5lcj4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cz86IGFueSk6IFQge1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IHdvcmtzIG9uIG9iamVjdHM6IFwiICsgdHlwZW9mIHRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRzID0gT2JqZWN0cy5kZWZhdWx0cyhvcHRzLCB7XG4gICAgICAgICAgICBwYXRoUHJlZml4OiBcIlwiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghdHJhY2VMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIHRyYWNlTGlzdGVuZXJzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0cmFjZUxpc3RlbmVyc0FycmF5ID0gVHJhY2VMaXN0ZW5lcnMuYXNBcnJheSh0cmFjZUxpc3RlbmVycyk7XG5cbiAgICAgICAgY29uc3Qgb2JqZWN0UGF0aEVudHJpZXMgPSBPYmplY3RQYXRocy5yZWN1cnNlKHRhcmdldCk7XG5cbiAgICAgICAgbGV0IHJvb3Q6IGFueTtcblxuICAgICAgICBvYmplY3RQYXRoRW50cmllcy5mb3JFYWNoKChvYmplY3RQYXRoRW50cnkpID0+IHtcblxuICAgICAgICAgICAgbGV0IHBhdGggPSBvYmplY3RQYXRoRW50cnkucGF0aDtcblxuICAgICAgICAgICAgaWYgKG9wdHMucGF0aFByZWZpeCAmJiBvcHRzLnBhdGhQcmVmaXggIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBwYXRoID0gUGF0aHMuY3JlYXRlKG9wdHMucGF0aFByZWZpeCwgb2JqZWN0UGF0aEVudHJ5LnBhdGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBwcm94eSA9IFByb3hpZXMudHJhY2UocGF0aCwgb2JqZWN0UGF0aEVudHJ5LnZhbHVlLCB0cmFjZUxpc3RlbmVyc0FycmF5KTtcblxuICAgICAgICAgICAgLy8gcmVwbGFjZSB0aGUgb2JqZWN0IGtleSBpbiB0aGUgcGFyZW50IHdpdGggYSBuZXcgb2JqZWN0IHRoYXQgaXNcbiAgICAgICAgICAgIC8vIHRyYWNlZC5cbiAgICAgICAgICAgIGlmIChvYmplY3RQYXRoRW50cnkucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvYmplY3RQYXRoRW50cnkucGFyZW50W29iamVjdFBhdGhFbnRyeS5wYXJlbnRLZXkhXSA9IHByb3h5O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByb290ID0gcHJveHk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJvb3Q7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHRyYWNlKHBhdGg6IHN0cmluZywgdmFsdWU6IGFueSwgdHJhY2VMaXN0ZW5lcnM6IGFueSkge1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldlIGNhbiBvbmx5IHRyYWNlIG9iamVjdCB0eXBlcy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB0cmFjZUxpc3RlbmVycyA9IFRyYWNlTGlzdGVuZXJzLmFzQXJyYXkodHJhY2VMaXN0ZW5lcnMpO1xuXG4gICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4odmFsdWUpKSB7XG5cbiAgICAgICAgICAgIC8vIERvIG5vdCBoYW5kbGUgZnJvemVuIG9iamVjdHMgYnV0IG1pZ2h0IGhhdmUgdG8gaW4gdGhlIGZ1dHVyZSBmb3JcbiAgICAgICAgICAgIC8vIHRoZSBpbml0aWFsIHZhbHVlLlxuXG4gICAgICAgICAgICAvLyBUT0RPOiBpdCdzIHByb2JhYmx5IGJlc3QgdG8gdGhyb3cgYW4gZXJyb3IgaGVyZSBiZWNhdXNlIHdlJ3ZlXG4gICAgICAgICAgICAvLyBiZWVuIGFza2VkIHRvIHRyYWNlIGJ1dCB3ZSdyZSBub3QgdHJhY2luZy4gIFRoaXMgaXMgYW4gQVBJIGZsYXcuXG5cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcblxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJhY2VJZGVudGlmaWVyID0gc2VxdWVuY2UrKztcblxuICAgICAgICAvLyBmb3IgdGhpcyB0byB3b3JrLCBJIG5lZWQgdG8ga2VlcCB0cmFjayBvZiBBTEwgVHJhY2VIYW5kbGVycyBpbiB0aGVcbiAgICAgICAgLy8gb2JqZWN0IGl0c2VsZiBieSBwb3NzaWJseSBoYXZpbmcgYSBfX3RyYWNlSGFuZGxlcnMgb3Igc29tZSBvdGhlclxuICAgICAgICAvLyBzdHJhdGVneSBvciBfX3BhdGhzIGFuZCB0aGVuIGRpc3BhdGNoIHRoYXQgd2F5Li4uXG5cbiAgICAgICAgY29uc3QgdHJhY2VIYW5kbGVyID0gbmV3IFRyYWNlSGFuZGxlcihwYXRoLCB0cmFjZUxpc3RlbmVycywgdmFsdWUsIHRyYWNlSWRlbnRpZmllciwgUHJveGllcyk7XG5cbiAgICAgICAgLy8gVE9ETzogY291bGQgSSBzdG9yZSB0aGVzZSBpbiB0aGUgVHJhY2VIYW5kbGVyIGFuZCBub3QgaW4gdGhlIHZhbHVlP1xuICAgICAgICAvL1xuICAgICAgICAvLyBzaW5jZSB3ZSBoYXZlIG9uZSBUcmFjZUhhbmRsZXIgcGVyIHBhdGggdGhpcyBtaWdodCB3b3JrIGJ1dCBJIHdvdWxkXG4gICAgICAgIC8vIG5lZWQgdG8gZmlndXJlIG91dCBob3cgdG8gZ2V0IHRoZSByaWdodCB2YWx1ZSBmcm9tIHRoZSBUcmFjZUhhbmRsZXIuXG4gICAgICAgIC8vIEkgdGhpbmsgSSBjYW4gZG8gdGhpcyBieSBjdXN0b20gaGFuZGxpbmcgdGhlIGdldCgpIFByb3h5IGFuZCB0aGVuXG4gICAgICAgIC8vIHJldHVybmluZyBfX3RyYWNlSWRlbnRpZmllciBvciBfX3RyYWNlTGlzdGVuZXJzIGJhc2VkIG9uIHRoZSBjYWxsZXIuXG5cbiAgICAgICAgY29uc3QgcHJpdmF0ZU1lbWJlcnMgPSBbXG5cbiAgICAgICAgICAgIC8vIHRoZSBfX3RyYWNlSWRlbnRpZmllciBpcyBhIHVuaXF1ZSBrZXkgZm9yIHRoZSBvYmplY3Qgd2hpY2ggd2VcbiAgICAgICAgICAgIC8vIHVzZVxuICAgICAgICAgICAgLy8gdG8gaWRlbnRpZnkgd2hpY2ggb25lIGlzIGJlaW5nIHRyYWNlZC4gIFRoaXMgd2F5IHdlIGVzc2VudGlhbGx5XG4gICAgICAgICAgICAvLyBoYXZlIGEgcG9pbnRlciB3ZSBjYW4gdXNlIHRvIHdvcmsgd2l0aCB0aGUgb2JqZWN0IGRpcmVjdGx5LlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIHsgbmFtZTogXCJfX3RyYWNlSWRlbnRpZmllclwiLCB2YWx1ZTogdHJhY2VJZGVudGlmaWVyIH0sXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gLy8ga2VlcCB0aGUgdHJhY2VMaXN0ZW5lciByZWdpc3RlcmVkIHdpdGggdGhlIG9iamVjdCBzbyB0aGF0IElcbiAgICAgICAgICAgIC8vIGNhbiAvLyB2ZXJpZnkgdGhhdCB0aGUgb2JqZWN0IHdlJ3JlIHdvcmtpbmcgd2l0aCBpcyBhY3R1YWxseVxuICAgICAgICAgICAgLy8gYmVpbmcgdXNlZCAvLyB3aXRoIHRoZSBzYW1lIHRyYWNlIGFuZCBub3QgYmVpbmcgcmUtdHJhY2VkIGJ5XG4gICAgICAgICAgICAvLyBzb21ldGhpbmcgZWxzZS4gIHsgbmFtZTogXCJfX3RyYWNlTGlzdGVuZXJzXCIsIHZhbHVlOlxuICAgICAgICAgICAgLy8gdHJhY2VMaXN0ZW5lcnMgfSxcblxuICAgICAgICAgICAgLy8ga2VlcCB0aGUgcGF0aCB0byB0aGlzIG9iamVjdCBmb3IgZGVidWcgcHVycG9zZXMuXG4gICAgICAgICAgICAvLyB7IG5hbWU6IFwiX19wYXRoXCIsIHZhbHVlOiBwYXRoIH1cblxuICAgICAgICBdO1xuXG4gICAgICAgIC8vIHByaXZhdGVNZW1iZXJzLmZvckVhY2gocHJpdmF0ZU1lbWJlciA9PiB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICBpZighIChwcml2YXRlTWVtYmVyLm5hbWUgaW4gdmFsdWUpKSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAgICAgLy8gdGhlIF9fdHJhY2VJZGVudGlmaWVyIGlzIGEgdW5pcXVlIGtleSBmb3IgdGhlIG9iamVjdFxuICAgICAgICAvLyB3aGljaCB3ZSB1c2UgLy8gdG8gaWRlbnRpZnkgd2hpY2ggb25lIGlzIGJlaW5nIHRyYWNlZC4gIFRoaXMgd2F5IHdlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IC8vIGhhdmUgYSBwb2ludGVyIHdlIGNhbiB1c2UgdG8gd29yayB3aXRoIHRoZSBvYmplY3RcbiAgICAgICAgLy8gZGlyZWN0bHkuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsdWUsIHByaXZhdGVNZW1iZXIubmFtZSwgeyB2YWx1ZTpcbiAgICAgICAgLy8gcHJpdmF0ZU1lbWJlci52YWx1ZSwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSB9KTsgIH0gIH0pO1xuXG4gICAgICAgIC8vIFRPRE86IGRvIHRoaXMgaW4gdGhlIFRyYWNlSGFuZGxlciBnZXQgbWV0aG9kP1xuXG4gICAgICAgIGlmICh2YWx1ZS5hZGRUcmFjZUxpc3RlbmVyKSB7XG4gICAgICAgICAgICB2YWx1ZS5hZGRUcmFjZUxpc3RlbmVyKHRyYWNlTGlzdGVuZXJzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgXCJhZGRUcmFjZUxpc3RlbmVyXCIsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdHJhY2VIYW5kbGVyLmFkZFRyYWNlTGlzdGVuZXIuYmluZCh0cmFjZUhhbmRsZXIpLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHZhbHVlLCB0cmFjZUhhbmRsZXIpO1xuXG4gICAgfVxuXG59XG5cblxuIl19