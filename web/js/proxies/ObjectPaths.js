"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ObjectPathEntry_1 = require("./ObjectPathEntry");
const Paths_1 = require("polar-shared/src/util/Paths");
class ObjectPaths {
    static recurse(obj) {
        let result = [];
        ObjectPaths._recurse("/", obj, null, null, result);
        result.sort(function (val0, val1) {
            return val0.path.localeCompare(val1.path);
        });
        return result;
    }
    static _recurse(path, obj, parent, parentKey, result) {
        if (typeof obj !== "object") {
            throw new Error("We can only recurse on object types.");
        }
        result.push(new ObjectPathEntry_1.ObjectPathEntry(path, obj, parent, parentKey));
        for (let childKey in obj) {
            if (obj.hasOwnProperty(childKey)) {
                let childVal = obj[childKey];
                if (childVal && typeof childVal === "object") {
                    let childPath = Paths_1.Paths.create(path, childKey);
                    ObjectPaths._recurse(childPath, childVal, obj, childKey, result);
                }
            }
        }
    }
}
exports.ObjectPaths = ObjectPaths;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JqZWN0UGF0aHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJPYmplY3RQYXRocy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVdBLHVEQUFrRDtBQUNsRCx1REFBa0Q7QUFFbEQsTUFBYSxXQUFXO0lBRXBCLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBUTtRQUVuQixJQUFJLE1BQU0sR0FBc0IsRUFBRSxDQUFDO1FBRW5DLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBS25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLEVBQUUsSUFBSTtZQUM1QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQVksRUFDWixHQUFRLEVBQ1IsTUFBVyxFQUNYLFNBQXdCLEVBQ3hCLE1BQXlCO1FBRXJDLElBQUcsT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztTQUMzRDtRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxpQ0FBZSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFL0QsS0FBSyxJQUFJLFFBQVEsSUFBSSxHQUFHLEVBQUU7WUFFdEIsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUU5QixJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBRTdCLElBQUksUUFBUSxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtvQkFDMUMsSUFBSSxTQUFTLEdBQUcsYUFBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBQzdDLFdBQVcsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2lCQUNwRTthQUVKO1NBRUo7SUFFTCxDQUFDO0NBRUo7QUFoREQsa0NBZ0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIHNpbXBsZSBtYXAgb2YgdGhlIG9iamVjdCBhbmQgdGhlIHBhdGggdG8gZ2V0IHRvIHRoYXQgb2JqZWN0LlxuICpcbiAqIFdlJ3JlIGFibGUgd2FsayBhbiBlbnRpcmUgb2JqZWN0IGRlY29tcG9zaW5nIGl0IGludG8gYSBsaXN0IG9mXG4gKiBPYmplY3RQYXRoRW50cnkgb2JqZWN0cyB3aGljaCBtYWtlIGl0IGVhc2llciB0byB0ZXN0IGFuZCBkZWJ1ZyByYXRoZXIgdGhhblxuICogZGVhbGluZyB3aXRoIHJlY3Vyc2l2ZSBvYmplY3RzLlxuICpcbiAqIFRoZSBvdXRwdXQgd2lsbCBiZSBhIGxpc3Qgb2YgcGF0aCBvYmplY3RzLlxuICpcbiAqXG4gKi9cbmltcG9ydCB7T2JqZWN0UGF0aEVudHJ5fSBmcm9tICcuL09iamVjdFBhdGhFbnRyeSc7XG5pbXBvcnQge1BhdGhzfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3V0aWwvUGF0aHMnO1xuXG5leHBvcnQgY2xhc3MgT2JqZWN0UGF0aHMge1xuXG4gICAgc3RhdGljIHJlY3Vyc2Uob2JqOiBhbnkpIHtcblxuICAgICAgICBsZXQgcmVzdWx0OiBPYmplY3RQYXRoRW50cnlbXSA9IFtdO1xuXG4gICAgICAgIE9iamVjdFBhdGhzLl9yZWN1cnNlKFwiL1wiLCBvYmosIG51bGwsIG51bGwsIHJlc3VsdCk7XG5cbiAgICAgICAgLy8gc29ydCB0aGUgcmVzdWx0IHRvIGdpdmUgdGhlIGRhdGEgYmFjayBzb3J0ZWQgYnkgcGF0aC4gIEl0J3NcbiAgICAgICAgLy8gZGV0ZXJtaW5pc3RpYyBlaXRoZXIgd2F5IGJ1dCBpdHMgbmljZSBmb3IgdGVzdGluZyB0byBoYXZlIHRoZW0gc29ydGVkXG4gICAgICAgIC8vIGJ5IHBhdGhcbiAgICAgICAgcmVzdWx0LnNvcnQoZnVuY3Rpb24gKHZhbDAsIHZhbDEpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWwwLnBhdGgubG9jYWxlQ29tcGFyZSh2YWwxLnBhdGgpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgfVxuXG4gICAgc3RhdGljIF9yZWN1cnNlKHBhdGg6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgb2JqOiBhbnksXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogYW55LFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRLZXk6IHN0cmluZyB8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogT2JqZWN0UGF0aEVudHJ5W10pIHtcblxuICAgICAgICBpZih0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXZSBjYW4gb25seSByZWN1cnNlIG9uIG9iamVjdCB0eXBlcy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQucHVzaChuZXcgT2JqZWN0UGF0aEVudHJ5KHBhdGgsIG9iaiwgcGFyZW50LCBwYXJlbnRLZXkpKTtcblxuICAgICAgICBmb3IgKGxldCBjaGlsZEtleSBpbiBvYmopIHtcblxuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShjaGlsZEtleSkpIHtcblxuICAgICAgICAgICAgICAgIGxldCBjaGlsZFZhbCA9IG9ialtjaGlsZEtleV07XG5cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZFBhdGggPSBQYXRocy5jcmVhdGUocGF0aCwgY2hpbGRLZXkpO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3RQYXRocy5fcmVjdXJzZShjaGlsZFBhdGgsIGNoaWxkVmFsLCBvYmosIGNoaWxkS2V5LCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH1cblxufVxuIl19