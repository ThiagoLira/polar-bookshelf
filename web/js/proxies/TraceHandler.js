"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TraceListenerExecutor_1 = require("./TraceListenerExecutor");
const TraceEvent_1 = require("./TraceEvent");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const MutationType_1 = require("./MutationType");
const FunctionalInterface_1 = require("../util/FunctionalInterface");
const Reactor_1 = require("../reactor/Reactor");
const TraceListeners_1 = require("./TraceListeners");
const Paths_1 = require("polar-shared/src/util/Paths");
const Dictionaries_1 = require("polar-shared/src/util/Dictionaries");
const EVENT_NAME = "onMutation";
class TraceHandler {
    constructor(path, traceListeners, target, traceIdentifier, proxies) {
        this.path = Preconditions_1.Preconditions.assertPresent(path, "path");
        this.target = Preconditions_1.Preconditions.assertPresent(target, "target");
        this.traceIdentifier = Preconditions_1.Preconditions.assertPresent(traceIdentifier, "traceIdentifier");
        this.proxies = Preconditions_1.Preconditions.assertPresent(proxies, "proxies");
        this.reactor = new Reactor_1.Reactor();
        this.reactor.registerEvent(EVENT_NAME);
        this.addTraceListener(traceListeners);
    }
    addTraceListener(traceListeners, options = {}) {
        const traceListenerArray = [...TraceListeners_1.TraceListeners.asArray(traceListeners)];
        let eventName = EVENT_NAME;
        if (options.property) {
            eventName = `${eventName}:${options.property}`;
        }
        traceListenerArray.forEach(traceListener => {
            traceListener = FunctionalInterface_1.FunctionalInterface.create(EVENT_NAME, traceListener);
            this.reactor.addEventListener(eventName, (traceEvent) => {
                traceListener.onMutation(traceEvent);
            });
        });
        return new TraceListenerExecutor_1.TraceListenerExecutor(traceListenerArray, this);
    }
    getTraceListeners() {
        return this.reactor.getEventListeners(EVENT_NAME);
    }
    get(target, property, receiver) {
        switch (property) {
            case "__path":
                return this.path;
            case "__traceIdentifier":
                return this.traceIdentifier;
            case "__traceListeners":
                return this.getTraceListeners();
            default:
                return Reflect.get(target, property, receiver);
        }
    }
    set(target, property, value, receiver) {
        value = Dictionaries_1.Dictionaries.deepCopy(value);
        const traceListeners = this.reactor.getEventListeners(EVENT_NAME);
        if (typeof value === "object") {
            const pathPrefix = Paths_1.Paths.create(this.path, property);
            value = this.proxies.create(value, traceListeners, { pathPrefix });
        }
        const previousValue = target[property];
        const result = Reflect.set(target, property, value, receiver);
        const traceEvent = new TraceEvent_1.TraceEvent({
            path: this.path,
            mutationType: MutationType_1.MutationType.SET,
            target,
            property,
            value,
            previousValue
        });
        this.reactor.dispatchEvent(EVENT_NAME, traceEvent);
        return result;
    }
    deleteProperty(target, property) {
        const previousValue = target[property];
        const result = Reflect.deleteProperty(target, property);
        const traceEvent = new TraceEvent_1.TraceEvent({
            path: this.path,
            mutationType: MutationType_1.MutationType.DELETE,
            target,
            property,
            value: undefined,
            previousValue
        });
        this.reactor.dispatchEvent(EVENT_NAME, traceEvent);
        return result;
    }
}
exports.TraceHandler = TraceHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhY2VIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVHJhY2VIYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsbUVBQThEO0FBQzlELDZDQUF3QztBQUN4QyxrRUFBNkQ7QUFDN0QsaURBQTRDO0FBQzVDLHFFQUFnRTtBQUNoRSxnREFBMkM7QUFDM0MscURBQWdEO0FBQ2hELHVEQUFrRDtBQUVsRCxxRUFBZ0U7QUFFaEUsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDO0FBRWhDLE1BQWEsWUFBWTtJQXVCckIsWUFBWSxJQUFZLEVBQ1osY0FBK0IsRUFDL0IsTUFBVyxFQUNYLGVBQXVCLEVBQ3ZCLE9BQWdCO1FBRXhCLElBQUksQ0FBQyxJQUFJLEdBQUcsNkJBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxNQUFNLEdBQUcsNkJBQWEsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxlQUFlLEdBQUcsNkJBQWEsQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLE9BQU8sR0FBRyw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFL0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGlCQUFPLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFMUMsQ0FBQztJQU9NLGdCQUFnQixDQUFDLGNBQStDLEVBQUUsVUFBZSxFQUFFO1FBRXRGLE1BQU0sa0JBQWtCLEdBQ0EsQ0FBQyxHQUFHLCtCQUFjLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFFcEUsSUFBSSxT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QUUsMkJBQVksQ0FBQyxNQUFNO1lBQ2pDLE1BQU07WUFDTixRQUFRO1lBQ1IsS0FBSyxFQUFFLFNBQVM7WUFDaEIsYUFBYTtTQUNoQixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFbkQsT0FBTyxNQUFNLENBQUM7SUFFbEIsQ0FBQztDQUVKO0FBM0pELG9DQTJKQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UHJveGllc30gZnJvbSBcIi4vUHJveGllc1wiO1xuXG5pbXBvcnQge1RyYWNlTGlzdGVuZXJFeGVjdXRvcn0gZnJvbSBcIi4vVHJhY2VMaXN0ZW5lckV4ZWN1dG9yXCI7XG5pbXBvcnQge1RyYWNlRXZlbnR9IGZyb20gXCIuL1RyYWNlRXZlbnRcIjtcbmltcG9ydCB7UHJlY29uZGl0aW9uc30gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9QcmVjb25kaXRpb25zJztcbmltcG9ydCB7TXV0YXRpb25UeXBlfSBmcm9tIFwiLi9NdXRhdGlvblR5cGVcIjtcbmltcG9ydCB7RnVuY3Rpb25hbEludGVyZmFjZX0gZnJvbSBcIi4uL3V0aWwvRnVuY3Rpb25hbEludGVyZmFjZVwiO1xuaW1wb3J0IHtSZWFjdG9yfSBmcm9tIFwiLi4vcmVhY3Rvci9SZWFjdG9yXCI7XG5pbXBvcnQge1RyYWNlTGlzdGVuZXJzfSBmcm9tIFwiLi9UcmFjZUxpc3RlbmVyc1wiO1xuaW1wb3J0IHtQYXRoc30gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvdXRpbC9QYXRoc1wiO1xuaW1wb3J0IHtUcmFjZUxpc3RlbmVyfSBmcm9tICcuL1RyYWNlTGlzdGVuZXInO1xuaW1wb3J0IHtEaWN0aW9uYXJpZXN9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvdXRpbC9EaWN0aW9uYXJpZXMnO1xuXG5jb25zdCBFVkVOVF9OQU1FID0gXCJvbk11dGF0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBUcmFjZUhhbmRsZXIge1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXRoOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0YXJnZXQ6IGFueTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRyYWNlSWRlbnRpZmllcjogbnVtYmVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJveGllczogUHJveGllcztcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlYWN0b3I6IFJlYWN0b3I7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoIFRoZSBwYXRoIHRvIHRoaXMgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYWNlTGlzdGVuZXJzIFRoZSBtYWluIFRyYWNlTGlzdGVuZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIG9iamVjdCB0aGF0IGlzIHRoZSB0YXJnZXQgb2YgdGhpcyBoYW5kbGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYWNlSWRlbnRpZmllciB7bnVtYmVyfSBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIGhhbmRsZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJveGllcyB7UHJveGllc30gY2xhc3MgZm9yIGNyZWF0aW5nIG5ldyB0cmFjZWQgb2JqZWN0cy5cbiAgICAgKiBSZWZlcmVuY2VkIGhlcmUgdG8gYXZvaWQgY3ljbGljYWwgZGVwZW5kZW5jaWVzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhdGg6IHN0cmluZyxcbiAgICAgICAgICAgICAgICB0cmFjZUxpc3RlbmVyczogVHJhY2VMaXN0ZW5lcltdLFxuICAgICAgICAgICAgICAgIHRhcmdldDogYW55LFxuICAgICAgICAgICAgICAgIHRyYWNlSWRlbnRpZmllcjogbnVtYmVyLFxuICAgICAgICAgICAgICAgIHByb3hpZXM6IFByb3hpZXMpIHtcblxuICAgICAgICB0aGlzLnBhdGggPSBQcmVjb25kaXRpb25zLmFzc2VydFByZXNlbnQocGF0aCwgXCJwYXRoXCIpO1xuICAgICAgICB0aGlzLnRhcmdldCA9IFByZWNvbmRpdGlvbnMuYXNzZXJ0UHJlc2VudCh0YXJnZXQsIFwidGFyZ2V0XCIpO1xuICAgICAgICB0aGlzLnRyYWNlSWRlbnRpZmllciA9IFByZWNvbmRpdGlvbnMuYXNzZXJ0UHJlc2VudCh0cmFjZUlkZW50aWZpZXIsIFwidHJhY2VJZGVudGlmaWVyXCIpO1xuICAgICAgICB0aGlzLnByb3hpZXMgPSBQcmVjb25kaXRpb25zLmFzc2VydFByZXNlbnQocHJveGllcywgXCJwcm94aWVzXCIpO1xuXG4gICAgICAgIHRoaXMucmVhY3RvciA9IG5ldyBSZWFjdG9yKCk7XG4gICAgICAgIHRoaXMucmVhY3Rvci5yZWdpc3RlckV2ZW50KEVWRU5UX05BTUUpO1xuICAgICAgICB0aGlzLmFkZFRyYWNlTGlzdGVuZXIodHJhY2VMaXN0ZW5lcnMpO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgbGlzdGVuZXIgdG8gYSBzcGVjaWZpYyBvYmplY3QuIEJ5IGRlZmF1bHQgd2UgcmV0dXJuIGFsbCBldmVudHMgYnV0XG4gICAgICogeW91IGNhbiBhbHNvIG5hcnJvdyBpdCBkb3duIHRvIGEgc3BlY2lmaWMgcHJvcGVydHkgYnkgc3BlY2lmeWluZyBhIGdpdmVuXG4gICAgICogcHJvcGVydHkgdG8gbW9uaXRvci5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkVHJhY2VMaXN0ZW5lcih0cmFjZUxpc3RlbmVyczogVHJhY2VMaXN0ZW5lciB8IFRyYWNlTGlzdGVuZXJbXSwgb3B0aW9uczogYW55ID0ge30pIHtcblxuICAgICAgICBjb25zdCB0cmFjZUxpc3RlbmVyQXJyYXk6IFRyYWNlTGlzdGVuZXJbXVxuICAgICAgICAgICAgPSA8VHJhY2VMaXN0ZW5lcltdPiBbLi4uVHJhY2VMaXN0ZW5lcnMuYXNBcnJheSh0cmFjZUxpc3RlbmVycyldO1xuXG4gICAgICAgIGxldCBldmVudE5hbWUgPSBFVkVOVF9OQU1FO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnByb3BlcnR5KSB7XG4gICAgICAgICAgICBldmVudE5hbWUgPSBgJHtldmVudE5hbWV9OiR7b3B0aW9ucy5wcm9wZXJ0eX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhY2VMaXN0ZW5lckFycmF5LmZvckVhY2godHJhY2VMaXN0ZW5lciA9PiB7XG5cbiAgICAgICAgICAgIHRyYWNlTGlzdGVuZXIgPSBGdW5jdGlvbmFsSW50ZXJmYWNlLmNyZWF0ZShFVkVOVF9OQU1FLCB0cmFjZUxpc3RlbmVyKTtcblxuICAgICAgICAgICAgdGhpcy5yZWFjdG9yLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCAodHJhY2VFdmVudDogVHJhY2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyYWNlTGlzdGVuZXIub25NdXRhdGlvbih0cmFjZUV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBuZXcgVHJhY2VMaXN0ZW5lckV4ZWN1dG9yKHRyYWNlTGlzdGVuZXJBcnJheSwgdGhpcyk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VHJhY2VMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWN0b3IuZ2V0RXZlbnRMaXN0ZW5lcnMoRVZFTlRfTkFNRSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCh0YXJnZXQ6IGFueSwgcHJvcGVydHk6IHN0cmluZywgcmVjZWl2ZXI6IGFueSkge1xuXG4gICAgICAgIHN3aXRjaCAocHJvcGVydHkpIHtcblxuICAgICAgICAgICAgLy8gcHJvdmlkZSBzb21lIGRlZmF1bHQgLyBoaWRkZW4gZmllbGRzIHRoYXQgY2FuIGJlIHVzZWQgZm9yIGRlYnVnXG4gICAgICAgICAgICAvLyByZWFzb25zLlxuXG4gICAgICAgICAgICBjYXNlIFwiX19wYXRoXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aDtcblxuICAgICAgICAgICAgY2FzZSBcIl9fdHJhY2VJZGVudGlmaWVyXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhY2VJZGVudGlmaWVyO1xuXG4gICAgICAgICAgICBjYXNlIFwiX190cmFjZUxpc3RlbmVyc1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFRyYWNlTGlzdGVuZXJzKCk7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcHVibGljIHNldCh0YXJnZXQ6IGFueSwgcHJvcGVydHk6IHN0cmluZywgdmFsdWU6IGFueSwgcmVjZWl2ZXI6IGFueSkge1xuXG4gICAgICAgIHZhbHVlID0gRGljdGlvbmFyaWVzLmRlZXBDb3B5KHZhbHVlKTtcblxuICAgICAgICAvLyBUT0RPOiBiZWZvcmUgd2UgY2hhbmdlIHRoZSB2YWx1ZSwgYWxzbyB0cmFjZSB0aGUgbmV3IGlucHV0IHZhbHVlc1xuICAgICAgICAvLyBpZiB3ZSBhcmUgZ2l2ZW4gYW4gb2JqZWN0LlxuXG4gICAgICAgIGNvbnN0IHRyYWNlTGlzdGVuZXJzID0gdGhpcy5yZWFjdG9yLmdldEV2ZW50TGlzdGVuZXJzKEVWRU5UX05BTUUpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcblxuICAgICAgICAgICAgLy8gd2UgaGF2ZSB0byBwcm94eSB0aGlzIG9iamVjdCBzaW5jZSBpdCB3b3VsZCBtZWFuIGFkZGluZyBhIG5ld1xuICAgICAgICAgICAgLy8gc3ViLWdyYXBoIHRoYXQgaXNuJ3QgdHJhY2VkLlxuXG4gICAgICAgICAgICBjb25zdCBwYXRoUHJlZml4ID0gUGF0aHMuY3JlYXRlKHRoaXMucGF0aCwgcHJvcGVydHkpO1xuXG4gICAgICAgICAgICB2YWx1ZSA9ICg8YW55PiB0aGlzLnByb3hpZXMpLmNyZWF0ZSh2YWx1ZSwgdHJhY2VMaXN0ZW5lcnMsIHtwYXRoUHJlZml4fSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSB0YXJnZXRbcHJvcGVydHldO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCByZWNlaXZlcik7XG5cbiAgICAgICAgY29uc3QgdHJhY2VFdmVudCA9IG5ldyBUcmFjZUV2ZW50KHtcbiAgICAgICAgICAgIHBhdGg6IHRoaXMucGF0aCxcbiAgICAgICAgICAgIG11dGF0aW9uVHlwZTogTXV0YXRpb25UeXBlLlNFVCxcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBwcmV2aW91c1ZhbHVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucmVhY3Rvci5kaXNwYXRjaEV2ZW50KEVWRU5UX05BTUUsIHRyYWNlRXZlbnQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgfVxuXG4gICAgcHVibGljIGRlbGV0ZVByb3BlcnR5KHRhcmdldDogYW55LCBwcm9wZXJ0eTogc3RyaW5nKSB7XG5cbiAgICAgICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IHRhcmdldFtwcm9wZXJ0eV07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KTtcblxuICAgICAgICBjb25zdCB0cmFjZUV2ZW50ID0gbmV3IFRyYWNlRXZlbnQoe1xuICAgICAgICAgICAgcGF0aDogdGhpcy5wYXRoLFxuICAgICAgICAgICAgbXV0YXRpb25UeXBlOiBNdXRhdGlvblR5cGUuREVMRVRFLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcHJldmlvdXNWYWx1ZVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJlYWN0b3IuZGlzcGF0Y2hFdmVudChFVkVOVF9OQU1FLCB0cmFjZUV2ZW50KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgfVxuXG59XG4iXX0=