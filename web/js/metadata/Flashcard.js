"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const VersionedObject_1 = require("./VersionedObject");
const Preconditions_1 = require("polar-shared/src/Preconditions");
class Flashcard extends VersionedObject_1.VersionedObject {
    constructor(template) {
        super(template);
        this.type = template.type;
        this.fields = template.fields;
        this.archetype = template.archetype;
        this.guid = template.guid;
        this.init(template);
    }
    validate() {
        super.validate();
        Preconditions_1.Preconditions.assertPresent(this.id, "id");
        Preconditions_1.Preconditions.assertPresent(this.type, "type");
        Preconditions_1.Preconditions.assertPresent(this.guid, "guid");
        Preconditions_1.Preconditions.assertPresent(this.fields, "fields");
        Preconditions_1.Preconditions.assertPresent(this.archetype, "archetype");
    }
    static newInstance(id, guid, created, lastUpdated, type, fields, archetype, ref) {
        const result = new Flashcard({
            id, guid, created, lastUpdated, type, fields, archetype, ref
        });
        return Object.freeze(result);
    }
}
exports.Flashcard = Flashcard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmxhc2hjYXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRmxhc2hjYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsdURBQWtEO0FBRWxELGtFQUE2RDtBQUs3RCxNQUFhLFNBQVUsU0FBUSxpQ0FBZTtJQVcxQyxZQUFtQixRQUFtQjtRQUVsQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEIsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUM7UUFDcEMsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBRTFCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFeEIsQ0FBQztJQUVNLFFBQVE7UUFFWCxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFakIsNkJBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzQyw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLDZCQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0MsNkJBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNuRCw2QkFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBSTdELENBQUM7SUFFTSxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQVUsRUFDVixJQUFZLEVBQ1osT0FBMEIsRUFDMUIsV0FBOEIsRUFDOUIsSUFBbUIsRUFDbkIsTUFBNkIsRUFDN0IsU0FBaUIsRUFDakIsR0FBUTtRQUU5QixNQUFNLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FBYTtZQUNyQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRztTQUMvRCxDQUFDLENBQUM7UUFFSCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFakMsQ0FBQztDQUVKO0FBdkRELDhCQXVEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Rmxhc2hjYXJkVHlwZX0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9GbGFzaGNhcmRUeXBlJztcbmltcG9ydCB7VmVyc2lvbmVkT2JqZWN0fSBmcm9tICcuL1ZlcnNpb25lZE9iamVjdCc7XG5pbXBvcnQge1RleHR9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvbWV0YWRhdGEvVGV4dCc7XG5pbXBvcnQge1ByZWNvbmRpdGlvbnN9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvUHJlY29uZGl0aW9ucyc7XG5pbXBvcnQge0lTT0RhdGVUaW1lU3RyaW5nfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL21ldGFkYXRhL0lTT0RhdGVUaW1lU3RyaW5ncyc7XG5pbXBvcnQge1JlZn0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9SZWZzJztcbmltcG9ydCB7SUZsYXNoY2FyZH0gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvbWV0YWRhdGEvSUZsYXNoY2FyZFwiO1xuXG5leHBvcnQgY2xhc3MgRmxhc2hjYXJkIGV4dGVuZHMgVmVyc2lvbmVkT2JqZWN0IGltcGxlbWVudHMgSUZsYXNoY2FyZCB7XG5cbiAgICBwdWJsaWMgdHlwZTogRmxhc2hjYXJkVHlwZTtcblxuICAgIHB1YmxpYyBmaWVsZHM6IHtba2V5OiBzdHJpbmddOiBUZXh0fSA7XG5cbiAgICBwdWJsaWMgYXJjaGV0eXBlOiBzdHJpbmc7XG5cbiAgICAvLyBUT0RPOiB3ZSBkb24ndCBoYXZlIGEgd2F5IHJpZ2h0IG5vdyB0byBhdHRhY2ggdGhlc2UgdG8gc3BlY2lmaWNcbiAgICAvLyBhbm5vdGF0aW9uc1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHRlbXBsYXRlOiBGbGFzaGNhcmQpIHtcblxuICAgICAgICBzdXBlcih0ZW1wbGF0ZSk7XG5cbiAgICAgICAgdGhpcy50eXBlID0gdGVtcGxhdGUudHlwZTtcbiAgICAgICAgdGhpcy5maWVsZHMgPSB0ZW1wbGF0ZS5maWVsZHM7XG4gICAgICAgIHRoaXMuYXJjaGV0eXBlID0gdGVtcGxhdGUuYXJjaGV0eXBlO1xuICAgICAgICB0aGlzLmd1aWQgPSB0ZW1wbGF0ZS5ndWlkO1xuXG4gICAgICAgIHRoaXMuaW5pdCh0ZW1wbGF0ZSk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgdmFsaWRhdGUoKTogdm9pZCB7XG5cbiAgICAgICAgc3VwZXIudmFsaWRhdGUoKTtcblxuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydFByZXNlbnQodGhpcy5pZCwgXCJpZFwiKTtcbiAgICAgICAgUHJlY29uZGl0aW9ucy5hc3NlcnRQcmVzZW50KHRoaXMudHlwZSwgXCJ0eXBlXCIpO1xuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydFByZXNlbnQodGhpcy5ndWlkLCBcImd1aWRcIik7XG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0UHJlc2VudCh0aGlzLmZpZWxkcywgXCJmaWVsZHNcIik7XG4gICAgICAgIFByZWNvbmRpdGlvbnMuYXNzZXJ0UHJlc2VudCh0aGlzLmFyY2hldHlwZSwgXCJhcmNoZXR5cGVcIik7XG5cbiAgICAgICAgLy8gVE9ETzogYXNzZXJ0IHRoYXQgdGhlIGd1aWQgaXMgbm90IG51bGwuXG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG5ld0luc3RhbmNlKGlkOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndWlkOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkOiBJU09EYXRlVGltZVN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RVcGRhdGVkOiBJU09EYXRlVGltZVN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEZsYXNoY2FyZFR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZHM6IHtba2V5OiBzdHJpbmddOiBUZXh0fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY2hldHlwZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiBSZWYpOiBSZWFkb25seTxGbGFzaGNhcmQ+IHtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgRmxhc2hjYXJkKDxGbGFzaGNhcmQ+IHtcbiAgICAgICAgICAgIGlkLCBndWlkLCBjcmVhdGVkLCBsYXN0VXBkYXRlZCwgdHlwZSwgZmllbGRzLCBhcmNoZXR5cGUsIHJlZlxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShyZXN1bHQpO1xuXG4gICAgfVxuXG59XG5cbiJdfQ==