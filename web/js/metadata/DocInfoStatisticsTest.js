"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Assertions_1 = require("../test/Assertions");
const DocMetas_1 = require("./DocMetas");
const TestingTime_1 = require("polar-shared/src/test/TestingTime");
const DocInfoStatistics_1 = require("./DocInfoStatistics");
describe('DocInfoStatistics', function () {
    describe('computeDocumentsAddedRate', function () {
        it("basic", function () {
            TestingTime_1.TestingTime.freeze();
            const docInfos = [];
            docInfos.push(DocMetas_1.MockDocMetas.createMockDocMeta('0x001').docInfo);
            docInfos.push(DocMetas_1.MockDocMetas.createMockDocMeta('0x002').docInfo);
            docInfos.push(DocMetas_1.MockDocMetas.createMockDocMeta('0x003').docInfo);
            TestingTime_1.TestingTime.forward(24 * 60 * 60 * 1000);
            docInfos.push(DocMetas_1.MockDocMetas.createMockDocMeta('0x004').docInfo);
            docInfos.push(DocMetas_1.MockDocMetas.createMockDocMeta('0x005').docInfo);
            TestingTime_1.TestingTime.forward(24 * 60 * 60 * 1000);
            docInfos.push(DocMetas_1.MockDocMetas.createMockDocMeta('0x006').docInfo);
            docInfos.push(DocMetas_1.MockDocMetas.createMockDocMeta('0x007').docInfo);
            const dateStats = DocInfoStatistics_1.DocInfoStatistics.computeDocumentsAddedRate(docInfos);
            Assertions_1.assertJSON(dateStats, [
                {
                    "date": "2012-03-02",
                    "value": 3
                },
                {
                    "date": "2012-03-03",
                    "value": 2
                },
                {
                    "date": "2012-03-04",
                    "value": 2
                }
            ]);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jSW5mb1N0YXRpc3RpY3NUZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRG9jSW5mb1N0YXRpc3RpY3NUZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQThDO0FBQzlDLHlDQUF3QztBQUN4QyxtRUFBOEQ7QUFDOUQsMkRBQXNEO0FBRXRELFFBQVEsQ0FBQyxtQkFBbUIsRUFBRTtJQUUxQixRQUFRLENBQUMsMkJBQTJCLEVBQUU7UUFFbEMsRUFBRSxDQUFDLE9BQU8sRUFBRTtZQUVSLHlCQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7WUFFckIsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBRXBCLFFBQVEsQ0FBQyxJQUFJLENBQUMsdUJBQVksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMvRCxRQUFRLENBQUMsSUFBSSxDQUFDLHVCQUFZLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDL0QsUUFBUSxDQUFDLElBQUksQ0FBQyx1QkFBWSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRS9ELHlCQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQ3pDLFFBQVEsQ0FBQyxJQUFJLENBQUMsdUJBQVksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMvRCxRQUFRLENBQUMsSUFBSSxDQUFDLHVCQUFZLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFL0QseUJBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFDekMsUUFBUSxDQUFDLElBQUksQ0FBQyx1QkFBWSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQy9ELFFBQVEsQ0FBQyxJQUFJLENBQUMsdUJBQVksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUUvRCxNQUFNLFNBQVMsR0FBRyxxQ0FBaUIsQ0FBQyx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUV4RSx1QkFBVSxDQUFDLFNBQVMsRUFBRTtnQkFDbEI7b0JBQ0ksTUFBTSxFQUFFLFlBQVk7b0JBQ3BCLE9BQU8sRUFBRSxDQUFDO2lCQUNiO2dCQUNEO29CQUNJLE1BQU0sRUFBRSxZQUFZO29CQUNwQixPQUFPLEVBQUUsQ0FBQztpQkFDYjtnQkFDRDtvQkFDSSxNQUFNLEVBQUUsWUFBWTtvQkFDcEIsT0FBTyxFQUFFLENBQUM7aUJBQ2I7YUFDSixDQUFDLENBQUM7UUFFUCxDQUFDLENBQUMsQ0FBQztJQUVQLENBQUMsQ0FBQyxDQUFDO0FBRVAsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2Fzc2VydEpTT059IGZyb20gJy4uL3Rlc3QvQXNzZXJ0aW9ucyc7XG5pbXBvcnQge01vY2tEb2NNZXRhc30gZnJvbSAnLi9Eb2NNZXRhcyc7XG5pbXBvcnQge1Rlc3RpbmdUaW1lfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3Rlc3QvVGVzdGluZ1RpbWUnO1xuaW1wb3J0IHtEb2NJbmZvU3RhdGlzdGljc30gZnJvbSAnLi9Eb2NJbmZvU3RhdGlzdGljcyc7XG5cbmRlc2NyaWJlKCdEb2NJbmZvU3RhdGlzdGljcycsIGZ1bmN0aW9uKCkge1xuXG4gICAgZGVzY3JpYmUoJ2NvbXB1dGVEb2N1bWVudHNBZGRlZFJhdGUnLCBmdW5jdGlvbigpIHtcblxuICAgICAgICBpdChcImJhc2ljXCIsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBUZXN0aW5nVGltZS5mcmVlemUoKTtcblxuICAgICAgICAgICAgY29uc3QgZG9jSW5mb3MgPSBbXTtcblxuICAgICAgICAgICAgZG9jSW5mb3MucHVzaChNb2NrRG9jTWV0YXMuY3JlYXRlTW9ja0RvY01ldGEoJzB4MDAxJykuZG9jSW5mbyk7XG4gICAgICAgICAgICBkb2NJbmZvcy5wdXNoKE1vY2tEb2NNZXRhcy5jcmVhdGVNb2NrRG9jTWV0YSgnMHgwMDInKS5kb2NJbmZvKTtcbiAgICAgICAgICAgIGRvY0luZm9zLnB1c2goTW9ja0RvY01ldGFzLmNyZWF0ZU1vY2tEb2NNZXRhKCcweDAwMycpLmRvY0luZm8pO1xuXG4gICAgICAgICAgICBUZXN0aW5nVGltZS5mb3J3YXJkKDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgICAgICAgZG9jSW5mb3MucHVzaChNb2NrRG9jTWV0YXMuY3JlYXRlTW9ja0RvY01ldGEoJzB4MDA0JykuZG9jSW5mbyk7XG4gICAgICAgICAgICBkb2NJbmZvcy5wdXNoKE1vY2tEb2NNZXRhcy5jcmVhdGVNb2NrRG9jTWV0YSgnMHgwMDUnKS5kb2NJbmZvKTtcblxuICAgICAgICAgICAgVGVzdGluZ1RpbWUuZm9yd2FyZCgyNCAqIDYwICogNjAgKiAxMDAwKTtcbiAgICAgICAgICAgIGRvY0luZm9zLnB1c2goTW9ja0RvY01ldGFzLmNyZWF0ZU1vY2tEb2NNZXRhKCcweDAwNicpLmRvY0luZm8pO1xuICAgICAgICAgICAgZG9jSW5mb3MucHVzaChNb2NrRG9jTWV0YXMuY3JlYXRlTW9ja0RvY01ldGEoJzB4MDA3JykuZG9jSW5mbyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGVTdGF0cyA9IERvY0luZm9TdGF0aXN0aWNzLmNvbXB1dGVEb2N1bWVudHNBZGRlZFJhdGUoZG9jSW5mb3MpO1xuXG4gICAgICAgICAgICBhc3NlcnRKU09OKGRhdGVTdGF0cywgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJkYXRlXCI6IFwiMjAxMi0wMy0wMlwiLFxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IDNcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJkYXRlXCI6IFwiMjAxMi0wMy0wM1wiLFxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IDJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJkYXRlXCI6IFwiMjAxMi0wMy0wNFwiLFxuICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IDJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdKTtcblxuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG59KTtcbiJdfQ==