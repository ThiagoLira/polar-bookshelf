"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Hashcodes_1 = require("polar-shared/src/util/Hashcodes");
const TextHighlight_1 = require("./TextHighlight");
const ISODateTimeStrings_1 = require("polar-shared/src/metadata/ISODateTimeStrings");
const Arrays_1 = require("polar-shared/src/util/Arrays");
class TextHighlightRecords {
    static create(rects, textSelections, text, color = 'yellow') {
        const id = Hashcodes_1.Hashcodes.createID(rects);
        const created = ISODateTimeStrings_1.ISODateTimeStrings.create();
        const lastUpdated = created;
        const textHighlight = new TextHighlight_1.TextHighlight({
            id,
            guid: id,
            created,
            lastUpdated,
            rects: Arrays_1.Arrays.toDict(rects),
            textSelections: Arrays_1.Arrays.toDict(textSelections),
            text,
            images: {},
            notes: {},
            questions: {},
            flashcards: {},
            color
        });
        return { id, value: textHighlight };
    }
}
exports.TextHighlightRecords = TextHighlightRecords;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dEhpZ2hsaWdodFJlY29yZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJUZXh0SGlnaGxpZ2h0UmVjb3Jkcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtEQUEwRDtBQUMxRCxtREFBOEM7QUFHOUMscUZBQWdGO0FBSWhGLHlEQUFvRDtBQUVwRCxNQUFhLG9CQUFvQjtJQVd0QixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQWMsRUFDZCxjQUEyQixFQUMzQixJQUFVLEVBQ1YsUUFBd0IsUUFBUTtRQUVqRCxNQUFNLEVBQUUsR0FBRyxxQkFBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVyQyxNQUFNLE9BQU8sR0FBRyx1Q0FBa0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM1QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUM7UUFFNUIsTUFBTSxhQUFhLEdBQUcsSUFBSSw2QkFBYSxDQUFDO1lBQ3BDLEVBQUU7WUFDRixJQUFJLEVBQUUsRUFBRTtZQUNSLE9BQU87WUFDUCxXQUFXO1lBQ1gsS0FBSyxFQUFFLGVBQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQzNCLGNBQWMsRUFBRSxlQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQztZQUM3QyxJQUFJO1lBQ0osTUFBTSxFQUFFLEVBQUU7WUFDVixLQUFLLEVBQUUsRUFBRTtZQUNULFNBQVMsRUFBRSxFQUFFO1lBQ2IsVUFBVSxFQUFFLEVBQUU7WUFDZCxLQUFLO1NBQ1IsQ0FBQyxDQUFDO1FBRUgsT0FBTyxFQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFDLENBQUM7SUFFdEMsQ0FBQztDQUVKO0FBeENELG9EQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SGFzaGNvZGVzfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3V0aWwvSGFzaGNvZGVzJztcbmltcG9ydCB7VGV4dEhpZ2hsaWdodH0gZnJvbSAnLi9UZXh0SGlnaGxpZ2h0JztcbmltcG9ydCB7VGV4dH0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9UZXh0JztcbmltcG9ydCB7SVJlY3R9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvdXRpbC9yZWN0cy9JUmVjdCc7XG5pbXBvcnQge0lTT0RhdGVUaW1lU3RyaW5nc30gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9JU09EYXRlVGltZVN0cmluZ3MnO1xuaW1wb3J0IHtJVGV4dEhpZ2hsaWdodH0gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvbWV0YWRhdGEvSVRleHRIaWdobGlnaHRcIjtcbmltcG9ydCB7SGlnaGxpZ2h0Q29sb3J9IGZyb20gXCJwb2xhci1zaGFyZWQvc3JjL21ldGFkYXRhL0lCYXNlSGlnaGxpZ2h0XCI7XG5pbXBvcnQge0lUZXh0UmVjdH0gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvbWV0YWRhdGEvSVRleHRSZWN0XCI7XG5pbXBvcnQge0FycmF5c30gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvdXRpbC9BcnJheXNcIjtcblxuZXhwb3J0IGNsYXNzIFRleHRIaWdobGlnaHRSZWNvcmRzIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIFRleHRIaWdobGlnaHQgYnkgc3BlY2lmeWluZyBhbGwgcmVxdWlyZWQgcm93cy5cbiAgICAgKlxuICAgICAqIFdlIGFsc28gYXV0b21hdGljYWxseSBhc3NpZ24gdGhlIGNyZWF0ZWQgYW5kIGxhc3RVcGRhdGVkIHZhbHVlcyBvZiB0aGlzXG4gICAgICogb2JqZWN0IGFzIHdlJ3JlIHdvcmtpbmcgd2l0aCBpdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gYW4gb2JqZWN0IHdpdGggYW4gXCJpZFwiIGZvciBhIHVuaXF1ZSBoYXNoIGFuZCBhIFwidmFsdWVcIiBvZiB0aGVcbiAgICAgKiBUZXh0SGlnaGxpZ2h0IHRvIHVzZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShyZWN0czogSVJlY3RbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0U2VsZWN0aW9uczogSVRleHRSZWN0W10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogSGlnaGxpZ2h0Q29sb3IgPSAneWVsbG93Jyk6IFRleHRIaWdobGlnaHRSZWNvcmQge1xuXG4gICAgICAgIGNvbnN0IGlkID0gSGFzaGNvZGVzLmNyZWF0ZUlEKHJlY3RzKTtcblxuICAgICAgICBjb25zdCBjcmVhdGVkID0gSVNPRGF0ZVRpbWVTdHJpbmdzLmNyZWF0ZSgpO1xuICAgICAgICBjb25zdCBsYXN0VXBkYXRlZCA9IGNyZWF0ZWQ7XG5cbiAgICAgICAgY29uc3QgdGV4dEhpZ2hsaWdodCA9IG5ldyBUZXh0SGlnaGxpZ2h0KHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgZ3VpZDogaWQsXG4gICAgICAgICAgICBjcmVhdGVkLFxuICAgICAgICAgICAgbGFzdFVwZGF0ZWQsXG4gICAgICAgICAgICByZWN0czogQXJyYXlzLnRvRGljdChyZWN0cyksXG4gICAgICAgICAgICB0ZXh0U2VsZWN0aW9uczogQXJyYXlzLnRvRGljdCh0ZXh0U2VsZWN0aW9ucyksXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgaW1hZ2VzOiB7fSxcbiAgICAgICAgICAgIG5vdGVzOiB7fSxcbiAgICAgICAgICAgIHF1ZXN0aW9uczoge30sXG4gICAgICAgICAgICBmbGFzaGNhcmRzOiB7fSxcbiAgICAgICAgICAgIGNvbG9yXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7aWQsIHZhbHVlOiB0ZXh0SGlnaGxpZ2h0fTtcblxuICAgIH1cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRleHRIaWdobGlnaHRSZWNvcmQge1xuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgdmFsdWU6IElUZXh0SGlnaGxpZ2h0O1xufVxuIl19