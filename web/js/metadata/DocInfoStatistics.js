"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ISODateTimeStrings_1 = require("polar-shared/src/metadata/ISODateTimeStrings");
const Dictionaries_1 = require("polar-shared/src/util/Dictionaries");
const HitMap_1 = require("polar-shared/src/util/HitMap");
const Arrays_1 = require("polar-shared/src/util/Arrays");
class DocInfoStatistics {
    static computeDocumentsAddedRate(docInfos) {
        const result = {};
        for (const docInfo of docInfos) {
            if (docInfo.added) {
                const addedDate = ISODateTimeStrings_1.ISODateTimeStrings.parse(docInfo.added);
                const key = ISODateTimeStrings_1.ISODateTimeStrings.toISODateString(addedDate);
                if (key) {
                    const entry = Dictionaries_1.Dictionaries.computeIfAbsent(result, key, () => {
                        return { date: key, value: 0 };
                    });
                    ++entry.value;
                }
            }
        }
        return Object.values(result)
            .sort((a, b) => a.date.localeCompare(b.date));
    }
    static computeTopTags(docInfos, topN = 25) {
        const hitMap = new HitMap_1.HitMap();
        for (const docInfo of docInfos) {
            const tags = Object.values(docInfo.tags || {});
            for (const tag of tags) {
                hitMap.registerHit(tag.label);
            }
        }
        return Arrays_1.Arrays.head(hitMap.toRanked(), topN);
    }
}
exports.DocInfoStatistics = DocInfoStatistics;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jSW5mb1N0YXRpc3RpY3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEb2NJbmZvU3RhdGlzdGljcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFGQUErRjtBQUMvRixxRUFBZ0U7QUFDaEUseURBQW9EO0FBRXBELHlEQUFvRDtBQUtwRCxNQUFhLGlCQUFpQjtJQUVuQixNQUFNLENBQUMseUJBQXlCLENBQUMsUUFBNEI7UUFFaEUsTUFBTSxNQUFNLEdBQWdCLEVBQUUsQ0FBQztRQUUvQixLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRTtZQUs1QixJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ2hCLE1BQU0sU0FBUyxHQUFHLHVDQUFrQixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBTSxDQUFDLENBQUM7Z0JBQzNELE1BQU0sR0FBRyxHQUFHLHVDQUFrQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFFMUQsSUFBSSxHQUFHLEVBQUU7b0JBRUwsTUFBTSxLQUFLLEdBQUcsMkJBQVksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7d0JBQ3pELE9BQU8sRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQztvQkFDakMsQ0FBQyxDQUFDLENBQUM7b0JBRUgsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDO2lCQUVqQjthQUVIO1NBRUo7UUFFRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO2FBQ3ZCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXRELENBQUM7SUFFTSxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQTRCLEVBQUUsT0FBZSxFQUFFO1FBRXhFLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxFQUFFLENBQUM7UUFFNUIsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFFNUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBRS9DLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO2dCQUNwQixNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNqQztTQUVKO1FBRUQsT0FBTyxlQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVoRCxDQUFDO0NBRUo7QUFwREQsOENBb0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJU09EYXRlU3RyaW5nLCBJU09EYXRlVGltZVN0cmluZ3N9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvbWV0YWRhdGEvSVNPRGF0ZVRpbWVTdHJpbmdzJztcbmltcG9ydCB7RGljdGlvbmFyaWVzfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3V0aWwvRGljdGlvbmFyaWVzJztcbmltcG9ydCB7SGl0TWFwfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3V0aWwvSGl0TWFwJztcbmltcG9ydCB7SURvY0luZm99IGZyb20gXCJwb2xhci1zaGFyZWQvc3JjL21ldGFkYXRhL0lEb2NJbmZvXCI7XG5pbXBvcnQge0FycmF5c30gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvdXRpbC9BcnJheXNcIjtcblxuLyoqXG4gKiBNYWluIGVudHJ5cG9pbnQgZm9yIGNvbXB1dGluZyBzdGF0cyBvbiB1bmRlcmx5aW5nIG1ldGFkYXRhLi4uXG4gKi9cbmV4cG9ydCBjbGFzcyBEb2NJbmZvU3RhdGlzdGljcyB7XG5cbiAgICBwdWJsaWMgc3RhdGljIGNvbXB1dGVEb2N1bWVudHNBZGRlZFJhdGUoZG9jSW5mb3M6IEl0ZXJhYmxlPElEb2NJbmZvPik6IERhdGVTdGF0cyB7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0OiBEYXRlU3RhdE1hcCA9IHt9O1xuXG4gICAgICAgIGZvciAoY29uc3QgZG9jSW5mbyBvZiBkb2NJbmZvcykge1xuXG4gICAgICAgICAgICAvLyBtZXJnZSB0aGUgJ2FkZGVkJyB0aW1lIHRvIGEgRGF0ZSBtYXAgYW5kIGNvbnZlcnQgaXQgb3QgdGhlXG4gICAgICAgICAgICAvLyBkYXRlLi4uXG5cbiAgICAgICAgICAgIGlmIChkb2NJbmZvLmFkZGVkKSB7XG4gICAgICAgICAgICAgICBjb25zdCBhZGRlZERhdGUgPSBJU09EYXRlVGltZVN0cmluZ3MucGFyc2UoZG9jSW5mby5hZGRlZCEpO1xuICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gSVNPRGF0ZVRpbWVTdHJpbmdzLnRvSVNPRGF0ZVN0cmluZyhhZGRlZERhdGUpO1xuXG4gICAgICAgICAgICAgICBpZiAoa2V5KSB7XG5cbiAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRyeSA9IERpY3Rpb25hcmllcy5jb21wdXRlSWZBYnNlbnQocmVzdWx0LCBrZXksICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtkYXRlOiBrZXksIHZhbHVlOiAwfTtcbiAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICsrZW50cnkudmFsdWU7XG5cbiAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXN1bHQpXG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gYS5kYXRlLmxvY2FsZUNvbXBhcmUoYi5kYXRlKSk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNvbXB1dGVUb3BUYWdzKGRvY0luZm9zOiBJdGVyYWJsZTxJRG9jSW5mbz4sIHRvcE46IG51bWJlciA9IDI1KSB7XG5cbiAgICAgICAgY29uc3QgaGl0TWFwID0gbmV3IEhpdE1hcCgpO1xuXG4gICAgICAgIGZvciAoY29uc3QgZG9jSW5mbyBvZiBkb2NJbmZvcykge1xuXG4gICAgICAgICAgICBjb25zdCB0YWdzID0gT2JqZWN0LnZhbHVlcyhkb2NJbmZvLnRhZ3MgfHwge30pO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiB0YWdzKSB7XG4gICAgICAgICAgICAgICAgaGl0TWFwLnJlZ2lzdGVySGl0KHRhZy5sYWJlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBBcnJheXMuaGVhZChoaXRNYXAudG9SYW5rZWQoKSwgdG9wTik7XG5cbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRlU3RhdE1hcCB7XG4gICAgW2RhdGU6IHN0cmluZ106IERhdGVTdGF0O1xufVxuXG5leHBvcnQgdHlwZSBEYXRlU3RhdHMgPSBSZWFkb25seUFycmF5PERhdGVTdGF0PjtcblxuZXhwb3J0IGludGVyZmFjZSBEYXRlU3RhdCB7XG4gICAgcmVhZG9ubHkgZGF0ZTogSVNPRGF0ZVN0cmluZztcbiAgICByZWFkb25seSB2YWx1ZTogbnVtYmVyO1xufVxuIl19