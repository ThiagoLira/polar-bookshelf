"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("polar-shared/src/logger/Logger");
const Functions_1 = require("polar-shared/src/util/Functions");
const Hashcodes_1 = require("polar-shared/src/util/Hashcodes");
const Pagemarks_1 = require("./Pagemarks");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const AnnotationEvent_1 = require("../annotations/components/AnnotationEvent");
const log = Logger_1.Logger.create();
class PageMetas {
    static upgrade(pageMetas) {
        pageMetas = Object.assign({}, pageMetas);
        Functions_1.forDict(pageMetas, (key, pageMeta) => {
            if (!Preconditions_1.isPresent(pageMeta.textHighlights)) {
                pageMeta.textHighlights = {};
            }
            Functions_1.forDict(pageMeta.textHighlights, (_, textHighlight) => {
                if (!textHighlight.id) {
                    textHighlight.id = Hashcodes_1.Hashcodes.createID(textHighlight.rects);
                }
            });
            if (!Preconditions_1.isPresent(pageMeta.areaHighlights)) {
                pageMeta.areaHighlights = {};
            }
            if (!pageMeta.pagemarks) {
                pageMeta.pagemarks = {};
            }
            if (!pageMeta.screenshots) {
                pageMeta.screenshots = {};
            }
            if (!pageMeta.notes) {
                pageMeta.notes = {};
            }
            if (!pageMeta.comments) {
                pageMeta.comments = {};
            }
            if (!pageMeta.questions) {
                pageMeta.questions = {};
            }
            if (!pageMeta.readingProgress) {
                pageMeta.readingProgress = {};
            }
            pageMeta.pagemarks = Pagemarks_1.Pagemarks.upgrade(pageMeta.pagemarks);
        });
        return pageMetas;
    }
    static createModel(docMeta, memberName, callback, opts = {}) {
        Preconditions_1.Preconditions.assertPresent(docMeta, "docMeta");
        Preconditions_1.Preconditions.assertPresent(memberName, "memberName");
        Preconditions_1.Preconditions.assertPresent(callback, "callback");
        Functions_1.forDict(docMeta.pageMetas, (key, pageMeta) => {
            const member = pageMeta[memberName];
            if (!member) {
                log.warn("No member for key: " + key, memberName);
            }
            const traceListener = member.addTraceListener((traceEvent) => {
                if (!traceEvent.path.endsWith("/" + memberName)) {
                    return;
                }
                const annotationEvent = new AnnotationEvent_1.AnnotationEvent(Object.assign({}, traceEvent, {
                    docMeta,
                    pageMeta,
                    traceEvent,
                }));
                callback(annotationEvent);
                return true;
            });
            if (!opts.noSync) {
                traceListener.sync();
            }
        });
    }
}
exports.PageMetas = PageMetas;
//# sourceMappingURL=data:application/json;base64,