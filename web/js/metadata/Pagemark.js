"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Annotation_1 = require("./Annotation");
const PagemarkType_1 = require("polar-shared/src/metadata/PagemarkType");
const MetadataSerializer_1 = require("./MetadataSerializer");
const PagemarkMode_1 = require("polar-shared/src/metadata/PagemarkMode");
class Pagemark extends Annotation_1.Annotation {
    constructor(val) {
        super(val);
        this.notes = val.notes;
        this.type = val.type;
        this.percentage = val.percentage;
        this.column = val.percentage;
        this.rect = val.rect;
        this.mode = val.mode;
        this.init(val);
    }
    setup() {
        super.setup();
        if (!this.notes) {
            this.notes = {};
        }
        if (!this.type) {
            this.type = PagemarkType_1.PagemarkType.SINGLE_COLUMN;
        }
        if (!this.mode) {
            this.mode = PagemarkMode_1.PagemarkMode.READ;
        }
        if (!this.percentage) {
            this.percentage = 100;
        }
        if (!this.column) {
            this.column = 0;
        }
    }
    validate() {
        super.validate();
    }
    toString() {
        return MetadataSerializer_1.MetadataSerializer.serialize(this);
    }
}
exports.Pagemark = Pagemark;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnZW1hcmsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQYWdlbWFyay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUF3QztBQUV4Qyx5RUFBb0U7QUFFcEUsNkRBQXdEO0FBQ3hELHlFQUFvRTtBQUdwRSxNQUFhLFFBQVMsU0FBUSx1QkFBVTtJQXVCcEMsWUFBWSxHQUFRO1FBRWhCLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQU1YLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBS3JCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbkIsQ0FBQztJQUVNLEtBQUs7UUFFUixLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFZCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1NBQ25CO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWixJQUFJLENBQUMsSUFBSSxHQUFHLDJCQUFZLENBQUMsYUFBYSxDQUFDO1NBQzFDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDWixJQUFJLENBQUMsSUFBSSxHQUFHLDJCQUFZLENBQUMsSUFBSSxDQUFDO1NBQ2pDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7U0FDekI7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNkLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ25CO0lBRUwsQ0FBQztJQUVNLFFBQVE7UUFDWCxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVNLFFBQVE7UUFDWCxPQUFPLHVDQUFrQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDO0NBRUo7QUEvRUQsNEJBK0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBbm5vdGF0aW9ufSBmcm9tICcuL0Fubm90YXRpb24nO1xuaW1wb3J0IHtOb3RlfSBmcm9tICcuL05vdGUnO1xuaW1wb3J0IHtQYWdlbWFya1R5cGV9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvbWV0YWRhdGEvUGFnZW1hcmtUeXBlJztcbmltcG9ydCB7UGFnZW1hcmtSZWN0fSBmcm9tICcuL1BhZ2VtYXJrUmVjdCc7XG5pbXBvcnQge01ldGFkYXRhU2VyaWFsaXplcn0gZnJvbSAnLi9NZXRhZGF0YVNlcmlhbGl6ZXInO1xuaW1wb3J0IHtQYWdlbWFya01vZGV9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvbWV0YWRhdGEvUGFnZW1hcmtNb2RlJztcbmltcG9ydCB7SVBhZ2VtYXJrfSBmcm9tIFwicG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9JUGFnZW1hcmtcIjtcblxuZXhwb3J0IGNsYXNzIFBhZ2VtYXJrIGV4dGVuZHMgQW5ub3RhdGlvbiBpbXBsZW1lbnRzIElQYWdlbWFyayB7XG5cbiAgICAvLyBUT0RPOiBzaG91bGQgcGFnZW1hcmtzIHN1cHBvcnQgdGhlIGZ1bGwgbmVzdGluZyBtb2RlbCB3aGVyZSB3ZSBjYW5cbiAgICAvLyBoYXZlIGNvbW1lbnRzLCBub3RlcywgZmxhc2hjYXJkcywgZXRjPyAgUHJvYmFibHkgbm90IGJ1dCBub3RlcyBtaWdodFxuICAgIC8vIG1ha2Ugc2Vuc2UuXG5cbiAgICBwdWJsaWMgbm90ZXM6IHtbaWQ6IHN0cmluZ106IE5vdGV9O1xuXG4gICAgcHVibGljIHR5cGU6IFBhZ2VtYXJrVHlwZTtcblxuICAgIHB1YmxpYyBwZXJjZW50YWdlOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY29sdW1uOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgcmVjdDogUGFnZW1hcmtSZWN0O1xuXG4gICAgcHVibGljIG1vZGU6IFBhZ2VtYXJrTW9kZTtcblxuICAgIHB1YmxpYyBiYXRjaD86IHN0cmluZztcblxuICAgIC8vIFRPRE86IGFkZCBhbiAnaW5hY3RpdmUnIGZpZWxkIHNvIHRoYXQgdGhlIHVzZXIgY2FuIHRvZ2dsZSB0aGUgcGFnZW1hcmtzXG4gICAgLy8gYWN0aXZlIGFuZCBpbmFjdGl2ZSBlYXNpbHkuXG5cbiAgICBjb25zdHJ1Y3Rvcih2YWw6IGFueSkge1xuXG4gICAgICAgIHN1cGVyKHZhbCk7XG5cbiAgICAgICAgLy8gVE9ETzogc2hvdWxkIHBhZ2VtYXJrcyBzdXBwb3J0IHRoZSBmdWxsIG5lc3RpbmcgbW9kZWwgd2hlcmUgd2UgY2FuXG4gICAgICAgIC8vIGhhdmUgY29tbWVudHMsIG5vdGVzLCBmbGFzaGNhcmRzLCBldGM/ICBQcm9iYWJseSBub3QgYnV0IG5vdGVzIG1pZ2h0XG4gICAgICAgIC8vIG1ha2Ugc2Vuc2UuXG5cbiAgICAgICAgdGhpcy5ub3RlcyA9IHZhbC5ub3RlcztcbiAgICAgICAgdGhpcy50eXBlID0gdmFsLnR5cGU7XG4gICAgICAgIHRoaXMucGVyY2VudGFnZSA9IHZhbC5wZXJjZW50YWdlO1xuICAgICAgICB0aGlzLmNvbHVtbiA9IHZhbC5wZXJjZW50YWdlO1xuICAgICAgICB0aGlzLnJlY3QgPSB2YWwucmVjdDtcbiAgICAgICAgdGhpcy5tb2RlID0gdmFsLm1vZGU7XG5cbiAgICAgICAgLy8gVE9ETzogc3VwcG9ydCAncmFuZ2UnIGluIHRoZSBmdXR1cmUgd2hpY2ggaXMgYSBQYWdlbWFya1JhbmdlIHNvIHRoYXRcbiAgICAgICAgLy8gd2UgY2FuIHN0YXJ0IG9mZiByZWFkaW5nIHdpdGhpbiBhIHNtYWxsZXIgcGFnZS5cblxuICAgICAgICB0aGlzLmluaXQodmFsKTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBzZXR1cCgpIHtcblxuICAgICAgICBzdXBlci5zZXR1cCgpO1xuXG4gICAgICAgIGlmICghdGhpcy5ub3Rlcykge1xuICAgICAgICAgICAgdGhpcy5ub3RlcyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IFBhZ2VtYXJrVHlwZS5TSU5HTEVfQ09MVU1OO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMubW9kZSA9IFBhZ2VtYXJrTW9kZS5SRUFEO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnBlcmNlbnRhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMucGVyY2VudGFnZSA9IDEwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5jb2x1bW4pIHtcbiAgICAgICAgICAgIHRoaXMuY29sdW1uID0gMDtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcHVibGljIHZhbGlkYXRlKCkge1xuICAgICAgICBzdXBlci52YWxpZGF0ZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIE1ldGFkYXRhU2VyaWFsaXplci5zZXJpYWxpemUodGhpcyk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFnZW1hcmtSZWYge1xuXG4gICAgcmVhZG9ubHkgcGFnZU51bTogbnVtYmVyO1xuXG4gICAgcmVhZG9ubHkgcGFnZW1hcms6IElQYWdlbWFyaztcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2VtYXJrSURSZWYge1xuXG4gICAgcmVhZG9ubHkgcGFnZU51bTogbnVtYmVyO1xuXG4gICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcblxufVxuXG4iXX0=