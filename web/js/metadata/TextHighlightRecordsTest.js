"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TestingTime_1 = require("polar-shared/src/test/TestingTime");
const TextHighlightRecords_1 = require("./TextHighlightRecords");
const Assertions_1 = require("../test/Assertions");
const Rect_1 = require("../Rect");
TestingTime_1.TestingTime.freeze();
describe('TextHighlightRecords', function () {
    describe('create', function () {
        it("basic", function () {
            const rects = [new Rect_1.Rect({ top: 100, left: 100, right: 200, bottom: 200, width: 100, height: 100 })];
            const textSelections = [{ text: "hello world", rect: rects[0] }];
            const text = "hello world";
            const textHighlightRecord = TextHighlightRecords_1.TextHighlightRecords.create(rects, textSelections, { TEXT: text });
            const expected = {
                "id": "1Af41QXbBH",
                "value": {
                    "color": "yellow",
                    "created": "2012-03-02T11:38:49.321Z",
                    "flashcards": {},
                    "guid": "1Af41QXbBH",
                    "id": "1Af41QXbBH",
                    "images": {},
                    "lastUpdated": "2012-03-02T11:38:49.321Z",
                    "notes": {},
                    "questions": {},
                    "rects": {
                        "0": {
                            "bottom": 200,
                            "height": 100,
                            "left": 100,
                            "right": 200,
                            "top": 100,
                            "width": 100
                        }
                    },
                    "text": {
                        "TEXT": "hello world"
                    },
                    "textSelections": {
                        "0": {
                            "rect": {
                                "bottom": 200,
                                "height": 100,
                                "left": 100,
                                "right": 200,
                                "top": 100,
                                "width": 100
                            },
                            "text": "hello world"
                        }
                    }
                }
            };
            Assertions_1.assertJSON(textHighlightRecord, expected);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dEhpZ2hsaWdodFJlY29yZHNUZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGV4dEhpZ2hsaWdodFJlY29yZHNUZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUVBQThEO0FBQzlELGlFQUE0RDtBQUM1RCxtREFBOEM7QUFDOUMsa0NBQTZCO0FBSTdCLHlCQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFckIsUUFBUSxDQUFDLHNCQUFzQixFQUFFO0lBRTdCLFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFFZixFQUFFLENBQUMsT0FBTyxFQUFFO1lBRVIsTUFBTSxLQUFLLEdBQVcsQ0FBRSxJQUFJLFdBQUksQ0FBQyxFQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNHLE1BQU0sY0FBYyxHQUFnQixDQUFDLEVBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztZQUM1RSxNQUFNLElBQUksR0FBRyxhQUFhLENBQUM7WUFHM0IsTUFBTSxtQkFBbUIsR0FBRywyQ0FBb0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLGNBQWMsRUFBRSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1lBRTdGLE1BQU0sUUFBUSxHQUFHO2dCQUNiLElBQUksRUFBRSxZQUFZO2dCQUNsQixPQUFPLEVBQUU7b0JBQ0wsT0FBTyxFQUFFLFFBQVE7b0JBQ2pCLFNBQVMsRUFBRSwwQkFBMEI7b0JBQ3JDLFlBQVksRUFBRSxFQUFFO29CQUNoQixNQUFNLEVBQUUsWUFBWTtvQkFDcEIsSUFBSSxFQUFFLFlBQVk7b0JBQ2xCLFFBQVEsRUFBRSxFQUFFO29CQUNaLGFBQWEsRUFBRSwwQkFBMEI7b0JBQ3pDLE9BQU8sRUFBRSxFQUFFO29CQUNYLFdBQVcsRUFBRSxFQUFFO29CQUNmLE9BQU8sRUFBRTt3QkFDTCxHQUFHLEVBQUU7NEJBQ0QsUUFBUSxFQUFFLEdBQUc7NEJBQ2IsUUFBUSxFQUFFLEdBQUc7NEJBQ2IsTUFBTSxFQUFFLEdBQUc7NEJBQ1gsT0FBTyxFQUFFLEdBQUc7NEJBQ1osS0FBSyxFQUFFLEdBQUc7NEJBQ1YsT0FBTyxFQUFFLEdBQUc7eUJBQ2Y7cUJBQ0o7b0JBQ0QsTUFBTSxFQUFFO3dCQUNKLE1BQU0sRUFBRSxhQUFhO3FCQUN4QjtvQkFDRCxnQkFBZ0IsRUFBRTt3QkFDZCxHQUFHLEVBQUU7NEJBQ0QsTUFBTSxFQUFFO2dDQUNKLFFBQVEsRUFBRSxHQUFHO2dDQUNiLFFBQVEsRUFBRSxHQUFHO2dDQUNiLE1BQU0sRUFBRSxHQUFHO2dDQUNYLE9BQU8sRUFBRSxHQUFHO2dDQUNaLEtBQUssRUFBRSxHQUFHO2dDQUNWLE9BQU8sRUFBRSxHQUFHOzZCQUNmOzRCQUNELE1BQU0sRUFBRSxhQUFhO3lCQUN4QjtxQkFDSjtpQkFDSjthQUNKLENBQUM7WUFFRix1QkFBVSxDQUFDLG1CQUFtQixFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRTlDLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQyxDQUFDLENBQUM7QUFFUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGVzdGluZ1RpbWV9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvdGVzdC9UZXN0aW5nVGltZSc7XG5pbXBvcnQge1RleHRIaWdobGlnaHRSZWNvcmRzfSBmcm9tICcuL1RleHRIaWdobGlnaHRSZWNvcmRzJztcbmltcG9ydCB7YXNzZXJ0SlNPTn0gZnJvbSAnLi4vdGVzdC9Bc3NlcnRpb25zJztcbmltcG9ydCB7UmVjdH0gZnJvbSAnLi4vUmVjdCc7XG5pbXBvcnQge1RleHRSZWN0fSBmcm9tICcuL1RleHRSZWN0JztcbmltcG9ydCB7SVRleHRSZWN0fSBmcm9tIFwicG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9JVGV4dFJlY3RcIjtcblxuVGVzdGluZ1RpbWUuZnJlZXplKCk7XG5cbmRlc2NyaWJlKCdUZXh0SGlnaGxpZ2h0UmVjb3JkcycsIGZ1bmN0aW9uKCkge1xuXG4gICAgZGVzY3JpYmUoJ2NyZWF0ZScsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGl0KFwiYmFzaWNcIiwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBjb25zdCByZWN0czogUmVjdFtdID0gWyBuZXcgUmVjdCh7dG9wOiAxMDAsIGxlZnQ6IDEwMCwgcmlnaHQ6IDIwMCwgYm90dG9tOiAyMDAsIHdpZHRoOiAxMDAsIGhlaWdodDogMTAwfSldO1xuICAgICAgICAgICAgY29uc3QgdGV4dFNlbGVjdGlvbnM6IElUZXh0UmVjdFtdID0gW3t0ZXh0OiBcImhlbGxvIHdvcmxkXCIsIHJlY3Q6IHJlY3RzWzBdfV07XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gXCJoZWxsbyB3b3JsZFwiO1xuXG4gICAgICAgICAgICAvLyBjcmVhdGUgYSBiYXNpYyBUZXh0SGlnaGxpZ2h0IG9iamVjdC4uXG4gICAgICAgICAgICBjb25zdCB0ZXh0SGlnaGxpZ2h0UmVjb3JkID0gVGV4dEhpZ2hsaWdodFJlY29yZHMuY3JlYXRlKHJlY3RzLCB0ZXh0U2VsZWN0aW9ucywge1RFWFQ6IHRleHR9KTtcblxuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWQgPSB7XG4gICAgICAgICAgICAgICAgXCJpZFwiOiBcIjFBZjQxUVhiQkhcIixcbiAgICAgICAgICAgICAgICBcInZhbHVlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcInllbGxvd1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNyZWF0ZWRcIjogXCIyMDEyLTAzLTAyVDExOjM4OjQ5LjMyMVpcIixcbiAgICAgICAgICAgICAgICAgICAgXCJmbGFzaGNhcmRzXCI6IHt9LFxuICAgICAgICAgICAgICAgICAgICBcImd1aWRcIjogXCIxQWY0MVFYYkJIXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCIxQWY0MVFYYkJIXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiaW1hZ2VzXCI6IHt9LFxuICAgICAgICAgICAgICAgICAgICBcImxhc3RVcGRhdGVkXCI6IFwiMjAxMi0wMy0wMlQxMTozODo0OS4zMjFaXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibm90ZXNcIjoge30sXG4gICAgICAgICAgICAgICAgICAgIFwicXVlc3Rpb25zXCI6IHt9LFxuICAgICAgICAgICAgICAgICAgICBcInJlY3RzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiMFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJib3R0b21cIjogMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaGVpZ2h0XCI6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImxlZnRcIjogMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmlnaHRcIjogMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidG9wXCI6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIndpZHRoXCI6IDEwMFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcInRleHRcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJURVhUXCI6IFwiaGVsbG8gd29ybGRcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcInRleHRTZWxlY3Rpb25zXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiMFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZWN0XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJib3R0b21cIjogMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImhlaWdodFwiOiAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGVmdFwiOiAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmlnaHRcIjogMjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRvcFwiOiAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwid2lkdGhcIjogMTAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRleHRcIjogXCJoZWxsbyB3b3JsZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBhc3NlcnRKU09OKHRleHRIaWdobGlnaHRSZWNvcmQsIGV4cGVjdGVkKTtcblxuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG59KTtcbiJdfQ==