"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("polar-shared/src/logger/Logger");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const Rect_1 = require("../Rect");
const AnnotationRect_1 = require("./AnnotationRect");
const Rects_1 = require("../Rects");
const log = Logger_1.Logger.create();
class AnnotationRects {
    static createFromEvent(contextMenuLocation) {
        let points = contextMenuLocation.points;
        let elements = document.elementsFromPoint(points.client.x, points.client.y);
        elements = elements.filter(element => element.matches(".page"));
        if (elements.length === 1) {
            let pageElement = elements[0];
            log.info("Creating box on pageElement: ", pageElement);
            let pageElementPoint = points.pageOffset;
            let boxRect = Rects_1.Rects.createFromBasicRect({
                left: pageElementPoint.x,
                top: pageElementPoint.y,
                width: 150,
                height: 150
            });
            log.info("Placing box at: ", boxRect);
            let containerRect = Rects_1.Rects.createFromBasicRect({
                left: 0,
                top: 0,
                width: pageElement.offsetWidth,
                height: pageElement.offsetHeight
            });
            return AnnotationRects.createFromPositionedRect(boxRect, containerRect);
        }
        throw new Error("Wrong number of .page elements: " + elements.length);
    }
    static createFromPositionedRect(boxRect, containerRect) {
        Preconditions_1.Preconditions.assertCondition(boxRect.width > 0, 'boxRect width');
        Preconditions_1.Preconditions.assertCondition(boxRect.height > 0, 'boxRect height');
        Preconditions_1.Preconditions.assertCondition(containerRect.width > 0, 'containerRect width');
        Preconditions_1.Preconditions.assertCondition(containerRect.height > 0, 'containerRect height');
        Preconditions_1.Preconditions.assertInstanceOf(boxRect, Rect_1.Rect, "boxRect");
        let xAxis = boxRect.toLine("x").multiply(100 / containerRect.width);
        let yAxis = boxRect.toLine("y").multiply(100 / containerRect.height);
        return AnnotationRects.createFromLines(xAxis, yAxis);
    }
    static createFromLines(xAxis, yAxis) {
        return AnnotationRects.createFromRect(Rects_1.Rects.createFromLines(xAxis, yAxis));
    }
    static createFromRect(rect) {
        return new AnnotationRect_1.AnnotationRect({
            left: rect.left,
            top: rect.top,
            width: rect.width,
            height: rect.height
        });
    }
}
exports.AnnotationRects = AnnotationRects;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW5ub3RhdGlvblJlY3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQW5ub3RhdGlvblJlY3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsMkRBQXNEO0FBQ3RELGtFQUE2RDtBQUM3RCxrQ0FBNkI7QUFDN0IscURBQWdEO0FBRWhELG9DQUErQjtBQUMvQixNQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFNUIsTUFBYSxlQUFlO0lBTXhCLE1BQU0sQ0FBQyxlQUFlLENBQUMsbUJBQXdDO1FBRTNELElBQUksTUFBTSxHQUFHLG1CQUFtQixDQUFDLE1BQU0sQ0FBQztRQUV4QyxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU1RSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUVoRSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBRXZCLElBQUksV0FBVyxHQUFnQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFM0MsR0FBRyxDQUFDLElBQUksQ0FBQywrQkFBK0IsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUd2RCxJQUFJLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7WUFFekMsSUFBSSxPQUFPLEdBQUcsYUFBSyxDQUFDLG1CQUFtQixDQUFDO2dCQUNwQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztnQkFDeEIsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3ZCLEtBQUssRUFBRSxHQUFHO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2FBQ2QsQ0FBQyxDQUFDO1lBRUgsR0FBRyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUl0QyxJQUFJLGFBQWEsR0FBRyxhQUFLLENBQUMsbUJBQW1CLENBQUM7Z0JBQzFDLElBQUksRUFBRSxDQUFDO2dCQUNQLEdBQUcsRUFBRSxDQUFDO2dCQUNOLEtBQUssRUFBRSxXQUFXLENBQUMsV0FBVztnQkFDOUIsTUFBTSxFQUFFLFdBQVcsQ0FBQyxZQUFZO2FBQ25DLENBQUMsQ0FBQztZQUVILE9BQU8sZUFBZSxDQUFDLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztTQUUzRTtRQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTFFLENBQUM7SUFXRCxNQUFNLENBQUMsd0JBQXdCLENBQUMsT0FBYSxFQUFFLGFBQW1CO1FBRTlELDZCQUFhLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ2xFLDZCQUFhLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFFcEUsNkJBQWEsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQUM5RSw2QkFBYSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1FBRWhGLDZCQUFhLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFdBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUV6RCxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BFLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFckUsT0FBTyxlQUFlLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUV6RCxDQUFDO0lBUUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFXLEVBQUUsS0FBVztRQUMzQyxPQUFPLGVBQWUsQ0FBQyxjQUFjLENBQUMsYUFBSyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBUUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFVO1FBRTVCLE9BQU8sSUFBSSwrQkFBYyxDQUFDO1lBQ3RCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNiLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDdEIsQ0FBQyxDQUFDO0lBRVAsQ0FBQztDQUVKO0FBdEdELDBDQXNHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29udGV4dE1lbnVMb2NhdGlvbn0gZnJvbSAnLi4vY29udGV4dG1lbnUvQ29udGV4dE1lbnVMb2NhdGlvbic7XG5pbXBvcnQge0xvZ2dlcn0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9sb2dnZXIvTG9nZ2VyJztcbmltcG9ydCB7UHJlY29uZGl0aW9uc30gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9QcmVjb25kaXRpb25zJztcbmltcG9ydCB7UmVjdH0gZnJvbSAnLi4vUmVjdCc7XG5pbXBvcnQge0Fubm90YXRpb25SZWN0fSBmcm9tICcuL0Fubm90YXRpb25SZWN0JztcbmltcG9ydCB7TGluZX0gZnJvbSAnLi4vdXRpbC9MaW5lJztcbmltcG9ydCB7UmVjdHN9IGZyb20gJy4uL1JlY3RzJztcbmNvbnN0IGxvZyA9IExvZ2dlci5jcmVhdGUoKTtcblxuZXhwb3J0IGNsYXNzIEFubm90YXRpb25SZWN0cyB7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb250ZXh0TWVudUxvY2F0aW9uIHtDb250ZXh0TWVudUxvY2F0aW9ufVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVGcm9tRXZlbnQoY29udGV4dE1lbnVMb2NhdGlvbjogQ29udGV4dE1lbnVMb2NhdGlvbikge1xuXG4gICAgICAgIGxldCBwb2ludHMgPSBjb250ZXh0TWVudUxvY2F0aW9uLnBvaW50cztcblxuICAgICAgICBsZXQgZWxlbWVudHMgPSBkb2N1bWVudC5lbGVtZW50c0Zyb21Qb2ludChwb2ludHMuY2xpZW50LngsIHBvaW50cy5jbGllbnQueSk7XG5cbiAgICAgICAgZWxlbWVudHMgPSBlbGVtZW50cy5maWx0ZXIoZWxlbWVudCA9PiBlbGVtZW50Lm1hdGNoZXMoXCIucGFnZVwiKSk7XG5cbiAgICAgICAgaWYgKGVsZW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuXG4gICAgICAgICAgICBsZXQgcGFnZUVsZW1lbnQgPSA8SFRNTEVsZW1lbnQ+ZWxlbWVudHNbMF07XG5cbiAgICAgICAgICAgIGxvZy5pbmZvKFwiQ3JlYXRpbmcgYm94IG9uIHBhZ2VFbGVtZW50OiBcIiwgcGFnZUVsZW1lbnQpO1xuXG4gICAgICAgICAgICAvLyBnZXQgdGhlIHBvaW50IHdpdGhpbiB0aGUgZWxlbWVudCBpdHNlbGYuLlxuICAgICAgICAgICAgbGV0IHBhZ2VFbGVtZW50UG9pbnQgPSBwb2ludHMucGFnZU9mZnNldDtcblxuICAgICAgICAgICAgbGV0IGJveFJlY3QgPSBSZWN0cy5jcmVhdGVGcm9tQmFzaWNSZWN0KHtcbiAgICAgICAgICAgICAgICBsZWZ0OiBwYWdlRWxlbWVudFBvaW50LngsXG4gICAgICAgICAgICAgICAgdG9wOiBwYWdlRWxlbWVudFBvaW50LnksXG4gICAgICAgICAgICAgICAgd2lkdGg6IDE1MCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1MFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGxvZy5pbmZvKFwiUGxhY2luZyBib3ggYXQ6IFwiLCBib3hSZWN0KTtcblxuICAgICAgICAgICAgLy8gZ2V0IGEgcmVjdCBmb3IgdGhlIGVsZW1lbnQuLi4gd2UgcmVhbGx5IG9ubHkgbmVlZCB0aGUgZGltZW5zaW9uc1xuICAgICAgICAgICAgLy8gdGhvdWdoLi4gbm90IHRoZSB3aWR0aCBhbmQgaGVpZ2h0LlxuICAgICAgICAgICAgbGV0IGNvbnRhaW5lclJlY3QgPSBSZWN0cy5jcmVhdGVGcm9tQmFzaWNSZWN0KHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICB3aWR0aDogcGFnZUVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBwYWdlRWxlbWVudC5vZmZzZXRIZWlnaHRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gQW5ub3RhdGlvblJlY3RzLmNyZWF0ZUZyb21Qb3NpdGlvbmVkUmVjdChib3hSZWN0LCBjb250YWluZXJSZWN0KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV3JvbmcgbnVtYmVyIG9mIC5wYWdlIGVsZW1lbnRzOiBcIiArIGVsZW1lbnRzLmxlbmd0aCk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQW5ub3RhdGlvblJlY3QgZnJvbSBhIHBvc2l0aW9uZWQgcmVjdC4gIFdlIHVzZSB0aGlzIHRvIHRha2VcbiAgICAgKiBhIGRyYWdnZWQgb3IgcmVzaXplZCByZWN0IC8gYm94IG9uIHRoZSBzY3JlZW4gdGhlbiBjb252ZXJ0IGl0IHRvIGFcbiAgICAgKiBQYWdlbWFya1JlY3Qgd2l0aCB0aGUgY29ycmVjdCBjb29yZGluYXRlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBib3hSZWN0IHtSZWN0fVxuICAgICAqIEBwYXJhbSBjb250YWluZXJSZWN0IHtSZWN0fVxuICAgICAqIEByZXR1cm4ge0Fubm90YXRpb25SZWN0fVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVGcm9tUG9zaXRpb25lZFJlY3QoYm94UmVjdDogUmVjdCwgY29udGFpbmVyUmVjdDogUmVjdCk6IEFubm90YXRpb25SZWN0IHtcblxuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydENvbmRpdGlvbihib3hSZWN0LndpZHRoID4gMCwgJ2JveFJlY3Qgd2lkdGgnKTtcbiAgICAgICAgUHJlY29uZGl0aW9ucy5hc3NlcnRDb25kaXRpb24oYm94UmVjdC5oZWlnaHQgPiAwLCAnYm94UmVjdCBoZWlnaHQnKTtcblxuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydENvbmRpdGlvbihjb250YWluZXJSZWN0LndpZHRoID4gMCwgJ2NvbnRhaW5lclJlY3Qgd2lkdGgnKTtcbiAgICAgICAgUHJlY29uZGl0aW9ucy5hc3NlcnRDb25kaXRpb24oY29udGFpbmVyUmVjdC5oZWlnaHQgPiAwLCAnY29udGFpbmVyUmVjdCBoZWlnaHQnKTtcblxuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydEluc3RhbmNlT2YoYm94UmVjdCwgUmVjdCwgXCJib3hSZWN0XCIpO1xuXG4gICAgICAgIGxldCB4QXhpcyA9IGJveFJlY3QudG9MaW5lKFwieFwiKS5tdWx0aXBseSgxMDAgLyBjb250YWluZXJSZWN0LndpZHRoKTtcbiAgICAgICAgbGV0IHlBeGlzID0gYm94UmVjdC50b0xpbmUoXCJ5XCIpLm11bHRpcGx5KDEwMCAvIGNvbnRhaW5lclJlY3QuaGVpZ2h0KTtcblxuICAgICAgICByZXR1cm4gQW5ub3RhdGlvblJlY3RzLmNyZWF0ZUZyb21MaW5lcyh4QXhpcywgeUF4aXMpO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0geEF4aXMge0xpbmV9XG4gICAgICogQHBhcmFtIHlBeGlzIHtMaW5lfVxuICAgICAqIEByZXR1cm4ge0Fubm90YXRpb25SZWN0fVxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVGcm9tTGluZXMoeEF4aXM6IExpbmUsIHlBeGlzOiBMaW5lKSB7XG4gICAgICAgIHJldHVybiBBbm5vdGF0aW9uUmVjdHMuY3JlYXRlRnJvbVJlY3QoUmVjdHMuY3JlYXRlRnJvbUxpbmVzKHhBeGlzLCB5QXhpcykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVjdCB7UmVjdH1cbiAgICAgKiBAcmV0dXJuIHtBbm5vdGF0aW9uUmVjdH1cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlRnJvbVJlY3QocmVjdDogUmVjdCkge1xuXG4gICAgICAgIHJldHVybiBuZXcgQW5ub3RhdGlvblJlY3Qoe1xuICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgICAgICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgICAgICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiByZWN0LmhlaWdodFxuICAgICAgICB9KTtcblxuICAgIH1cblxufVxuIl19