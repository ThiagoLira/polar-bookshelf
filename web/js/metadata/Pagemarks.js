"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PagemarkRect_1 = require("./PagemarkRect");
const Pagemark_1 = require("./Pagemark");
const Logger_1 = require("polar-shared/src/logger/Logger");
const Hashcodes_1 = require("polar-shared/src/util/Hashcodes");
const PagemarkType_1 = require("polar-shared/src/metadata/PagemarkType");
const PagemarkRects_1 = require("./PagemarkRects");
const Dictionaries_1 = require("polar-shared/src/util/Dictionaries");
const Percentages_1 = require("polar-shared/src/util/Percentages");
const PagemarkMode_1 = require("polar-shared/src/metadata/PagemarkMode");
const DocMetas_1 = require("./DocMetas");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const ISODateTimeStrings_1 = require("polar-shared/src/metadata/ISODateTimeStrings");
const Reducers_1 = require("polar-shared/src/util/Reducers");
const ReadingProgresses_1 = require("./ReadingProgresses");
const HitMap_1 = require("polar-shared/src/util/HitMap");
const ReadingOverviews_1 = require("./ReadingOverviews");
const Percentages_2 = require("polar-shared/src/util/Percentages");
const Numbers_1 = require("polar-shared/src/util/Numbers");
const Objects_1 = require("polar-shared/src/util/Objects");
const log = Logger_1.Logger.create();
const DEFAULT_PAGEMARK_RECT = new PagemarkRect_1.PagemarkRect({
    left: 0,
    top: 0,
    width: 100,
    height: 100
});
class Pagemarks {
    static createID(created) {
        return Hashcodes_1.Hashcodes.createID({ created, sequence: this.sequences.id++ });
    }
    static updatePagemarksForRange(docMeta, end, percentage = 100) {
        if (end < 1) {
            throw new Error("Page number must be 1 or more");
        }
        const created = ISODateTimeStrings_1.ISODateTimeStrings.create();
        const batch = Hashcodes_1.Hashcodes.createID({ created, id: this.sequences.batch++ });
        const calculateStartPage = () => {
            const range = [...Numbers_1.Numbers.range(1, Math.max(1, end - 1))].reverse();
            for (const r of range) {
                const pageMeta = DocMetas_1.DocMetas.getPageMeta(docMeta, r);
                if (Dictionaries_1.Dictionaries.size(pageMeta.pagemarks || {}) !== 0) {
                    return r;
                }
            }
            return 1;
        };
        const createPagemarkRect = (pageNum, percentage = 100) => {
            const pageMeta = DocMetas_1.DocMetas.getPageMeta(docMeta, pageNum);
            const pagemarks = Object.values(pageMeta.pagemarks || {});
            if (pagemarks.length === 0) {
                return PagemarkRects_1.PagemarkRects.createFromRect({
                    left: 0,
                    top: 0,
                    height: percentage,
                    width: 100
                });
            }
            let top = 0;
            for (const pagemark of pagemarks) {
                const newTop = pagemark.rect.top + pagemark.rect.height;
                if (newTop > top) {
                    top = newTop;
                }
            }
            const coverage = pagemarks.map(pagemark => pagemark.percentage)
                .reduce(Reducers_1.Reducers.SUM, 0);
            if (Math.floor(coverage) === 100 || top === 100) {
                return undefined;
            }
            return PagemarkRects_1.PagemarkRects.createFromRect({
                left: 0,
                top,
                height: 100 - top,
                width: 100
            });
        };
        const start = calculateStartPage();
        const result = [];
        DocMetas_1.DocMetas.withBatchedMutations(docMeta, () => {
            for (const pageNum of Numbers_1.Numbers.range(start, end)) {
                const rectPercentage = pageNum === end ? percentage : 100;
                const rect = createPagemarkRect(pageNum, rectPercentage);
                if (rect) {
                    const pagemark = Pagemarks.create({ created, rect, batch });
                    Pagemarks.updatePagemark(docMeta, pageNum, pagemark);
                    result.push({ pageNum, pagemark });
                }
            }
        });
        return result;
    }
    static create(opts = {}) {
        const options = Objects_1.Objects.defaults(opts, {
            type: PagemarkType_1.PagemarkType.SINGLE_COLUMN,
            column: 0,
        });
        const keyOptions = Pagemarks.createKeyOptions(options);
        if (keyOptions.count === 0) {
            throw new Error("Must specify either rect or percentage.");
        }
        if (keyOptions.count === 1) {
            if (keyOptions.hasPercentage) {
                keyOptions.rect = PagemarkRects_1.PagemarkRects.createFromPercentage(keyOptions.percentage);
            }
            if (keyOptions.hasRect) {
                keyOptions.percentage = keyOptions.rect.toPercentage();
            }
        }
        if (Percentages_1.round(keyOptions.percentage) !== Percentages_1.round(keyOptions.rect.toPercentage())) {
            const msg = "Percentage and rect are not the same";
            log.warn(msg, keyOptions.percentage, keyOptions.rect, keyOptions.rect.toPercentage());
            throw new Error(msg);
        }
        const created = options.created || ISODateTimeStrings_1.ISODateTimeStrings.create();
        const batch = options.batch || Hashcodes_1.Hashcodes.createID({ created, id: this.sequences.batch++ });
        const mode = options.mode || PagemarkMode_1.PagemarkMode.READ;
        const id = Pagemarks.createID(created);
        return new Pagemark_1.Pagemark({
            id,
            guid: id,
            created,
            type: options.type,
            percentage: Numbers_1.Numbers.toFixedFloat(keyOptions.percentage, 10),
            column: options.column,
            rect: keyOptions.rect,
            batch,
            mode
        });
    }
    static createKeyOptions(options) {
        const keyOptions = {
            count: 0,
            hasPercentage: false,
            hasRect: false,
            rect: options.rect,
            percentage: options.percentage
        };
        keyOptions.hasPercentage = "percentage" in options;
        keyOptions.hasRect = "rect" in options;
        if (keyOptions.hasPercentage) {
            ++keyOptions.count;
        }
        if (keyOptions.hasRect) {
            ++keyOptions.count;
        }
        return keyOptions;
    }
    static upgrade(pagemarks) {
        const result = {};
        Object.assign(result, pagemarks);
        Dictionaries_1.Dictionaries.forDict(result, (key, pagemark) => {
            if (!pagemark.rect) {
                if (pagemark.percentage >= 0 && pagemark.percentage <= 100) {
                    pagemark.rect = PagemarkRects_1.PagemarkRects.createFromPercentage(pagemark.percentage);
                }
            }
            if (Math.floor(pagemark.rect.top) === 100) {
                delete result[key];
                return;
            }
            if (!pagemark.id) {
                pagemark.id = key;
            }
            if (!pagemark.mode) {
                pagemark.mode = PagemarkMode_1.PagemarkMode.READ;
            }
            if (!Preconditions_1.isPresent(pagemark.percentage)) {
                pagemark.percentage = 0;
            }
        });
        return result;
    }
    static updatePagemark(docMeta, pageNum, pagemark) {
        this.doDocMetaMutation(docMeta, pageNum, () => {
            const pageMeta = DocMetas_1.DocMetas.getPageMeta(docMeta, pageNum);
            this.doPageMetaMutation(pageMeta, () => {
                pageMeta.pagemarks[pagemark.id] = pagemark;
            });
        });
    }
    static replacePagemark(docMeta, pagemarkPtr, options) {
        const pagemarksToMutate = () => {
            const result = [];
            if (pagemarkPtr.ref) {
                const pageMeta = DocMetas_1.DocMetas.getPageMeta(docMeta, pagemarkPtr.ref.pageNum);
                result.push({ pageMeta, id: pagemarkPtr.ref.pagemark.id });
            }
            if (pagemarkPtr.batch) {
                result.push(...this.pagemarksWithinBatch(docMeta, pagemarkPtr.batch));
            }
            return result;
        };
        const pagemarkRefs = pagemarksToMutate();
        DocMetas_1.DocMetas.withBatchedMutations(docMeta, () => {
            for (const ref of pagemarkRefs) {
                const currPagemark = ref.pageMeta.pagemarks[ref.id];
                const newPagemark = new Pagemark_1.Pagemark(currPagemark);
                if (options.mode) {
                    newPagemark.mode = options.mode;
                }
                this.doPageMetaMutation(ref.pageMeta, () => {
                    ref.pageMeta.pagemarks[ref.id] = newPagemark;
                });
            }
        });
    }
    static deletePagemark(docMeta, pageNum, id) {
        this.doDocMetaMutation(docMeta, pageNum, () => {
            const pageMeta = DocMetas_1.DocMetas.getPageMeta(docMeta, pageNum);
            let pageMetaMutator;
            if (id) {
                const primaryPagemark = pageMeta.pagemarks[id];
                if (primaryPagemark) {
                    if (primaryPagemark.batch) {
                        const pagemarksWithinBatch = this.pagemarksWithinBatch(docMeta, primaryPagemark.batch);
                        pageMetaMutator = () => {
                            for (const pagemarkRef of pagemarksWithinBatch) {
                                delete pagemarkRef.pageMeta.pagemarks[pagemarkRef.id];
                            }
                        };
                    }
                    else {
                        pageMetaMutator = () => delete pageMeta.pagemarks[id];
                    }
                }
                else {
                    log.warn(`No pagemark found for id ${id} for pageNum ${pageNum}`);
                }
            }
            else {
                pageMetaMutator = () => Objects_1.Objects.clear(pageMeta.pagemarks);
            }
            this.doPageMetaMutation(pageMeta, pageMetaMutator);
        });
    }
    static pagemarksWithinBatch(docMeta, batch) {
        const result = [];
        const nrPages = Object.keys(docMeta.pageMetas).length;
        for (let pageIdx = 1; pageIdx <= nrPages; ++pageIdx) {
            const pageMeta = DocMetas_1.DocMetas.getPageMeta(docMeta, pageIdx);
            for (const pagemark of Object.values(pageMeta.pagemarks || {})) {
                if (pagemark.batch === batch) {
                    result.push({ pageMeta, id: pagemark.id });
                }
            }
        }
        return result;
    }
    static doDocMetaMutation(docMeta, pageNum, pagemarkMutator) {
        Preconditions_1.Preconditions.assertPresent(docMeta, "docMeta");
        Preconditions_1.Preconditions.assertPresent(pageNum, "pageNum");
        DocMetas_1.DocMetas.withBatchedMutations(docMeta, () => {
            pagemarkMutator();
            const progress = Math.floor(DocMetas_1.DocMetas.computeProgress(docMeta) * 100);
            docMeta.docInfo.progress = progress;
            docMeta.docInfo.readingPerDay
                = ReadingOverviews_1.ReadingOverviews.compute(Object.values(docMeta.pageMetas));
        });
    }
    static doPageMetaMutation(pageMeta, pageMetaMutator) {
        if (!pageMetaMutator) {
            return;
        }
        const createProgressByMode = () => {
            const result = new HitMap_1.HitMap();
            for (const pagemark of Object.values(pageMeta.pagemarks)) {
                const mode = pagemark.mode || PagemarkMode_1.PagemarkMode.READ;
                result.registerHit(mode, pagemark.percentage);
            }
            return result.toLiteralMap();
        };
        const writeReadingProgress = (preExisting) => {
            const percentages = Object.values(pageMeta.pagemarks)
                .map(current => current.percentage);
            const progress = Percentages_2.Percentages.sum(...percentages);
            const progressByMode = createProgressByMode();
            const readingProgress = ReadingProgresses_1.ReadingProgresses.create(progress, progressByMode, preExisting);
            pageMeta.readingProgress[readingProgress.id] = readingProgress;
        };
        const doPreExisting = Dictionaries_1.Dictionaries.empty(pageMeta.readingProgress) && !Dictionaries_1.Dictionaries.empty(pageMeta.pagemarks);
        if (doPreExisting) {
            writeReadingProgress(true);
        }
        pageMetaMutator();
        writeReadingProgress();
    }
    static computeReadingProgressStats(docMetaProviders) {
        for (const docMetaProvider of docMetaProviders) {
            const docMeta = docMetaProvider();
        }
    }
}
exports.Pagemarks = Pagemarks;
Pagemarks.sequences = {
    id: 0,
    batch: 0
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFnZW1hcmtzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUGFnZW1hcmtzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTRDO0FBQzVDLHlDQUFpRDtBQUNqRCwyREFBc0Q7QUFDdEQsK0RBQTBEO0FBQzFELHlFQUFvRTtBQUNwRSxtREFBOEM7QUFDOUMscUVBQWdFO0FBQ2hFLG1FQUF3RDtBQUN4RCx5RUFBb0U7QUFFcEUseUNBQW9DO0FBQ3BDLGtFQUF3RTtBQUN4RSxxRkFBbUc7QUFFbkcsNkRBQXdEO0FBQ3hELDJEQUFzRDtBQUV0RCx5REFBb0Q7QUFDcEQseURBQW9EO0FBQ3BELG1FQUE4RDtBQUk5RCwyREFBc0Q7QUFDdEQsMkRBQXNEO0FBRXRELE1BQU0sR0FBRyxHQUFHLGVBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUU1QixNQUFNLHFCQUFxQixHQUFHLElBQUksMkJBQVksQ0FBQztJQUMzQyxJQUFJLEVBQUUsQ0FBQztJQUNQLEdBQUcsRUFBRSxDQUFDO0lBQ04sS0FBSyxFQUFFLEdBQUc7SUFDVixNQUFNLEVBQUUsR0FBRztDQUNkLENBQUMsQ0FBQztBQUVILE1BQWEsU0FBUztJQU9YLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBMEI7UUFDN0MsT0FBTyxxQkFBUyxDQUFDLFFBQVEsQ0FBQyxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQVVNLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxPQUFpQixFQUNqQixHQUFlLEVBQ2YsYUFBcUIsR0FBRztRQUUxRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7U0FDcEQ7UUFFRCxNQUFNLE9BQU8sR0FBRyx1Q0FBa0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM1QyxNQUFNLEtBQUssR0FBRyxxQkFB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Q0FBQztRQUVGLE1BQU0sYUFBYSxHQUNmLDJCQUFZLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFFLDJCQUFZLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU3RixJQUFJLGFBQWEsRUFBRTtZQUNmLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCO1FBRUQsZUFBZSxFQUFFLENBQUM7UUFFbEIsb0JBQW9CLEVBQUUsQ0FBQztJQUUzQixDQUFDO0lBRU0sTUFBTSxDQUFDLDJCQUEyQixDQUFDLGdCQUFtRDtRQU16RixLQUFLLE1BQU0sZUFBZSxJQUFJLGdCQUFnQixFQUFFO1lBRTVDLE1BQU0sT0FBTyxHQUFHLGVBQWUsRUFBRSxDQUFDO1NBSXJDO0lBRUwsQ0FBQzs7QUE1aEJMLDhCQThoQkM7QUE1aEJpQixtQkFBUyxHQUFHO0lBQ3RCLEVBQUUsRUFBRSxDQUFDO0lBQ0wsS0FBSyxFQUFFLENBQUM7Q0FDWCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQYWdlbWFya1JlY3R9IGZyb20gJy4vUGFnZW1hcmtSZWN0JztcbmltcG9ydCB7UGFnZW1hcmssIFBhZ2VtYXJrUmVmfSBmcm9tICcuL1BhZ2VtYXJrJztcbmltcG9ydCB7TG9nZ2VyfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL2xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHtIYXNoY29kZXN9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvdXRpbC9IYXNoY29kZXMnO1xuaW1wb3J0IHtQYWdlbWFya1R5cGV9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvbWV0YWRhdGEvUGFnZW1hcmtUeXBlJztcbmltcG9ydCB7UGFnZW1hcmtSZWN0c30gZnJvbSAnLi9QYWdlbWFya1JlY3RzJztcbmltcG9ydCB7RGljdGlvbmFyaWVzfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3V0aWwvRGljdGlvbmFyaWVzJztcbmltcG9ydCB7cm91bmR9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvdXRpbC9QZXJjZW50YWdlcyc7XG5pbXBvcnQge1BhZ2VtYXJrTW9kZX0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9QYWdlbWFya01vZGUnO1xuaW1wb3J0IHtEb2NNZXRhfSBmcm9tICcuL0RvY01ldGEnO1xuaW1wb3J0IHtEb2NNZXRhc30gZnJvbSAnLi9Eb2NNZXRhcyc7XG5pbXBvcnQge2lzUHJlc2VudCwgUHJlY29uZGl0aW9uc30gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9QcmVjb25kaXRpb25zJztcbmltcG9ydCB7SVNPRGF0ZVRpbWVTdHJpbmcsIElTT0RhdGVUaW1lU3RyaW5nc30gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9JU09EYXRlVGltZVN0cmluZ3MnO1xuaW1wb3J0IHtQYWdlTWV0YX0gZnJvbSAnLi9QYWdlTWV0YSc7XG5pbXBvcnQge1JlZHVjZXJzfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3V0aWwvUmVkdWNlcnMnO1xuaW1wb3J0IHtSZWFkaW5nUHJvZ3Jlc3Nlc30gZnJvbSAnLi9SZWFkaW5nUHJvZ3Jlc3Nlcyc7XG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3V0aWwvUHJvdmlkZXJzJztcbmltcG9ydCB7SGl0TWFwfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3V0aWwvSGl0TWFwJztcbmltcG9ydCB7UmVhZGluZ092ZXJ2aWV3c30gZnJvbSAnLi9SZWFkaW5nT3ZlcnZpZXdzJztcbmltcG9ydCB7UGVyY2VudGFnZXN9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvdXRpbC9QZXJjZW50YWdlcyc7XG5pbXBvcnQge0lQYWdlTWV0YSwgUGFnZU51bWJlcn0gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvbWV0YWRhdGEvSVBhZ2VNZXRhXCI7XG5pbXBvcnQge0lEb2NNZXRhfSBmcm9tIFwicG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9JRG9jTWV0YVwiO1xuaW1wb3J0IHtJUGFnZW1hcmt9IGZyb20gXCJwb2xhci1zaGFyZWQvc3JjL21ldGFkYXRhL0lQYWdlbWFya1wiO1xuaW1wb3J0IHtOdW1iZXJzfSBmcm9tIFwicG9sYXItc2hhcmVkL3NyYy91dGlsL051bWJlcnNcIjtcbmltcG9ydCB7T2JqZWN0c30gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvdXRpbC9PYmplY3RzXCI7XG5cbmNvbnN0IGxvZyA9IExvZ2dlci5jcmVhdGUoKTtcblxuY29uc3QgREVGQVVMVF9QQUdFTUFSS19SRUNUID0gbmV3IFBhZ2VtYXJrUmVjdCh7XG4gICAgbGVmdDogMCxcbiAgICB0b3A6IDAsXG4gICAgd2lkdGg6IDEwMCxcbiAgICBoZWlnaHQ6IDEwMFxufSk7XG5cbmV4cG9ydCBjbGFzcyBQYWdlbWFya3Mge1xuXG4gICAgcHVibGljIHN0YXRpYyBzZXF1ZW5jZXMgPSB7XG4gICAgICAgIGlkOiAwLFxuICAgICAgICBiYXRjaDogMFxuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUlEKGNyZWF0ZWQ6IElTT0RhdGVUaW1lU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBIYXNoY29kZXMuY3JlYXRlSUQoe2NyZWF0ZWQsIHNlcXVlbmNlOiB0aGlzLnNlcXVlbmNlcy5pZCsrfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHBhZ2VtYXJrcyBvdmVyIHRoZSBnaXZlbiByYW5nZS4gIFdlIGdvIGJhY2sgdG8gZWl0aGVyIHRoZSBmaXJzdFxuICAgICAqIHBhZ2UgdGhhdCBoYXMgYSBwYWdlbWFyayBvciB0aGUgYmVnaW5uaW5nIG9mIHRoZSBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2NNZXRhXG4gICAgICogQHBhcmFtIGVuZFxuICAgICAqIEBwYXJhbSBwZXJjZW50YWdlIFRoZSBwZXJjZW50YWdlIG9mIHRoZSBlbmQgcGFnZSB0byBjcmVhdGUgYSBwYWdlbWFyay5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHVwZGF0ZVBhZ2VtYXJrc0ZvclJhbmdlKGRvY01ldGE6IElEb2NNZXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBQYWdlTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZTogbnVtYmVyID0gMTAwICk6IFJlYWRvbmx5QXJyYXk8UGFnZW1hcmtSZWY+IHtcblxuICAgICAgICBpZiAoZW5kIDwgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFnZSBudW1iZXIgbXVzdCBiZSAxIG9yIG1vcmVcIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjcmVhdGVkID0gSVNPRGF0ZVRpbWVTdHJpbmdzLmNyZWF0ZSgpO1xuICAgICAgICBjb25zdCBiYXRjaCA9IEhhc2hjb2Rlcy5jcmVhdGVJRCh7Y3JlYXRlZCwgaWQ6IHRoaXMuc2VxdWVuY2VzLmJhdGNoKyt9KTtcblxuICAgICAgICBjb25zdCBjYWxjdWxhdGVTdGFydFBhZ2UgPSAoKSA9PiB7XG5cbiAgICAgICAgICAgIC8vIGZpbmQgdGhlIHN0YXJ0aW5nIHBhZ2UgYnkgZ29pbmcgYmFjayB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZVxuICAgICAgICAgICAgLy8gZG9jdW1lbnQgdW50aWwgd2UgZmluZCB0aGUgZmlyc3QgcGFnZW1hcmsgb3Igd2UgaGl0IHRoZSBmaXJzdFxuICAgICAgICAgICAgLy8gcGFnZS5cblxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBbIC4uLiBOdW1iZXJzLnJhbmdlKDEsIE1hdGgubWF4KDEsIGVuZCAtIDEpKSBdLnJldmVyc2UoKTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCByIG9mIHJhbmdlKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwYWdlTWV0YSA9IERvY01ldGFzLmdldFBhZ2VNZXRhKGRvY01ldGEsIHIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKERpY3Rpb25hcmllcy5zaXplKHBhZ2VNZXRhLnBhZ2VtYXJrcyB8fCB7fSkgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBwYWdlIGhhcyBhIHBhZ2VtYXJrIHNvIHdlIHNob3VsZCBzdGFydCBmcm9tIHRoZXJlLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIDE7XG5cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBjcmVhdGVQYWdlbWFya1JlY3QgPSAocGFnZU51bTogUGFnZU51bWJlciwgcGVyY2VudGFnZTogbnVtYmVyID0gMTAwKTogUGFnZW1hcmtSZWN0IHwgdW5kZWZpbmVkID0+IHtcblxuICAgICAgICAgICAgLy8gZmluZCB0aGUgcGFnZW1hcmsgdGhhdCBpcyB0aGUgZnVydGhlc3QgZG93biB0aGUgcGFnZS5cblxuICAgICAgICAgICAgY29uc3QgcGFnZU1ldGEgPSBEb2NNZXRhcy5nZXRQYWdlTWV0YShkb2NNZXRhLCBwYWdlTnVtKTtcblxuICAgICAgICAgICAgY29uc3QgcGFnZW1hcmtzID0gT2JqZWN0LnZhbHVlcyhwYWdlTWV0YS5wYWdlbWFya3MgfHwge30pO1xuXG4gICAgICAgICAgICBpZiAocGFnZW1hcmtzLmxlbmd0aCA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFBhZ2VtYXJrUmVjdHMuY3JlYXRlRnJvbVJlY3Qoe1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogcGVyY2VudGFnZSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB0b3A6IG51bWJlciA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFnZW1hcmsgb2YgcGFnZW1hcmtzKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBuZXdUb3AgPSBwYWdlbWFyay5yZWN0LnRvcCArIHBhZ2VtYXJrLnJlY3QuaGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgaWYgKG5ld1RvcCA+IHRvcCkge1xuICAgICAgICAgICAgICAgICAgIHRvcCA9IG5ld1RvcDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY292ZXJhZ2U6IG51bWJlciA9XG4gICAgICAgICAgICAgICAgcGFnZW1hcmtzLm1hcChwYWdlbWFyayA9PiBwYWdlbWFyay5wZXJjZW50YWdlKVxuICAgICAgICAgICAgICAgICAgICAucmVkdWNlKFJlZHVjZXJzLlNVTSwgMCk7XG5cbiAgICAgICAgICAgIGlmIChNYXRoLmZsb29yKGNvdmVyYWdlKSA9PT0gMTAwIHx8IHRvcCA9PT0gMTAwKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIHBhZ2UgaXMgY29tcGxldGVseSBjb3ZlcmVkIGp1c3QgaWdub3JlIGl0XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBQYWdlbWFya1JlY3RzLmNyZWF0ZUZyb21SZWN0KHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCAtIHRvcCxcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gY2FsY3VsYXRlU3RhcnRQYWdlKCk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0OiBQYWdlbWFya1JlZltdID0gW107XG5cbiAgICAgICAgRG9jTWV0YXMud2l0aEJhdGNoZWRNdXRhdGlvbnMoZG9jTWV0YSwgKCkgPT4ge1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhZ2VOdW0gb2YgTnVtYmVycy5yYW5nZShzdGFydCwgZW5kKSkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdFBlcmNlbnRhZ2UgPVxuICAgICAgICAgICAgICAgICAgICBwYWdlTnVtID09PSBlbmQgPyBwZXJjZW50YWdlIDogMTAwO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdCA9IGNyZWF0ZVBhZ2VtYXJrUmVjdChwYWdlTnVtLCByZWN0UGVyY2VudGFnZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVjdCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VtYXJrID0gUGFnZW1hcmtzLmNyZWF0ZSh7Y3JlYXRlZCwgcmVjdCwgYmF0Y2h9KTtcblxuICAgICAgICAgICAgICAgICAgICBQYWdlbWFya3MudXBkYXRlUGFnZW1hcmsoZG9jTWV0YSwgcGFnZU51bSwgcGFnZW1hcmspO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtwYWdlTnVtLCBwYWdlbWFya30pO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBwYWdlbWFyayB3aXRoIHRoZSBjcmVhdGVkIHRpbWUsIGFuZCBvdGhlciBtYW5kYXRvcnkgZmllbGRzXG4gICAgICogYWRkZWQuXG4gICAgICpcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShvcHRzOiBQYXJ0aWFsPFBhZ2VtYXJrT3B0aW9ucz4gPSB7fSk6IFBhZ2VtYXJrIHtcblxuICAgICAgICBjb25zdCBvcHRpb25zOiBQYWdlbWFya09wdGlvbnMgPSBPYmplY3RzLmRlZmF1bHRzKCBvcHRzLCB7XG5cbiAgICAgICAgICAgIC8vIGp1c3Qgc2V0IGRvY01ldGEgcGFnZU1hcmtUeXBlID0gUGFnZW1hcmtUeXBlLlNJTkdMRV9DT0xVTU4gYnlcbiAgICAgICAgICAgIC8vIGRlZmF1bHQgZm9yIG5vdyB1bnRpbCB3ZSBhZGQgbXVsdGlwbGUgY29sdW1uIHR5cGVzIGFuZCBoYW5kbGVcbiAgICAgICAgICAgIC8vIHRoZW0gcHJvcGVybHkuXG5cbiAgICAgICAgICAgIC8vIFRPRE86IHRoaXMgbmVlZHMgdG8gYmUgcmVhZCBmcm9tIHRoZSBkb2NJbmZvIHNldHRpbmcgZm9yIHRoaXNcbiAgICAgICAgICAgIC8vIGRvY3VtZW50IGFuZCB0aGUgZGVmYXVsdCBoZXJlXG5cbiAgICAgICAgICAgIHR5cGU6IFBhZ2VtYXJrVHlwZS5TSU5HTEVfQ09MVU1OLFxuXG4gICAgICAgICAgICBjb2x1bW46IDAsXG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qga2V5T3B0aW9ucyA9IFBhZ2VtYXJrcy5jcmVhdGVLZXlPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChrZXlPcHRpb25zLmNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNdXN0IHNwZWNpZnkgZWl0aGVyIHJlY3Qgb3IgcGVyY2VudGFnZS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5T3B0aW9ucy5jb3VudCA9PT0gMSkge1xuXG4gICAgICAgICAgICBpZiAoa2V5T3B0aW9ucy5oYXNQZXJjZW50YWdlKSB7XG4gICAgICAgICAgICAgICAga2V5T3B0aW9ucy5yZWN0ID0gUGFnZW1hcmtSZWN0cy5jcmVhdGVGcm9tUGVyY2VudGFnZShrZXlPcHRpb25zLnBlcmNlbnRhZ2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoa2V5T3B0aW9ucy5oYXNSZWN0KSB7XG4gICAgICAgICAgICAgICAga2V5T3B0aW9ucy5wZXJjZW50YWdlID0ga2V5T3B0aW9ucy5yZWN0LnRvUGVyY2VudGFnZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAocm91bmQoa2V5T3B0aW9ucy5wZXJjZW50YWdlKSAhPT0gcm91bmQoa2V5T3B0aW9ucy5yZWN0LnRvUGVyY2VudGFnZSgpKSkge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gXCJQZXJjZW50YWdlIGFuZCByZWN0IGFyZSBub3QgdGhlIHNhbWVcIjtcbiAgICAgICAgICAgIGxvZy53YXJuKG1zZywga2V5T3B0aW9ucy5wZXJjZW50YWdlLCBrZXlPcHRpb25zLnJlY3QsIGtleU9wdGlvbnMucmVjdC50b1BlcmNlbnRhZ2UoKSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNyZWF0ZWQgPSBvcHRpb25zLmNyZWF0ZWQgfHwgSVNPRGF0ZVRpbWVTdHJpbmdzLmNyZWF0ZSgpO1xuXG4gICAgICAgIGNvbnN0IGJhdGNoID0gb3B0aW9ucy5iYXRjaCB8fCBIYXNoY29kZXMuY3JlYXRlSUQoe2NyZWF0ZWQsIGlkOiB0aGlzLnNlcXVlbmNlcy5iYXRjaCsrfSk7XG5cbiAgICAgICAgY29uc3QgbW9kZSA9IG9wdGlvbnMubW9kZSB8fCBQYWdlbWFya01vZGUuUkVBRDtcblxuICAgICAgICBjb25zdCBpZCA9IFBhZ2VtYXJrcy5jcmVhdGVJRChjcmVhdGVkKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWdlbWFyayh7XG5cbiAgICAgICAgICAgIC8vIHBlci1wYWdlbWFyayBmaWVsZHMuXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIGd1aWQ6IGlkLFxuICAgICAgICAgICAgY3JlYXRlZCxcblxuICAgICAgICAgICAgLy8gdGhlIHJlc3QgYXJlIGZyb20gb3B0aW9ucy5cbiAgICAgICAgICAgIHR5cGU6IG9wdGlvbnMudHlwZSxcblxuICAgICAgICAgICAgLy8gZG8gTk9UIG1hdGguZmxvb3IgdGhpcy4gIEl0IGNhdXNlcyBpc3N1ZXMgd2hlbiBwZXJjZW50YWdlcyBhcmVcbiAgICAgICAgICAgIC8vIGxlc3MgdGhhbiAxIGFuZCBmb3IgbGFyZ2UgcGFnZXMgdGhlIHNtYWxsIGNoYW5nZXMgY2FuIG1ha2UgYVxuICAgICAgICAgICAgLy8gZGlmZmVyZW5jZSBpbiBwYWdlbWFyayBwbGFjZW1lbnRcbiAgICAgICAgICAgIHBlcmNlbnRhZ2U6IE51bWJlcnMudG9GaXhlZEZsb2F0KGtleU9wdGlvbnMucGVyY2VudGFnZSwgMTApLFxuXG4gICAgICAgICAgICBjb2x1bW46IG9wdGlvbnMuY29sdW1uLFxuICAgICAgICAgICAgcmVjdDoga2V5T3B0aW9ucy5yZWN0LFxuICAgICAgICAgICAgYmF0Y2gsXG4gICAgICAgICAgICBtb2RlXG5cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHJldHVybiB7S2V5UGFnZW1hcmtPcHRpb25zfVxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIGNyZWF0ZUtleU9wdGlvbnMob3B0aW9uczogUGFnZW1hcmtPcHRpb25zKTogS2V5UGFnZW1hcmtPcHRpb25zIHtcblxuICAgICAgICBjb25zdCBrZXlPcHRpb25zOiBLZXlQYWdlbWFya09wdGlvbnMgPSB7XG4gICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgIGhhc1BlcmNlbnRhZ2U6IGZhbHNlLFxuICAgICAgICAgICAgaGFzUmVjdDogZmFsc2UsXG4gICAgICAgICAgICByZWN0OiBvcHRpb25zLnJlY3QsXG4gICAgICAgICAgICBwZXJjZW50YWdlOiBvcHRpb25zLnBlcmNlbnRhZ2VcbiAgICAgICAgfTtcblxuICAgICAgICBrZXlPcHRpb25zLmhhc1BlcmNlbnRhZ2UgPSBcInBlcmNlbnRhZ2VcIiBpbiBvcHRpb25zO1xuICAgICAgICBrZXlPcHRpb25zLmhhc1JlY3QgPSBcInJlY3RcIiBpbiBvcHRpb25zO1xuXG4gICAgICAgIGlmIChrZXlPcHRpb25zLmhhc1BlcmNlbnRhZ2UpIHtcbiAgICAgICAgICAgICsra2V5T3B0aW9ucy5jb3VudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXlPcHRpb25zLmhhc1JlY3QpIHtcbiAgICAgICAgICAgICsra2V5T3B0aW9ucy5jb3VudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBrZXlPcHRpb25zO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHVwZ3JhZGUocGFnZW1hcmtzOiB7W2lkOiBzdHJpbmddOiBQYWdlbWFya30pIHtcblxuICAgICAgICBjb25zdCByZXN1bHQ6IHtbaWQ6IHN0cmluZ106IFBhZ2VtYXJrfSA9IHt9O1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCBwYWdlbWFya3MpO1xuXG4gICAgICAgIERpY3Rpb25hcmllcy5mb3JEaWN0KHJlc3VsdCwgKGtleSwgcGFnZW1hcmspID0+IHtcblxuICAgICAgICAgICAgaWYgKCEgcGFnZW1hcmsucmVjdCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHBhZ2VtYXJrLnBlcmNlbnRhZ2UgPj0gMCAmJiBwYWdlbWFyay5wZXJjZW50YWdlIDw9IDEwMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdyByZWN0IGJ1dCB3ZSBjYW4gYnVpbGQgb25lIGZyb20gdGhlIHBlcmNlbnRhZ2UuXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VtYXJrLnJlY3QgPSBQYWdlbWFya1JlY3RzLmNyZWF0ZUZyb21QZXJjZW50YWdlKHBhZ2VtYXJrLnBlcmNlbnRhZ2UpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG5vaW5zcGVjdGlvbiBKU1N1c3BpY2lvdXNOYW1lQ29tYmluYXRpb25cbiAgICAgICAgICAgIGlmIChNYXRoLmZsb29yKHBhZ2VtYXJrLnJlY3QudG9wKSA9PT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhIGJyb2tlbiBwYWdlbWFyayB3aGVyZSB0aGUgdG9wIGlzIGF0IHRoZSBlbmQgb2YgdGhlXG4gICAgICAgICAgICAgICAgLy8gcGFnZSB3aGljaCBtYWtlcyBubyBzZW5zZS5cbiAgICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0W2tleV07XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoISBwYWdlbWFyay5pZCkge1xuICAgICAgICAgICAgICAgIC8vIGxvZy5kZWJ1ZyhcIlBhZ2VtYXJrIGdpdmVuIElEXCIpO1xuICAgICAgICAgICAgICAgIHBhZ2VtYXJrLmlkID0ga2V5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoICEgcGFnZW1hcmsubW9kZSkge1xuICAgICAgICAgICAgICAgIC8vIGxvZy5kZWJ1ZyhcIlVzaW5nIGRlZmF1bHQgcGFnZW1hcmsgbW9kZS5cIik7XG4gICAgICAgICAgICAgICAgcGFnZW1hcmsubW9kZSA9IFBhZ2VtYXJrTW9kZS5SRUFEO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoICEgaXNQcmVzZW50KHBhZ2VtYXJrLnBlcmNlbnRhZ2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9nLmRlYnVnKFwiTm8gcGFnZW1hcmsgcGVyY2VudGFnZS4gQXNzaWduaW5nIHplcm8uXCIpO1xuICAgICAgICAgICAgICAgIHBhZ2VtYXJrLnBlcmNlbnRhZ2UgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgcGFnZW1hcmtzIG9uIHRoZSBnaXZlbiBwYWdlLlxuICAgICAqXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyB1cGRhdGVQYWdlbWFyayhkb2NNZXRhOiBJRG9jTWV0YSwgcGFnZU51bTogbnVtYmVyLCBwYWdlbWFyazogSVBhZ2VtYXJrKSB7XG5cbiAgICAgICAgdGhpcy5kb0RvY01ldGFNdXRhdGlvbihkb2NNZXRhLCBwYWdlTnVtLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYWdlTWV0YSA9IERvY01ldGFzLmdldFBhZ2VNZXRhKGRvY01ldGEsIHBhZ2VOdW0pO1xuXG4gICAgICAgICAgICB0aGlzLmRvUGFnZU1ldGFNdXRhdGlvbihwYWdlTWV0YSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHBhZ2VNZXRhLnBhZ2VtYXJrc1twYWdlbWFyay5pZF0gPSBwYWdlbWFyaztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZSB0aGUgcGFnZW1hcmtzIHdpdGggYSBuZXcgcGFnZW1hcmsgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9uc1xuICAgICAqIHJlcGxhY2VkLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmVwbGFjZVBhZ2VtYXJrKGRvY01ldGE6IElEb2NNZXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VtYXJrUHRyOiBQYWdlbWFya1BUUixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBSZXBsYWNlUGFnZW1hcmtPcHRpb25zKSB7XG5cbiAgICAgICAgY29uc3QgcGFnZW1hcmtzVG9NdXRhdGUgPSAoKSA9PiB7XG5cbiAgICAgICAgICAgIC8vIHRoZSBwYWdlbWFya3MgdG8gbXV0YXRlLlxuICAgICAgICAgICAgY29uc3QgcmVzdWx0OiBQYWdlbWFya1BhZ2VNZXRhUmVmW10gPSBbXTtcblxuICAgICAgICAgICAgaWYgKHBhZ2VtYXJrUHRyLnJlZikge1xuXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogc2luY2Ugd2UncmUgZ2l2ZW4gYSBwYWdlbWFyayBkaXJlY3RseSBzaG91bGRuJ3RcbiAgICAgICAgICAgICAgICAvLyB3ZSBhbHNvIHJlc29sdmUgYnkgdGhlIGJhdGNoP1xuXG4gICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgcGFnZW1hcmtzIGJ5IHJlZi4uLlxuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VNZXRhID0gRG9jTWV0YXMuZ2V0UGFnZU1ldGEoZG9jTWV0YSwgcGFnZW1hcmtQdHIucmVmLnBhZ2VOdW0pO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtwYWdlTWV0YSwgaWQ6IHBhZ2VtYXJrUHRyLnJlZi5wYWdlbWFyay5pZH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGFnZW1hcmtQdHIuYmF0Y2gpIHtcbiAgICAgICAgICAgICAgICAvLyBmaW5kIHRoZSBwYWdlbWFya3MgYnkgYmF0Y2guLi5cbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCguLi50aGlzLnBhZ2VtYXJrc1dpdGhpbkJhdGNoKGRvY01ldGEsIHBhZ2VtYXJrUHRyLmJhdGNoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBmaW5kIHdoYXQgd2Ugc2hvdWxkIG11dGF0ZVxuICAgICAgICBjb25zdCBwYWdlbWFya1JlZnMgPSBwYWdlbWFya3NUb011dGF0ZSgpO1xuXG4gICAgICAgIC8vIG5vdyBwZXJmb3JtIHRoZSBtdXRhdGlvbnMgb24gdGhlIHBhZ2VtYXJrcy4gIEF0IHRoZSBlbmQgd2Ugc2hvdWxkXG4gICAgICAgIC8vIFNUSUxMIGNvbXB1dGUgdGhlIHByb2dyZXNzIG9uIHRoZSBkb2N1bWVudCBhcyB3ZSBhcmUgY2hhbmdpbmcgdGhlXG4gICAgICAgIC8vIHR5cGVzIG9uIHRoZSBwYWdlbWFyay5cbiAgICAgICAgRG9jTWV0YXMud2l0aEJhdGNoZWRNdXRhdGlvbnMoZG9jTWV0YSwgKCkgPT4ge1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlZiBvZiBwYWdlbWFya1JlZnMpIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJQYWdlbWFyayA9IHJlZi5wYWdlTWV0YS5wYWdlbWFya3NbcmVmLmlkXTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1BhZ2VtYXJrID0gbmV3IFBhZ2VtYXJrKGN1cnJQYWdlbWFyayk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5tb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1BhZ2VtYXJrLm1vZGUgPSBvcHRpb25zLm1vZGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5kb1BhZ2VNZXRhTXV0YXRpb24ocmVmLnBhZ2VNZXRhLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlZi5wYWdlTWV0YS5wYWdlbWFya3NbcmVmLmlkXSA9IG5ld1BhZ2VtYXJrO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZG9jTWV0YSBUaGUgRG9jTWV0YSB0byB1cGRhdGVcbiAgICAgKiBAcGFyYW0gcGFnZU51bTogVGhlIHBhZ2UgbnVtYmVyIHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0gaWQgV2hlbiBpZCBpcyBzcGVjaWZpZWQgd2UgZGVsZXRlIGp1c3QgYSBzcGVjaWZpYyBwYWdlbWFyayxcbiAgICAgKiBvdGhlcndpc2Ugd2UgZGVsZXRlIGFsbCBvZiB0aGVtLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlUGFnZW1hcmsoZG9jTWV0YTogSURvY01ldGEsIHBhZ2VOdW06IFBhZ2VOdW1iZXIsIGlkPzogc3RyaW5nKSB7XG5cbiAgICAgICAgdGhpcy5kb0RvY01ldGFNdXRhdGlvbihkb2NNZXRhLCBwYWdlTnVtLCAoKSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnN0IHBhZ2VNZXRhID0gRG9jTWV0YXMuZ2V0UGFnZU1ldGEoZG9jTWV0YSwgcGFnZU51bSk7XG5cbiAgICAgICAgICAgIGxldCBwYWdlTWV0YU11dGF0b3I6IFZPSURfRlVOQ1RJT04gfCB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIGlmIChpZCkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcHJpbWFyeVBhZ2VtYXJrID0gcGFnZU1ldGEucGFnZW1hcmtzW2lkXTtcblxuICAgICAgICAgICAgICAgIGlmIChwcmltYXJ5UGFnZW1hcmspIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocHJpbWFyeVBhZ2VtYXJrLmJhdGNoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgcGFnZW1hcmsgaGFzIGEgYmF0Y2ggd2UgaGF2ZSB0byBkZWxldGUgZXZlcnl0aGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhlIHNhbWUgYmF0Y2hcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFnZW1hcmtzV2l0aGluQmF0Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IHRoaXMucGFnZW1hcmtzV2l0aGluQmF0Y2goZG9jTWV0YSwgcHJpbWFyeVBhZ2VtYXJrLmJhdGNoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZU1ldGFNdXRhdG9yID0gKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYWdlbWFya1JlZiBvZiBwYWdlbWFya3NXaXRoaW5CYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcGFnZW1hcmtSZWYucGFnZU1ldGEucGFnZW1hcmtzW3BhZ2VtYXJrUmVmLmlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlTWV0YU11dGF0b3IgPSAoKSA9PiBkZWxldGUgcGFnZU1ldGEucGFnZW1hcmtzW2lkXTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2cud2FybihgTm8gcGFnZW1hcmsgZm91bmQgZm9yIGlkICR7aWR9IGZvciBwYWdlTnVtICR7cGFnZU51bX1gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFnZU1ldGFNdXRhdG9yID0gKCkgPT4gT2JqZWN0cy5jbGVhcihwYWdlTWV0YS5wYWdlbWFya3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmRvUGFnZU1ldGFNdXRhdGlvbihwYWdlTWV0YSwgcGFnZU1ldGFNdXRhdG9yKTtcblxuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjYW4gYWxsIHRoZSBwYWdlbWFya3MgZmluZGluZyBvbmVzIHdpdGggdGhlIHNhbWUgYmF0Y2guXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgcGFnZW1hcmtzV2l0aGluQmF0Y2goZG9jTWV0YTogSURvY01ldGEsIGJhdGNoOiBzdHJpbmcpOiBSZWFkb25seUFycmF5PFBhZ2VtYXJrUGFnZU1ldGFSZWY+IHtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcblxuICAgICAgICBjb25zdCBuclBhZ2VzID0gT2JqZWN0LmtleXMoZG9jTWV0YS5wYWdlTWV0YXMpLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGxldCBwYWdlSWR4ID0gMTsgcGFnZUlkeCA8PSBuclBhZ2VzOyArK3BhZ2VJZHgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhZ2VNZXRhID0gRG9jTWV0YXMuZ2V0UGFnZU1ldGEoZG9jTWV0YSwgcGFnZUlkeCk7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFnZW1hcmsgb2YgT2JqZWN0LnZhbHVlcyhwYWdlTWV0YS5wYWdlbWFya3MgfHwge30pKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocGFnZW1hcmsuYmF0Y2ggPT09IGJhdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtwYWdlTWV0YSwgaWQ6IHBhZ2VtYXJrLmlkfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBkb0RvY01ldGFNdXRhdGlvbihkb2NNZXRhOiBJRG9jTWV0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlTnVtOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZW1hcmtNdXRhdG9yOiAoKSA9PiB2b2lkKTogdm9pZCB7XG5cbiAgICAgICAgUHJlY29uZGl0aW9ucy5hc3NlcnRQcmVzZW50KGRvY01ldGEsIFwiZG9jTWV0YVwiKTtcbiAgICAgICAgUHJlY29uZGl0aW9ucy5hc3NlcnRQcmVzZW50KHBhZ2VOdW0sIFwicGFnZU51bVwiKTtcblxuICAgICAgICBEb2NNZXRhcy53aXRoQmF0Y2hlZE11dGF0aW9ucyhkb2NNZXRhLCAoKSA9PiB7XG5cbiAgICAgICAgICAgIHBhZ2VtYXJrTXV0YXRvcigpO1xuXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGguZmxvb3IoRG9jTWV0YXMuY29tcHV0ZVByb2dyZXNzKGRvY01ldGEpICogMTAwKTtcbiAgICAgICAgICAgIGRvY01ldGEuZG9jSW5mby5wcm9ncmVzcyA9IHByb2dyZXNzO1xuXG4gICAgICAgICAgICBkb2NNZXRhLmRvY0luZm8ucmVhZGluZ1BlckRheVxuICAgICAgICAgICAgICAgID0gUmVhZGluZ092ZXJ2aWV3cy5jb21wdXRlKE9iamVjdC52YWx1ZXMoZG9jTWV0YS5wYWdlTWV0YXMpKTtcblxuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11dGF0ZSB0aGUgcGFnZW1hcmtzIG9uIHRoZSBQYWdlTWV0YSBhbmQgYWxzbyB1cGRhdGUgdGhlIHJlYWRpbmdQcm9ncmVzc1xuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIGRvUGFnZU1ldGFNdXRhdGlvbihwYWdlTWV0YTogSVBhZ2VNZXRhLCBwYWdlTWV0YU11dGF0b3I/OiBWT0lEX0ZVTkNUSU9OKTogdm9pZCB7XG5cbiAgICAgICAgaWYgKCEgcGFnZU1ldGFNdXRhdG9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjcmVhdGVQcm9ncmVzc0J5TW9kZSA9ICgpID0+IHtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEhpdE1hcCgpO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhZ2VtYXJrIG9mIE9iamVjdC52YWx1ZXMocGFnZU1ldGEucGFnZW1hcmtzKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGUgPSBwYWdlbWFyay5tb2RlIHx8IFBhZ2VtYXJrTW9kZS5SRUFEO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5yZWdpc3RlckhpdChtb2RlLCBwYWdlbWFyay5wZXJjZW50YWdlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50b0xpdGVyYWxNYXAoKTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHdyaXRlUmVhZGluZ1Byb2dyZXNzID0gKHByZUV4aXN0aW5nPzogYm9vbGVhbikgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBwZXJjZW50YWdlcyA9IE9iamVjdC52YWx1ZXMocGFnZU1ldGEucGFnZW1hcmtzKVxuICAgICAgICAgICAgICAgIC5tYXAoY3VycmVudCA9PiBjdXJyZW50LnBlcmNlbnRhZ2UpO1xuXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9IFBlcmNlbnRhZ2VzLnN1bSguLi5wZXJjZW50YWdlcyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzQnlNb2RlID0gY3JlYXRlUHJvZ3Jlc3NCeU1vZGUoKTtcblxuICAgICAgICAgICAgY29uc3QgcmVhZGluZ1Byb2dyZXNzID1cbiAgICAgICAgICAgICAgICBSZWFkaW5nUHJvZ3Jlc3Nlcy5jcmVhdGUocHJvZ3Jlc3MsIHByb2dyZXNzQnlNb2RlLCBwcmVFeGlzdGluZyk7XG5cbiAgICAgICAgICAgIHBhZ2VNZXRhLnJlYWRpbmdQcm9ncmVzc1tyZWFkaW5nUHJvZ3Jlc3MuaWRdID0gcmVhZGluZ1Byb2dyZXNzO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZG9QcmVFeGlzdGluZyA9XG4gICAgICAgICAgICBEaWN0aW9uYXJpZXMuZW1wdHkocGFnZU1ldGEucmVhZGluZ1Byb2dyZXNzKSAmJiAhIERpY3Rpb25hcmllcy5lbXB0eShwYWdlTWV0YS5wYWdlbWFya3MpO1xuXG4gICAgICAgIGlmIChkb1ByZUV4aXN0aW5nKSB7XG4gICAgICAgICAgICB3cml0ZVJlYWRpbmdQcm9ncmVzcyh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhZ2VNZXRhTXV0YXRvcigpO1xuXG4gICAgICAgIHdyaXRlUmVhZGluZ1Byb2dyZXNzKCk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNvbXB1dGVSZWFkaW5nUHJvZ3Jlc3NTdGF0cyhkb2NNZXRhUHJvdmlkZXJzOiBSZWFkb25seUFycmF5PFByb3ZpZGVyPElEb2NNZXRhPj4pIHtcblxuICAgICAgICAvLyBUT0RPOiB3ZSBkb24ndCBhaHZlIHRoZSBwYWdlTWV0YSBoZXJlIHNvIG1heWJlIHdlIGNvdWxkIGp1c3Qgd3JpdGVcbiAgICAgICAgLy8gb3V0IGEgbWluaW1hbCB2ZWN0b3Igb2YgZGF5ICsgbnVtYmVyIG9mIHRoZSBudW1iZXIgb2YgcGFnZXMgd2UndmVcbiAgICAgICAgLy8gcmVhZCB0byB0aGUgRG9jSW5mb1xuXG4gICAgICAgIGZvciAoY29uc3QgZG9jTWV0YVByb3ZpZGVyIG9mIGRvY01ldGFQcm92aWRlcnMpIHtcblxuICAgICAgICAgICAgY29uc3QgZG9jTWV0YSA9IGRvY01ldGFQcm92aWRlcigpO1xuXG5cblxuICAgICAgICB9XG5cbiAgICB9XG5cbn1cblxuaW50ZXJmYWNlIFBhZ2VtYXJrUGFnZU1ldGFSZWYge1xuICAgIHJlYWRvbmx5IHBhZ2VNZXRhOiBJUGFnZU1ldGE7XG4gICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2VtYXJrT3B0aW9ucyB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBwYWdlbWFyayB3ZSdyZSB3b3JraW5nIHdpdGguXG4gICAgICovXG4gICAgdHlwZTogUGFnZW1hcmtUeXBlO1xuXG4gICAgLyoqXG4gICAgICovXG4gICAgcmVjdDogUGFnZW1hcmtSZWN0O1xuXG4gICAgLyoqXG4gICAgICovXG4gICAgcGVyY2VudGFnZTogbnVtYmVyO1xuXG4gICAgY29sdW1uOiBudW1iZXI7XG5cbiAgICBiYXRjaD86IHN0cmluZztcblxuICAgIGNyZWF0ZWQ/OiBzdHJpbmc7XG5cbiAgICBtb2RlPzogUGFnZW1hcmtNb2RlO1xuXG59XG5cbi8qKlxuICogQSBwb2ludGVyIHRvIGEgcGFnZW1hcmsgZWl0aGVyIGJ5IGlkICwgYmF0Y2guXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGFnZW1hcmtQVFIge1xuXG4gICAgcmVhZG9ubHkgcmVmPzogUGFnZW1hcmtSZWY7XG5cbiAgICByZWFkb25seSBiYXRjaD86IHN0cmluZztcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcGxhY2VQYWdlbWFya09wdGlvbnMge1xuXG4gICAgcmVhZG9ubHkgbW9kZT86IFBhZ2VtYXJrTW9kZTtcblxufVxuXG4vKipcbiAqIFRoZSBrZXkgLyBpbXBvcnRhbnQgb3B0aW9ucyB3aGVuIGNyZWF0aW5nIGEgUGFnZW1hcmsuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgS2V5UGFnZW1hcmtPcHRpb25zIHtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0b3RhbCBudW1iZXIgb2Yga2V5IG9wdGlvbnMuXG4gICAgICovXG4gICAgY291bnQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRydWUgd2hlbiB3ZSBoYXZlIHRoZSBwZXJjZW50YWdlLlxuICAgICAqXG4gICAgICovXG4gICAgaGFzUGVyY2VudGFnZTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFRydWUgd2hlbiB3ZSBoYXZlIHRoZSByZWN0LlxuICAgICAqXG4gICAgICovXG4gICAgaGFzUmVjdDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqL1xuICAgIHJlY3Q6IFBhZ2VtYXJrUmVjdDtcblxuICAgIC8qKlxuICAgICAqL1xuICAgIHBlcmNlbnRhZ2U6IG51bWJlcjtcblxufVxuXG5leHBvcnQgdHlwZSBWT0lEX0ZVTkNUSU9OID0gKCkgPT4gdm9pZDtcbiJdfQ==