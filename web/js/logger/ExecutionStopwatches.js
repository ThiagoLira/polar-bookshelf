"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Stopwatches_1 = require("polar-shared/src/util/Stopwatches");
const Logger_1 = require("polar-shared/src/logger/Logger");
class ExecutionStopwatches {
    static create(name, delegate, thresholds = new DefaultThresholds()) {
        const log = Logger_1.Logger.create();
        const stopwatch = Stopwatches_1.Stopwatches.create();
        try {
            return delegate();
        }
        finally {
            const trackedDuration = stopwatch.stop();
        }
    }
    static toLevel(duration, thresholds) {
        if (duration > thresholds.error) {
            return 'error';
        }
        else if (duration > thresholds.warn) {
            return 'warn';
        }
        else if (duration > thresholds.info) {
            return 'info';
        }
        return undefined;
    }
}
exports.ExecutionStopwatches = ExecutionStopwatches;
class DefaultThresholds {
    constructor() {
        this.info = 500;
        this.warn = 1000;
        this.error = 1500;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhlY3V0aW9uU3RvcHdhdGNoZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJFeGVjdXRpb25TdG9wd2F0Y2hlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLG1FQUE4RDtBQUU5RCwyREFBc0Q7QUFrQnRELE1BQWEsb0JBQW9CO0lBRXRCLE1BQU0sQ0FBQyxNQUFNLENBQUksSUFBWSxFQUFFLFFBQWlCLEVBQUUsYUFBeUIsSUFBSSxpQkFBaUIsRUFBRTtRQUlyRyxNQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFNUIsTUFBTSxTQUFTLEdBQUcseUJBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUV2QyxJQUFJO1lBRUEsT0FBTyxRQUFRLEVBQUUsQ0FBQztTQUVyQjtnQkFBUztZQUVOLE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUU1QztJQUVMLENBQUM7SUFFTyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQW9CLEVBQUUsVUFBc0I7UUFFL0QsSUFBSSxRQUFRLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRTtZQUM3QixPQUFPLE9BQU8sQ0FBQztTQUNsQjthQUFNLElBQUksUUFBUSxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUU7WUFDbkMsT0FBTyxNQUFNLENBQUM7U0FDakI7YUFBTSxJQUFJLFFBQVEsR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQ25DLE9BQU8sTUFBTSxDQUFDO1NBQ2pCO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFFckIsQ0FBQztDQUVKO0FBcENELG9EQW9DQztBQVlELE1BQU0saUJBQWlCO0lBQXZCO1FBRW9CLFNBQUksR0FBRyxHQUFHLENBQUM7UUFFWCxTQUFJLEdBQUcsSUFBSSxDQUFDO1FBRVosVUFBSyxHQUFHLElBQUksQ0FBQztJQUVqQyxDQUFDO0NBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0R1cmF0aW9uU3RyLCBEdXJhdGlvbn0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy91dGlsL1RpbWVEdXJhdGlvbnMnO1xuaW1wb3J0IHtTdG9wd2F0Y2hlc30gZnJvbSAncG9sYXItc2hhcmVkL3NyYy91dGlsL1N0b3B3YXRjaGVzJztcbmltcG9ydCB7RHVyYXRpb25NU30gZnJvbSAncG9sYXItc2hhcmVkL3NyYy91dGlsL1RpbWVEdXJhdGlvbnMnO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvbG9nZ2VyL0xvZ2dlcic7XG5cbi8vIFRPRE86IEkgd291bGQgbGlrZSB0byByZXN1bWUgdGhpcyBpbiB0aGUgZnV0dXJlIGJ1dCB0aGUgZGVzaWduIGhlcmUgaXNcbi8vIGRpZmZpY3VsdDpcbi8vXG4vLyAtIGlzIHRoZSBMb2dnZXIgY3JlYXRlZCB3aXRoIHRoZSByaWdodCBuYW1lIGlmIGNhbGxlZCBmcm9tIGEgZnVuY3Rpb24/XG4vLyAgIFByb2JhYmx5IG5vdCBiZWNhdXNlIHdlJ3JlIGxvb2tpbmcgYXQgdGhlIGNhbGxzIHN0YWNrIGFuZCB0aGlzIGFkZHMgYW5vdGhlclxuLy8gICBmcmFtZVxuLy9cbi8vIC0gSSBjb3VsZCBhZGQgdGhpcyB0byBMb2dnZXIgZGlyZWN0bHkgYW5kIGhhdmUgdGltZWQoKSB0aGVyZSBvciBjcmVhdGUgdGhpc1xuLy8gICB3aXRoIGEgY29uc3QgYXQgdGhlIHRvcCBsZXZlbCBGUk9NIHRoZSBsb2cgKHRoaXMgaXMgcHJvYmFibHkgdGhlIGJlc3Rcbi8vICAgb3B0aW9uKSBhbmQgY2FsbCBpdCBzb21ldGhpbmcgbGlrZSBhIHRyYWNlciBvciBhIHRyYWNrZXIgb3IgYSB0aW1lciBhbmRcbi8vICAgc29tZSBvZiB0aGVtIGNvdWxkIGhhdmUgbW9yZSBmdW5jdGlvbnMgbGlrZSBvbmUgY291bGQgY2FsbFxuLy8gICBSZW5kZXJlckFuYWx5dGljcyB3aXRoIGEgdGltZXIuXG4vL1xuLy8gLSBJIGNvdWxkIG1ha2UgQUxMIHRoZSBsb2dnZXJzIGV4dGVuZHMgQmFzZUxvZ2dlciB3aGljaCBpcyBhbiBJTG9nZ2VyIGJ1dFxuLy8gICBhbHNvIGFkZHMgdGhpcyB0aW1pbmcgZnVuY3Rpbm9uYWxpdHkgYmVsb3cuXG5cbmV4cG9ydCBjbGFzcyBFeGVjdXRpb25TdG9wd2F0Y2hlcyB7XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZTxUPihuYW1lOiBzdHJpbmcsIGRlbGVnYXRlOiAoKSA9PiBULCB0aHJlc2hvbGRzOiBUaHJlc2hvbGRzID0gbmV3IERlZmF1bHRUaHJlc2hvbGRzKCkpOiBUIHtcblxuICAgICAgICAvLyBUT0RPOiBhYmlsaXR5IHRvIHNwZWNpZnkganVzdCBPTkUgbGV2ZWwgb3IgYSBuYW1lIGZvciB0aGUgdHJhY2VcblxuICAgICAgICBjb25zdCBsb2cgPSBMb2dnZXIuY3JlYXRlKCk7XG5cbiAgICAgICAgY29uc3Qgc3RvcHdhdGNoID0gU3RvcHdhdGNoZXMuY3JlYXRlKCk7XG5cbiAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlKCk7XG5cbiAgICAgICAgfSBmaW5hbGx5IHtcblxuICAgICAgICAgICAgY29uc3QgdHJhY2tlZER1cmF0aW9uID0gc3RvcHdhdGNoLnN0b3AoKTtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyB0b0xldmVsKGR1cmF0aW9uOiBEdXJhdGlvbk1TLCB0aHJlc2hvbGRzOiBUaHJlc2hvbGRzKTogVGhyZXNob2xkTGV2ZWwgfCB1bmRlZmluZWQge1xuXG4gICAgICAgIGlmIChkdXJhdGlvbiA+IHRocmVzaG9sZHMuZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiAnZXJyb3InO1xuICAgICAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID4gdGhyZXNob2xkcy53YXJuKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3dhcm4nO1xuICAgICAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID4gdGhyZXNob2xkcy5pbmZvKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2luZm8nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIH1cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRocmVzaG9sZHMge1xuXG4gICAgcmVhZG9ubHkgaW5mbzogRHVyYXRpb247XG5cbiAgICByZWFkb25seSB3YXJuOiBEdXJhdGlvbjtcblxuICAgIHJlYWRvbmx5IGVycm9yOiBEdXJhdGlvbjtcblxufVxuXG5jbGFzcyBEZWZhdWx0VGhyZXNob2xkcyBpbXBsZW1lbnRzIFRocmVzaG9sZHMge1xuXG4gICAgcHVibGljIHJlYWRvbmx5IGluZm8gPSA1MDA7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgd2FybiA9IDEwMDA7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgZXJyb3IgPSAxNTAwO1xuXG59XG5cbnR5cGUgVGhyZXNob2xkTGV2ZWwgPSAnZXJyb3InIHwgJ3dhcm4nIHwgJ2luZm8nO1xuIl19