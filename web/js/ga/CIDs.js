"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const CIDProviders_1 = require("./CIDProviders");
const Optional_1 = require("polar-shared/src/util/ts/Optional");
const CIDProvider_1 = require("./CIDProvider");
const Logger_1 = require("polar-shared/src/logger/Logger");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const log = Logger_1.Logger.create();
const KEY = 'ga_cid';
class CIDs {
    static get() {
        let cid = this.fetch();
        if (!cid) {
            cid = this.create();
        }
        this.set(cid);
        return cid;
    }
    static fetch() {
        const mainCID = Optional_1.Optional.of(CIDProviders_1.CIDProviders.getInstance())
            .filter(current => Preconditions_1.isPresent(current))
            .map(current => current.get())
            .getOrUndefined();
        const localCID = window.localStorage.getItem(KEY);
        return Optional_1.Optional.first(mainCID, localCID).getOrUndefined();
    }
    static set(cid) {
        window.localStorage.setItem(KEY, cid);
        CIDProviders_1.CIDProviders.setInstance(new CIDProvider_1.CIDProvider(cid));
    }
    static create() {
        return uuid_1.v4();
    }
}
exports.CIDs = CIDs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ0lEcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNJRHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBZ0M7QUFHaEMsaURBQTRDO0FBQzVDLGdFQUEyRDtBQUMzRCwrQ0FBMEM7QUFDMUMsMkRBQXNEO0FBQ3RELGtFQUF5RDtBQUV6RCxNQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFJNUIsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDO0FBRXJCLE1BQWEsSUFBSTtJQUtOLE1BQU0sQ0FBQyxHQUFHO1FBRWIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBRSxHQUFHLEVBQUU7WUFDUCxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3ZCO1FBR0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVkLE9BQU8sR0FBRyxDQUFDO0lBRWYsQ0FBQztJQUVPLE1BQU0sQ0FBQyxLQUFLO1FBRWhCLE1BQU0sT0FBTyxHQUFHLG1CQUFRLENBQUMsRUFBRSxDQUFDLDJCQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDbEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMseUJBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNyQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7YUFDN0IsY0FBYyxFQUFFLENBQUM7UUFFdEIsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFJbEQsT0FBTyxtQkFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFFOUQsQ0FBQztJQUVPLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBVztRQUMxQixNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdEMsMkJBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSx5QkFBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVPLE1BQU0sQ0FBQyxNQUFNO1FBS2pCLE9BQU8sU0FBSSxFQUFFLENBQUM7SUFDbEIsQ0FBQztDQUVKO0FBaERELG9CQWdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7djQgYXMgdXVpZH0gZnJvbSAndXVpZCc7XG5pbXBvcnQge3JlbW90ZX0gZnJvbSAnZWxlY3Ryb24nO1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy91dGlsL1Byb3ZpZGVycyc7XG5pbXBvcnQge0NJRFByb3ZpZGVyc30gZnJvbSAnLi9DSURQcm92aWRlcnMnO1xuaW1wb3J0IHtPcHRpb25hbH0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy91dGlsL3RzL09wdGlvbmFsJztcbmltcG9ydCB7Q0lEUHJvdmlkZXJ9IGZyb20gJy4vQ0lEUHJvdmlkZXInO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvbG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQge2lzUHJlc2VudH0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9QcmVjb25kaXRpb25zJztcblxuY29uc3QgbG9nID0gTG9nZ2VyLmNyZWF0ZSgpO1xuXG5kZWNsYXJlIHZhciB3aW5kb3c6IFdpbmRvdztcblxuY29uc3QgS0VZID0gJ2dhX2NpZCc7XG5cbmV4cG9ydCBjbGFzcyBDSURzIHtcblxuICAgIC8qKlxuICAgICAqIEdldCBhIHVuaXF1ZSBDSUQgZnJvbSBsb2NhbFN0b3JhZ2UuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXQoKTogc3RyaW5nIHtcblxuICAgICAgICBsZXQgY2lkID0gdGhpcy5mZXRjaCgpO1xuXG4gICAgICAgIGlmICghIGNpZCkge1xuICAgICAgICAgICAgY2lkID0gdGhpcy5jcmVhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFsd2F5cyBzZXQgaXQgYmFjayBzbyB0aGF0IHRoZSB2YWx1ZSBpcyBjb3BpZWQgaW50byBtYWluLlxuICAgICAgICB0aGlzLnNldChjaWQpO1xuXG4gICAgICAgIHJldHVybiBjaWQ7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBmZXRjaCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuXG4gICAgICAgIGNvbnN0IG1haW5DSUQgPSBPcHRpb25hbC5vZihDSURQcm92aWRlcnMuZ2V0SW5zdGFuY2UoKSlcbiAgICAgICAgICAgIC5maWx0ZXIoY3VycmVudCA9PiBpc1ByZXNlbnQoY3VycmVudCkpXG4gICAgICAgICAgICAubWFwKGN1cnJlbnQgPT4gY3VycmVudC5nZXQoKSlcbiAgICAgICAgICAgIC5nZXRPclVuZGVmaW5lZCgpO1xuXG4gICAgICAgIGNvbnN0IGxvY2FsQ0lEID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKEtFWSk7XG5cbiAgICAgICAgLy8gbG9nLmRlYnVnKGBtYWluQ0lEOiAke21haW5DSUR9LCBsb2NhbENJRDogJHtsb2NhbENJRH1gKTtcblxuICAgICAgICByZXR1cm4gT3B0aW9uYWwuZmlyc3QobWFpbkNJRCwgbG9jYWxDSUQpLmdldE9yVW5kZWZpbmVkKCk7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBzZXQoY2lkOiBzdHJpbmcpIHtcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKEtFWSwgY2lkKTtcbiAgICAgICAgQ0lEUHJvdmlkZXJzLnNldEluc3RhbmNlKG5ldyBDSURQcm92aWRlcihjaWQpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBjcmVhdGUoKTogc3RyaW5nIHtcbiAgICAgICAgLy8gVGhlIGNpZCBtdXN0IGJlIFVVSUQgdjQsIHVzaW5nIGEgVVVJRCB2MSB3aWxsIG5vdCB3b3JrLCB0aGUgZG9jIGlzXG4gICAgICAgIC8vIG1pc2xlYWRpbmcgdGhlcmUgYmVjYXVzZSBpdCBzdGF0ZXMgdGhhdCBpdCBzaG91bGQgdXNlIHY0LCBub3QgdGhhdCBpdFxuICAgICAgICAvLyBtdXN0LiBHb29nbGUgZG9lc24ndCBoYW5kbGUgdGhlIHYxIGFuZCBnZW5lcmF0ZXMgaXRzIG93biB1dWlkIHdoaWNoXG4gICAgICAgIC8vIG1lc3NlcyB0b3RhbGx5IHRoZSB3aG9sZSB0aGluZy5cbiAgICAgICAgcmV0dXJuIHV1aWQoKTtcbiAgICB9XG5cbn1cbiJdfQ==