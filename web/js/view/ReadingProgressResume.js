"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Elements_1 = require("../util/Elements");
const DocFormatFactory_1 = require("../docformat/DocFormatFactory");
const Rects_1 = require("../Rects");
const Arrays_1 = require("polar-shared/src/util/Arrays");
class ReadingProgressResume {
    static resume(docMeta) {
        setTimeout(() => this.doResume(docMeta), 1);
    }
    static doResume(docMeta) {
        const targetPagemark = this.computeTargetPagemark(docMeta);
        if (!targetPagemark) {
            return false;
        }
        const pages = document.querySelectorAll(".page");
        const pageNum = targetPagemark.pageNum;
        const pageElement = pages[pageNum - 1];
        const scrollParent = this.getScrollParent(pageElement);
        const pageOffset = Elements_1.Elements.getRelativeOffsetRect(pageElement, scrollParent);
        const pageTop = pageOffset.top;
        const pageHeight = Math.floor(pageElement.clientHeight);
        const computePagemarkHeight = () => {
            const docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
            if (docFormat.name === 'pdf') {
                const pagemarkBottom = Math.floor(Rects_1.Rects.createFromBasicRect(targetPagemark.pagemark.rect).bottom);
                const pagemarkBottomPerc = pagemarkBottom / 100;
                return pageHeight * pagemarkBottomPerc;
            }
            else {
                const pagemarkElements = Array.from(pageElement.querySelectorAll(".pagemark"))
                    .sort((a, b) => a.getBoundingClientRect().bottom - b.getBoundingClientRect().bottom);
                const pagemarkElement = Arrays_1.Arrays.last(pagemarkElements);
                if (pagemarkElement) {
                    return pagemarkElement.clientHeight;
                }
                else {
                    throw new Error("No pagemarkElement");
                }
            }
        };
        const pagemarkHeight = computePagemarkHeight();
        const windowDelta = window.innerHeight * (0.2);
        const newScrollTop = Math.floor(pageTop + pagemarkHeight - windowDelta);
        scrollParent.scrollTop = newScrollTop;
        return true;
    }
    static pdfjsVersion() {
        const win = window;
        if (win && win.pdfjsLib) {
            return (win.pdfjsLib.version);
        }
        return undefined;
    }
    static getScrollParent(element) {
        const docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
        if (docFormat.name === 'pdf') {
            return document.querySelector("#viewerContainer");
        }
        if (docFormat.name === 'html') {
            return document.querySelector(".polar-viewer");
        }
        return Elements_1.Elements.getScrollParent(element);
    }
    static computePagemarks(docMeta) {
        const result = [];
        for (const pageMeta of Object.values(docMeta.pageMetas)) {
            const pagemarks = Object.values(pageMeta.pagemarks || {});
            const pagemarkHolders = pagemarks.map(pagemark => {
                return {
                    pageNum: pageMeta.pageInfo.num,
                    pagemark
                };
            });
            result.push(...pagemarkHolders);
        }
        return result;
    }
    static computeTargetPagemark(docMeta) {
        const pagemarkHolders = this.computePagemarks(docMeta);
        let result;
        const comparePagemarks = (p0, p1) => {
            if (!p0) {
                return p1;
            }
            if (p0.pageNum < p1.pageNum) {
                return p1;
            }
            if (p0.pageNum === p1.pageNum) {
                if (Rects_1.Rects.createFromBasicRect(p0.pagemark.rect).bottom <
                    Rects_1.Rects.createFromBasicRect(p1.pagemark.rect).bottom) {
                    return p1;
                }
            }
            return p0;
        };
        for (const pagemarkHolder of pagemarkHolders) {
            result = comparePagemarks(result, pagemarkHolder);
        }
        return result;
    }
}
exports.ReadingProgressResume = ReadingProgressResume;
//# sourceMappingURL=data:application/json;base64,