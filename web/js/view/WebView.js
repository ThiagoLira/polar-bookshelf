"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const View_1 = require("./View");
const DocFormatFactory_1 = require("../docformat/DocFormatFactory");
const DocMetaDescriber_1 = require("../metadata/DocMetaDescriber");
const Functions_1 = require("polar-shared/src/util/Functions");
const Logger_1 = require("polar-shared/src/logger/Logger");
const ReadingProgressResume_1 = require("./ReadingProgressResume");
const RendererAnalytics_1 = require("../ga/RendererAnalytics");
const log = Logger_1.Logger.create();
class WebView extends View_1.View {
    constructor(model, prefsProvider) {
        super(model);
        this.prefsProvider = prefsProvider;
        this.docFormat = DocFormatFactory_1.DocFormatFactory.getInstance();
    }
    start() {
        this.model.registerListenerForDocumentLoaded(event => this.onDocumentLoaded(event));
        this.createTimer();
        return this;
    }
    createTimer() {
        const documentLoadTimer = RendererAnalytics_1.RendererAnalytics.createTimer('document', 'loaded');
        this.model.registerListenerForDocumentLoaded(event => documentLoadTimer.stop());
    }
    updateProgress() {
        const perc = this.computeProgress(this.model.docMeta);
        log.info("Percentage is now: " + perc);
        const headerElement = document.querySelector("#polar-header");
        if (headerElement) {
            headerElement.style.display = 'block';
        }
        const progressElement = document.querySelector("#polar-progress progress");
        progressElement.value = perc;
        const description = DocMetaDescriber_1.DocMetaDescriber.describe(this.model.docMeta);
        const docOverview = document.querySelector("#polar-doc-overview");
        if (docOverview) {
            docOverview.textContent = description;
        }
    }
    computeProgress(docMeta) {
        let total = 0;
        Functions_1.forDict(docMeta.pageMetas, (key, pageMeta) => {
            Functions_1.forDict(pageMeta.pagemarks, (column, pagemark) => {
                total += pagemark.percentage;
            });
        });
        const perc = total / (docMeta.docInfo.nrPages * 100);
        return perc;
    }
    onDocumentLoaded(event) {
        const datastorePrefs = this.prefsProvider.get();
        const autoResume = datastorePrefs.prefs.isMarked('settings-auto-resume', true);
        const docMeta = event.docMeta;
        log.info("WebView.onDocumentLoaded: ", docMeta);
        this.updateProgress();
        this.handleProgressDoubleClick(docMeta);
        if (autoResume) {
            ReadingProgressResume_1.ReadingProgressResume.resume(docMeta);
        }
    }
    handleProgressDoubleClick(docMeta) {
        document.querySelector("#polar-header").addEventListener('dblclick', () => {
            ReadingProgressResume_1.ReadingProgressResume.resume(docMeta);
        });
    }
}
exports.WebView = WebView;
//# sourceMappingURL=data:application/json;base64,