"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_context_menu_wrapper_1 = require("@burtonator/react-context-menu-wrapper");
const React = __importStar(require("react"));
const ContextMenu_1 = require("../../ui/context_menu/ContextMenu");
const react_dropdown_1 = require("@burtonator/react-dropdown");
const ContextMenuMessages_1 = require("../ContextMenuMessages");
const ContextMenuType_1 = require("../ContextMenuType");
const AnnotationSidebarClient_1 = require("../../annotation_sidebar/AnnotationSidebarClient");
const PagemarkModes_1 = require("../../metadata/PagemarkModes");
class BrowserContextMenu extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            selectionContexts: {
                page: false,
                areaHighlight: false,
                textHighlight: false,
                pagemark: false
            }
        };
        const id = this.props.id;
        react_context_menu_wrapper_1.addContextMenuEventListener(id, (eventName, data) => {
            const triggerEvent = data;
            const state = Object.assign(Object.assign({}, this.state), { triggerEvent });
            if (triggerEvent) {
                state.selectionContexts.page = triggerEvent.contextMenuTypes.includes(ContextMenuType_1.ContextMenuType.PAGE);
                state.selectionContexts.textHighlight = triggerEvent.contextMenuTypes.includes(ContextMenuType_1.ContextMenuType.TEXT_HIGHLIGHT);
                state.selectionContexts.areaHighlight = triggerEvent.contextMenuTypes.includes(ContextMenuType_1.ContextMenuType.AREA_HIGHLIGHT);
                state.selectionContexts.pagemark = triggerEvent.contextMenuTypes.includes(ContextMenuType_1.ContextMenuType.PAGEMARK);
            }
            this.setState(state);
        });
    }
    render() {
        const triggerEvent = this.state.triggerEvent;
        const CreateModeSubmenuItems = () => {
            return React.createElement(react_dropdown_1.MenuItem, { hidden: !this.state.selectionContexts.pagemark },
                "Pagemark",
                React.createElement(react_dropdown_1.MenuItem, null,
                    "Set Mode",
                    PagemarkModes_1.PagemarkModes.toDescriptors().map(current => {
                        return (React.createElement(react_dropdown_1.MenuItem, { key: current.key, hidden: !this.state.selectionContexts.pagemark, onSelect: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("set-pagemark-mode-" + current.key, triggerEvent) }, current.title));
                    })),
                React.createElement(react_dropdown_1.MenuItem, { divider: true }),
                React.createElement(react_dropdown_1.MenuItem, { hidden: !this.state.selectionContexts.pagemark, onSelect: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("delete-pagemark", triggerEvent) },
                    React.createElement("div", { className: "text-danger" }, "Delete")));
        };
        return (React.createElement(ContextMenu_1.ContextMenu, { id: this.props.id },
            React.createElement(react_dropdown_1.DropdownMenu, null,
                React.createElement(react_dropdown_1.MenuItem, { hidden: !this.state.selectionContexts.page, onSelect: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("create-pagemark-to-point", triggerEvent) }, "Create Pagemark to Point"),
                React.createElement(react_dropdown_1.MenuItem, { hidden: !this.state.selectionContexts.page, onSelect: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("create-pagemark", triggerEvent) }, "Create Pagemark Box"),
                React.createElement(react_dropdown_1.MenuItem, { hidden: !this.state.selectionContexts.page, onSelect: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("create-area-highlight", triggerEvent) }, "Create Area Highlight"),
                React.createElement(react_dropdown_1.MenuItem, { divider: true, hidden: !this.state.selectionContexts.pagemark }),
                React.createElement(CreateModeSubmenuItems, null),
                React.createElement(react_dropdown_1.MenuItem, { divider: true, hidden: !this.state.selectionContexts.textHighlight }),
                React.createElement(react_dropdown_1.MenuItem, { hidden: !this.state.selectionContexts.textHighlight },
                    "Text Highlight",
                    React.createElement(react_dropdown_1.MenuItem, { hidden: !this.state.selectionContexts.textHighlight, onSelect: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("scroll-to-text-highlight", triggerEvent) }, "Scroll Into View"),
                    React.createElement(react_dropdown_1.MenuItem, { hidden: !this.state.selectionContexts.textHighlight, onSelect: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("delete-text-highlight", triggerEvent) },
                        React.createElement("div", { className: "text-danger" }, "Delete"))),
                React.createElement(react_dropdown_1.MenuItem, { divider: true, hidden: !this.state.selectionContexts.areaHighlight }),
                React.createElement(react_dropdown_1.MenuItem, { hidden: !this.state.selectionContexts.areaHighlight },
                    "Area Highlight",
                    React.createElement(react_dropdown_1.MenuItem, { hidden: !this.state.selectionContexts.areaHighlight, onSelect: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("delete-area-highlight", triggerEvent) },
                        React.createElement("div", { className: "text-danger" }, "Delete"))),
                React.createElement(react_dropdown_1.MenuItem, { divider: true }),
                React.createElement(react_dropdown_1.MenuItem, { onSelect: () => AnnotationSidebarClient_1.AnnotationSidebarClient.toggleAnnotationSidebar() }, "Toggle Annotation Sidebar"))));
    }
}
exports.BrowserContextMenu = BrowserContextMenu;
//# sourceMappingURL=data:application/json;base64,