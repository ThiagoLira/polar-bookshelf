"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TriggerEvent_1 = require("../TriggerEvent");
const electron_1 = require("electron");
const Logger_1 = require("polar-shared/src/logger/Logger");
const Broadcaster_1 = require("../../ipc/Broadcaster");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const ContextMenuType_1 = require("../ContextMenuType");
const AnnotationSidebarClient_1 = require("../../annotation_sidebar/AnnotationSidebarClient");
const PagemarkModes_1 = require("../../metadata/PagemarkModes");
const ContextMenuMessages_1 = require("../ContextMenuMessages");
const Arrays_1 = require("polar-shared/src/util/Arrays");
const log = Logger_1.Logger.create();
class ElectronContextMenu {
    constructor() {
        electron_1.ipcMain.on('context-menu-trigger', (event, message) => {
            const triggerEvent = TriggerEvent_1.TriggerEvent.create(message);
            this.trigger(triggerEvent, event.sender);
        });
        new Broadcaster_1.Broadcaster('create-annotation');
    }
    trigger(triggerEvent, sender) {
        Preconditions_1.Preconditions.assertNotNull(sender, "sender");
        const window = electron_1.BrowserWindow.getFocusedWindow();
        const ctxMenu = this.createContextMenu(triggerEvent, sender);
        ctxMenu.popup({
            window
        });
    }
    cmdNotify(command, triggerEvent, sender) {
        const event = {
            command,
            matchingSelectors: triggerEvent.matchingSelectors,
            docDescriptor: triggerEvent.docDescriptor
        };
        sender.send("context-menu-command", event);
    }
    createContextMenu(triggerEvent, sender) {
        Preconditions_1.Preconditions.assertNotNull(sender, "sender");
        const contextMenus = [];
        if (triggerEvent.contextMenuTypes.includes(ContextMenuType_1.ContextMenuType.PAGE)) {
            contextMenus.push(this.createPageContextMenu(triggerEvent, sender));
        }
        if (triggerEvent.contextMenuTypes.includes(ContextMenuType_1.ContextMenuType.TEXT_HIGHLIGHT)) {
            contextMenus.push(this.createTextHighlightContextMenu(triggerEvent, sender));
        }
        if (triggerEvent.contextMenuTypes.includes(ContextMenuType_1.ContextMenuType.AREA_HIGHLIGHT)) {
            contextMenus.push(this.createAreaHighlightContextMenu(triggerEvent, sender));
        }
        if (triggerEvent.contextMenuTypes.includes(ContextMenuType_1.ContextMenuType.PAGEMARK)) {
            contextMenus.push(this.createPagemarkContextMenu(triggerEvent, sender));
        }
        contextMenus.push(this.createDefaultContextMenu(triggerEvent, sender));
        const ctxMenu = new electron_1.Menu();
        Arrays_1.Arrays.createSiblings(contextMenus).forEach(contextMenuCursor => {
            contextMenuCursor.curr.items.forEach(menuItem => {
                ctxMenu.append(menuItem);
            });
            if (contextMenuCursor.curr.items.length > 0 && contextMenuCursor.next) {
                ctxMenu.append(new electron_1.MenuItem({
                    type: 'separator'
                }));
            }
        });
        return ctxMenu;
    }
    createTextHighlightContextMenu(triggerEvent, sender) {
        const ctxMenu = new electron_1.Menu();
        ctxMenu.append(this.createSubmenu('Text Highlight', [
            new electron_1.MenuItem({
                label: 'Delete',
                click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("delete-text-highlight", triggerEvent)
            })
        ]));
        return ctxMenu;
    }
    createAreaHighlightContextMenu(triggerEvent, sender) {
        const ctxMenu = new electron_1.Menu();
        ctxMenu.append(this.createSubmenu('Area Highlight', [
            new electron_1.MenuItem({
                label: 'Delete',
                click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("delete-area-highlight", triggerEvent)
            })
        ]));
        return ctxMenu;
    }
    createPagemarkContextMenu(triggerEvent, sender) {
        const ctxMenu = new electron_1.Menu();
        const createModeSubmenuItems = () => {
            return PagemarkModes_1.PagemarkModes.toDescriptors().map(current => {
                return new electron_1.MenuItem({
                    label: current.title,
                    click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("set-pagemark-mode-" + current.key, triggerEvent)
                });
            });
        };
        ctxMenu.append(this.createSubmenu('Pagemark', [
            this.createSubmenu('Mode ...', createModeSubmenuItems()),
            new electron_1.MenuItem({
                label: 'Delete Pagemark',
                click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("delete-pagemark", triggerEvent)
            })
        ]));
        return ctxMenu;
    }
    createPageContextMenu(triggerEvent, sender) {
        const ctxMenu = new electron_1.Menu();
        ctxMenu.append(new electron_1.MenuItem({
            label: 'Create Pagemark to Point',
            click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("create-pagemark-to-point", triggerEvent)
        }));
        ctxMenu.append(new electron_1.MenuItem({
            label: 'Create Pagemark Box',
            click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("create-pagemark", triggerEvent)
        }));
        ctxMenu.append(new electron_1.MenuItem({
            label: 'Create Area Highlight',
            click: () => ContextMenuMessages_1.ContextMenuMessages.postContextMenuMessage("create-area-highlight", triggerEvent)
        }));
        return ctxMenu;
    }
    createDefaultContextMenu(triggerEvent, sender) {
        const ctxMenu = new electron_1.Menu();
        ctxMenu.append(new electron_1.MenuItem({
            label: 'Toggle Annotation Sidebar',
            id: "toggle-annotation-sidebar",
            click: () => AnnotationSidebarClient_1.AnnotationSidebarClient.toggleAnnotationSidebar()
        }));
        ctxMenu.append(new electron_1.MenuItem({
            label: 'Inspect Element',
            id: "inspect",
            click: event => {
                const window = electron_1.BrowserWindow.getFocusedWindow();
                if (!window) {
                    throw new Error("No current window");
                }
                window.webContents.inspectElement(triggerEvent.point.x, triggerEvent.point.y);
                if (window.webContents.isDevToolsOpened()) {
                    window.webContents.devToolsWebContents.focus();
                }
            }
        }));
        return ctxMenu;
    }
    createSubmenu(label, menuItems) {
        const submenu = new electron_1.Menu();
        const submenuItem = new electron_1.MenuItem({
            label,
            type: 'submenu',
            submenu
        });
        menuItems.forEach(menuItem => {
            submenu.append(menuItem);
        });
        return submenuItem;
    }
}
exports.ElectronContextMenu = ElectronContextMenu;
//# sourceMappingURL=data:application/json;base64,