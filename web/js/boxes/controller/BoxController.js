"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BoxMoveEvent_1 = require("./BoxMoveEvent");
const BoxOptions_1 = require("./BoxOptions");
const Rects_1 = require("../../Rects");
const Logger_1 = require("polar-shared/src/logger/Logger");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const RectEdges_1 = require("../../pagemarks/controller/interact/edges/RectEdges");
const Optional_1 = require("polar-shared/src/util/ts/Optional");
const DragRectAdjacencyCalculator_1 = require("../../pagemarks/controller/interact/drag/DragRectAdjacencyCalculator");
const ResizeRectAdjacencyCalculator_1 = require("../../pagemarks/controller/interact/resize/ResizeRectAdjacencyCalculator");
const Functions_1 = require("polar-shared/src/util/Functions");
const interactjs_1 = __importDefault(require("interactjs"));
const Objects_1 = require("polar-shared/src/util/Objects");
const log = Logger_1.Logger.create();
class BoxController {
    constructor(onMove = Functions_1.NULL_FUNCTION) {
        this.onMove = onMove;
    }
    register(opts) {
        const boxOptions = new BoxOptions_1.BoxOptions(opts);
        const restrictionElement = Optional_1.Optional.of(boxOptions.restrictionElement)
            .getOrElse(boxOptions.target.parentElement);
        interactjs_1.default(boxOptions.target)
            .draggable({
            inertia: false,
            restrict: {
                restriction: restrictionElement,
                outer: 'parent',
                elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
            },
            restrictEdges: {
                outer: 'parent',
            },
        })
            .resizable({
            edges: {
                left: true,
                right: true,
                bottom: true,
                top: true
            },
            restrictEdges: {
                outer: restrictionElement,
            },
            restrict: {
                restriction: restrictionElement,
            },
            restrictSize: {
                min: { width: 50, height: 50 },
            },
            inertia: false,
        })
            .on('dragstart', (interactionEvent) => {
            this._captureStartTargetRect(interactionEvent);
        })
            .on('dragmove', (interactionEvent) => {
            if (!interactionEvent.currentTarget.parentElement) {
                return;
            }
            const target = interactionEvent.target;
            const restrictionRect = this.computeRestrictionRect(restrictionElement);
            const origin = this._computeOriginXY(interactionEvent);
            const targetRect = Rects_1.Rects.fromElementStyle(target);
            const intersectedBoxes = this._calculateIntersectedBoxes(interactionEvent.currentTarget, Rects_1.Rects.createFromBasicRect({
                left: origin.x,
                top: origin.y,
                width: targetRect.width,
                height: targetRect.height
            }), boxOptions.intersectedElementsSelector);
            let boxRect = Rects_1.Rects.createFromBasicRect({
                left: origin.x,
                top: origin.y,
                width: targetRect.width,
                height: targetRect.height
            });
            if (intersectedBoxes.intersectedRects.length === 0) {
                log.info("NOT INTERSECTED");
                log.info("Moving to origin: " + JSON.stringify(origin));
                this._moveTargetElement(origin.x, origin.y, target);
            }
            else {
                log.info("INTERSECTED========== ");
                const primaryRect = Rects_1.Rects.createFromBasicRect({
                    left: origin.x,
                    top: origin.y,
                    width: targetRect.width,
                    height: targetRect.height
                });
                const intersectedRect = intersectedBoxes.intersectedRects[0];
                const adjacency = DragRectAdjacencyCalculator_1.DragRectAdjacencyCalculator.calculate(primaryRect, intersectedRect, restrictionRect);
                const adjustedRect = adjacency.adjustedRect;
                if (adjustedRect) {
                    this._moveTargetElement(adjustedRect.left, adjustedRect.top, target);
                    boxRect = adjustedRect;
                }
                else {
                    console.warn("Can't move due to no valid adjustedRect we can work with.");
                }
            }
            interactionEvent.interaction.lastBoxMoveEvent =
                this.fireOnMove("drag", restrictionRect, boxRect, target.id, target);
        })
            .on('dragend', (interactionEvent) => {
            this.fireOnMoveEnd(interactionEvent);
        })
            .on('resizestart', (interactionEvent) => {
            this._captureStartTargetRect(interactionEvent);
            log.info("resizestart: interactionEvent.rect: " + JSON.stringify(interactionEvent.rect, null, "  "));
            interactionEvent.interaction.startRect = Objects_1.Objects.duplicate(interactionEvent.rect);
        })
            .on('resizemove', (interactionEvent) => {
            log.info("resizemove: event: ", interactionEvent);
            log.info("resizemove: event.target: ", interactionEvent.target);
            log.info("resizemove: interactionEvent.interaction.startRect: " + JSON.stringify(interactionEvent.interaction.startRect, null, "  "));
            const target = interactionEvent.target;
            const restrictionRect = this.computeRestrictionRect(restrictionElement);
            const tempRect = Rects_1.Rects.createFromBasicRect(interactionEvent.rect);
            const deltaRect = Rects_1.Rects.subtract(tempRect, interactionEvent.interaction.startRect);
            const resizeRect = Rects_1.Rects.add(interactionEvent.interaction.startTargetRect, deltaRect);
            const intersectedBoxes = this._calculateIntersectedBoxes(target, resizeRect, boxOptions.intersectedElementsSelector);
            log.info("resizemove: deltaRect: " + JSON.stringify(deltaRect, null, "  "));
            let boxRect;
            if (intersectedBoxes.intersectedRects.length === 0) {
                log.info("Resizing in non-intersected mode");
                boxRect = resizeRect;
                this._resizeTargetElement(resizeRect, target);
            }
            else {
                log.info("Resizing in intersected mode");
                const resizeRectAdjacencyCalculator = new ResizeRectAdjacencyCalculator_1.ResizeRectAdjacencyCalculator();
                const intersectedRect = intersectedBoxes.intersectedRects[0];
                const rectEdges = new RectEdges_1.RectEdges(interactionEvent.edges);
                const adjustedRect = resizeRectAdjacencyCalculator.calculate(resizeRect, intersectedRect, rectEdges);
                log.info("resizemove: adjustedRect: " + JSON.stringify(adjustedRect, null, "  "));
                boxRect = adjustedRect;
                this._resizeTargetElement(adjustedRect, target);
            }
            interactionEvent.interaction.lastBoxMoveEvent
                = this.fireOnMove("resize", restrictionRect, boxRect, target.id, target);
        })
            .on('resizeend', (interactionEvent) => {
            this.fireOnMoveEnd(interactionEvent);
        });
    }
    computeRestrictionRect(element) {
        const computeDimensions = () => {
            if ('canvas' === element.tagName.toLowerCase()) {
                const canvasElement = element;
                return {
                    width: canvasElement.width,
                    height: canvasElement.height,
                };
            }
            return {
                width: element.offsetWidth,
                height: element.offsetHeight
            };
        };
        const dimensions = computeDimensions();
        Preconditions_1.Preconditions.assertCondition(dimensions.width > 0, 'restrictionRect width');
        Preconditions_1.Preconditions.assertCondition(dimensions.height > 0, 'restrictionRect height');
        return Rects_1.Rects.createFromBasicRect(Object.assign({ left: 0, top: 0 }, dimensions));
    }
    fireOnMove(type, restrictionRect, boxRect, id, target) {
        const boxMoveEvent = new BoxMoveEvent_1.BoxMoveEvent({
            type,
            restrictionRect,
            boxRect,
            id,
            target,
        });
        if (this.onMove) {
            this.onMove(boxMoveEvent);
        }
        return boxMoveEvent;
    }
    fireOnMoveEnd(interactionEvent) {
        if (interactionEvent.interaction.lastBoxMoveEvent) {
            const boxMoveEvent = Object.assign({}, interactionEvent.interaction.lastBoxMoveEvent);
            boxMoveEvent.state = "completed";
            if (this.onMove) {
                log.info("Firing completed BoxMoveEvent: ", boxMoveEvent);
                setTimeout(() => this.onMove(boxMoveEvent), 1);
            }
        }
    }
    _calculateIntersectedBoxes(element, resizeRect, intersectedElementsSelector) {
        Preconditions_1.Preconditions.assertPresent(element, "element");
        Preconditions_1.Preconditions.assertPresent(resizeRect, "resizeRect");
        Preconditions_1.Preconditions.assertPresent(intersectedElementsSelector, "intersectedElementsSelector");
        log.info("_calculateIntersectedBoxes: resizeRect is: " + JSON.stringify(resizeRect, null, "  "));
        if (!element.parentElement) {
            const msg = "Element not within DOM: ";
            log.error(msg, element);
            throw new Error(msg);
        }
        const intersectedElements = element.parentElement.querySelectorAll(intersectedElementsSelector);
        const boxes = Array.from(intersectedElements)
            .filter(current => current !== element)
            .map(current => current);
        boxes.forEach(current => current.getAttribute("id") !== element.getAttribute("id"));
        const intersectedRects = [];
        boxes.forEach(box => {
            const boxRect = Rects_1.Rects.fromElementStyle(box);
            if (Rects_1.Rects.intersect(boxRect, resizeRect)) {
                intersectedRects.push(boxRect);
            }
        });
        return {
            resizeRect,
            intersectedRects
        };
    }
    _computeOriginXY(interactionEvent) {
        const delta = {
            x: interactionEvent.pageX - interactionEvent._interaction.coords.start.page.x,
            y: interactionEvent.pageY - interactionEvent._interaction.coords.start.page.y
        };
        const x = interactionEvent.interaction.startTargetRect.left + delta.x;
        const y = interactionEvent.interaction.startTargetRect.top + delta.y;
        return { x, y };
    }
    _moveTargetElement(x, y, target) {
        target.style.left = `${x}px`;
        target.style.top = `${y}px`;
        target.setAttribute('data-x', `${x}`);
        target.setAttribute('data-y', `${y}`);
    }
    _resizeTargetElement(rect, target) {
        this._moveTargetElement(rect.left, rect.top, target);
        target.style.width = `${rect.width}px`;
        target.style.height = `${rect.height}px`;
    }
    _captureStartTargetRect(interactionEvent) {
        interactionEvent.interaction.startTargetRect = Rects_1.Rects.fromElementStyle(interactionEvent.target);
    }
}
exports.BoxController = BoxController;
//# sourceMappingURL=data:application/json;base64,