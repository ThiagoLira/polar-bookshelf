"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const TreeView_1 = require("./TreeView");
const TagFilter_1 = require("./TagFilter");
const NullCollapse_1 = require("../null_collapse/NullCollapse");
const TagNodes_1 = require("../../tags/TagNodes");
class Styles {
}
Styles.PARENT = {
    display: 'flex',
    flexDirection: 'column',
    backgroundColor: 'var(--white)',
};
Styles.BAR = {
    display: 'flex',
    marginBottom: '7px'
};
Styles.FILTER_INPUT = {
    height: 'auto',
    fontFamily: 'sans-serif',
    fontSize: '14px'
};
class TagTree extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.onSelectedTags = this.onSelectedTags.bind(this);
        this.onFiltered = this.onFiltered.bind(this);
        this.onCreated = this.onCreated.bind(this);
        this.state = {
            filter: "",
        };
    }
    render() {
        const tags = filterTags(this.props.tags, this.state.filter);
        const createRoot = () => {
            switch (this.props.tagType) {
                case "folder":
                    const root = Object.assign(Object.assign({}, TagNodes_1.TagNodes.createFoldersRoot({ tags, type: 'folder' })), { title: this.props.rootTitle });
                    return root;
                case "regular":
                    return TagNodes_1.TagNodes.createTagsRoot(tags);
            }
        };
        const root = createRoot();
        return (React.createElement("div", { style: Styles.PARENT },
            React.createElement("div", { style: Styles.BAR },
                React.createElement("div", { style: { flexGrow: 1 } },
                    React.createElement(TagFilter_1.TagFilter, { tags: tags, onChange: tags => this.onSelectedTags(tags), disabled: this.props.filterDisabled })),
                React.createElement(NullCollapse_1.NullCollapse, { open: !this.props.noCreate })),
            React.createElement(TreeView_1.TreeView, { roots: [root], treeState: this.props.treeState })));
    }
    onCreated(path) {
        const tags = [...this.props.tags];
        tags.push({
            label: path,
            id: path,
            members: [],
            count: 0
        });
        this.setState(Object.assign({}, this.state));
    }
    onSelectedTags(selected) {
        this.props.treeState.tags = selected;
        this.props.treeState.dispatchSelected();
    }
    onFiltered(filter) {
        this.setState({ filter });
    }
}
exports.TagTree = TagTree;
function filterTags(tags, filter) {
    if (filter.trim() === '') {
        return tags;
    }
    filter = filter.toLocaleLowerCase();
    return tags.filter(tag => {
        const label = tag.label.toLocaleLowerCase();
        return label.indexOf(filter) !== -1;
    });
}
//# sourceMappingURL=data:application/json;base64,