"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Functions_1 = require("polar-shared/src/util/Functions");
class Styles {
}
Styles.DROP_ACTIVE = {
    backgroundColor: 'var(--grey100)',
    borderColor: 'var(--primary)',
    borderWidth: '1px',
    borderStyle: 'solid'
};
Styles.DROP_INACTIVE = {
    borderColor: 'var(--white)',
    borderWidth: '1px',
    borderStyle: 'solid'
};
class DragTarget extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.onDragOver = this.onDragOver.bind(this);
        this.onDragLeave = this.onDragLeave.bind(this);
        this.onDrop = this.onDrop.bind(this);
        this.acceptDrag = this.acceptDrag.bind(this);
        this.state = {};
    }
    acceptDrag() {
        if (this.props.acceptDrag) {
            return this.props.acceptDrag();
        }
        return true;
    }
    onDragOver(event) {
        if (!this.acceptDrag()) {
            return;
        }
        this.setState({ active: true });
        event.preventDefault();
    }
    onDragLeave(event) {
        if (!this.acceptDrag()) {
            return;
        }
        this.setState({ active: false });
    }
    onDrop() {
        if (!this.acceptDrag()) {
            return;
        }
        this.setState({ active: false });
        const onDropped = this.props.onDropped || Functions_1.NULL_FUNCTION;
        onDropped();
    }
    render() {
        const { active } = this.state;
        return (React.createElement("div", { style: active ? Styles.DROP_ACTIVE : Styles.DROP_INACTIVE, onDragOver: (event) => this.onDragOver(event), onDragLeave: (event) => this.onDragLeave(event), onDrop: () => this.onDrop() }, this.props.children));
    }
}
exports.DragTarget = DragTarget;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRHJhZ1RhcmdldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkRyYWdUYXJnZXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDZDQUErQjtBQUMvQiwrREFBOEQ7QUFFOUQsTUFBTSxNQUFNOztBQUVNLGtCQUFXLEdBQXdCO0lBQzdDLGVBQWUsRUFBRSxnQkFBZ0I7SUFDakMsV0FBVyxFQUFFLGdCQUFnQjtJQUM3QixXQUFXLEVBQUUsS0FBSztJQUNsQixXQUFXLEVBQUUsT0FBTztDQUN2QixDQUFDO0FBRVksb0JBQWEsR0FBd0I7SUFDL0MsV0FBVyxFQUFFLGNBQWM7SUFDM0IsV0FBVyxFQUFFLEtBQUs7SUFDbEIsV0FBVyxFQUFFLE9BQU87Q0FDdkIsQ0FBQztBQUlOLE1BQWEsVUFBVyxTQUFRLEtBQUssQ0FBQyxTQUF5QjtJQUUzRCxZQUFZLEtBQWEsRUFBRSxPQUFZO1FBQ25DLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU3QyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUVwQixDQUFDO0lBRU8sVUFBVTtRQUVkLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7WUFDdkIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ2xDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFFaEIsQ0FBQztJQUVPLFVBQVUsQ0FBQyxLQUFzQztRQUVyRCxJQUFJLENBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3JCLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUM5QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVPLFdBQVcsQ0FBQyxLQUFzQztRQUV0RCxJQUFJLENBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3JCLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztJQUVuQyxDQUFDO0lBRU8sTUFBTTtRQUVWLElBQUksQ0FBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDckIsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO1FBRS9CLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxJQUFJLHlCQUFhLENBQUM7UUFFeEQsU0FBUyxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVNLE1BQU07UUFFVCxNQUFNLEVBQUMsTUFBTSxFQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUU1QixPQUFPLENBRUgsNkJBQUssS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFDekQsVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUM3QyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQy9DLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBRTNCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUVsQixDQUVULENBQUM7SUFFTixDQUFDO0NBR0o7QUE1RUQsZ0NBNEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtOVUxMX0ZVTkNUSU9OfSBmcm9tIFwicG9sYXItc2hhcmVkL3NyYy91dGlsL0Z1bmN0aW9uc1wiO1xuXG5jbGFzcyBTdHlsZXMge1xuXG4gICAgcHVibGljIHN0YXRpYyBEUk9QX0FDVElWRTogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tZ3JleTEwMCknLFxuICAgICAgICBib3JkZXJDb2xvcjogJ3ZhcigtLXByaW1hcnkpJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6ICcxcHgnLFxuICAgICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJ1xuICAgIH07XG5cbiAgICBwdWJsaWMgc3RhdGljIERST1BfSU5BQ1RJVkU6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7XG4gICAgICAgIGJvcmRlckNvbG9yOiAndmFyKC0td2hpdGUpJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6ICcxcHgnLFxuICAgICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJ1xuICAgIH07XG5cbn1cblxuZXhwb3J0IGNsYXNzIERyYWdUYXJnZXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMsIGNvbnRleHQ6IGFueSkge1xuICAgICAgICBzdXBlcihwcm9wcywgY29udGV4dCk7XG4gICAgICAgIHRoaXMub25EcmFnT3ZlciA9IHRoaXMub25EcmFnT3Zlci5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uRHJhZ0xlYXZlID0gdGhpcy5vbkRyYWdMZWF2ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uRHJvcCA9IHRoaXMub25Ecm9wLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuYWNjZXB0RHJhZyA9IHRoaXMuYWNjZXB0RHJhZy5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fTtcblxuICAgIH1cblxuICAgIHByaXZhdGUgYWNjZXB0RHJhZygpOiBib29sZWFuIHtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5hY2NlcHREcmFnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5hY2NlcHREcmFnKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIH1cblxuICAgIHByaXZhdGUgb25EcmFnT3ZlcihldmVudDogUmVhY3QuRHJhZ0V2ZW50PEhUTUxEaXZFbGVtZW50Pikge1xuXG4gICAgICAgIGlmICghIHRoaXMuYWNjZXB0RHJhZygpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHthY3RpdmU6IHRydWV9KTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gY2FsbGVkIHRvIGFsbG93IHRoZSBkcm9wLlxuICAgIH1cblxuICAgIHByaXZhdGUgb25EcmFnTGVhdmUoZXZlbnQ6IFJlYWN0LkRyYWdFdmVudDxIVE1MRGl2RWxlbWVudD4pIHtcblxuICAgICAgICBpZiAoISB0aGlzLmFjY2VwdERyYWcoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7YWN0aXZlOiBmYWxzZX0pO1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkRyb3AoKSB7XG5cbiAgICAgICAgaWYgKCEgdGhpcy5hY2NlcHREcmFnKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe2FjdGl2ZTogZmFsc2V9KTtcblxuICAgICAgICBjb25zdCBvbkRyb3BwZWQgPSB0aGlzLnByb3BzLm9uRHJvcHBlZCB8fCBOVUxMX0ZVTkNUSU9OO1xuXG4gICAgICAgIG9uRHJvcHBlZCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG5cbiAgICAgICAgY29uc3Qge2FjdGl2ZX0gPSB0aGlzLnN0YXRlO1xuXG4gICAgICAgIHJldHVybiAoXG5cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e2FjdGl2ZSA/IFN0eWxlcy5EUk9QX0FDVElWRSA6IFN0eWxlcy5EUk9QX0lOQUNUSVZFfVxuICAgICAgICAgICAgICAgICBvbkRyYWdPdmVyPXsoZXZlbnQpID0+IHRoaXMub25EcmFnT3ZlcihldmVudCl9XG4gICAgICAgICAgICAgICAgIG9uRHJhZ0xlYXZlPXsoZXZlbnQpID0+IHRoaXMub25EcmFnTGVhdmUoZXZlbnQpfVxuICAgICAgICAgICAgICAgICBvbkRyb3A9eygpID0+IHRoaXMub25Ecm9wKCl9PlxuXG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICk7XG5cbiAgICB9XG5cblxufVxuXG5pbnRlcmZhY2UgSVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBhIGRyYWcgaGFzIGZpbmlzaGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9uRHJvcHBlZD86ICgpID0+IHZvaWQ7XG5cbiAgICByZWFkb25seSBhY2NlcHREcmFnPzogKCkgPT4gYm9vbGVhbjtcblxufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICByZWFkb25seSBhY3RpdmU/OiBib29sZWFuO1xufVxuXG5cbiJdfQ==