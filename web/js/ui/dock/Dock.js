"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const MousePositions_1 = require("./MousePositions");
const Preconditions_1 = require("polar-shared/src/Preconditions");
class Styles {
}
Styles.Dock = {
    display: 'flex',
    flexGrow: 1,
    height: '100%'
};
class Dock extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.mousePosition = MousePositions_1.MousePositions.get();
        this.mouseDown = false;
        this.onMouseDown = this.onMouseDown.bind(this);
        this.onMouseUp = this.onMouseUp.bind(this);
        this.onMouseMove = this.onMouseMove.bind(this);
        this.toggle = this.toggle.bind(this);
        this.setFlyout = this.setFlyout.bind(this);
        this.markResizing = this.markResizing.bind(this);
        if (this.props.toggleCoupler) {
            this.props.toggleCoupler(() => this.toggle());
        }
        if (this.props.setFlyoutCoupler) {
            this.props.setFlyoutCoupler(() => this.setFlyout());
        }
        const mode = this.props.initialMode ? this.props.initialMode : 'expanded';
        const width = this.props.initialWidth || 400;
        const flyout = Preconditions_1.defaultValue(this.props.initialFlyout, false);
        this.state = {
            mode,
            width,
            resizing: false,
            flyout
        };
    }
    render() {
        const leftStyle = {};
        const rightStyle = {};
        for (const style of [leftStyle, rightStyle]) {
            style.height = '100%';
        }
        const createSplitterStyle = () => {
            const result = {
                width: '4px',
                minWidth: '4px',
                maxWidth: '4px',
                cursor: 'col-resize',
                backgroundColor: '#c6c6c6'
            };
            if (this.props.side === 'left') {
                result.marginLeft = 'auto';
            }
            else {
                result.marginRight = 'auto';
            }
            return result;
        };
        const splitterStyle = createSplitterStyle();
        const sidebarStyle = this.props.side === 'left' ? leftStyle : rightStyle;
        const contentStyle = this.props.side === 'right' ? leftStyle : rightStyle;
        const width = this.state.mode === 'expanded' ? this.state.width : 0;
        if (this.state.resizing) {
            for (const style of [sidebarStyle, contentStyle]) {
                style.pointerEvents = 'none';
                style.userSelect = 'none';
            }
        }
        if (this.state.flyout) {
            sidebarStyle.position = 'absolute';
        }
        sidebarStyle.width = width;
        sidebarStyle.minWidth = width;
        sidebarStyle.maxWidth = width;
        contentStyle.flexGrow = 1;
        sidebarStyle.height = '100%';
        const componentClassNames = this.props.componentClassNames || {};
        return (React.createElement("div", { className: "dock", style: Object.assign(Object.assign({}, Styles.Dock), this.props.style || {}), onMouseMove: () => this.onMouseMove(), draggable: false },
            React.createElement("div", { className: "dock-left" + ' ' + componentClassNames.left || "", style: leftStyle, draggable: false }, this.props.left),
            React.createElement("div", { className: "dock-splitter" + ' ' + componentClassNames.splitter || "", draggable: false, onMouseDown: () => this.onMouseDown(), style: splitterStyle }),
            React.createElement("div", { className: "dock-right" + ' ' + componentClassNames.right || "", style: rightStyle, draggable: false }, this.props.right)));
    }
    onMouseUp() {
        this.mousePosition = MousePositions_1.MousePositions.get();
        this.markResizing(false);
    }
    onMouseDown() {
        this.mousePosition = MousePositions_1.MousePositions.get();
        this.markResizing(true);
        window.addEventListener('mouseup', () => {
            this.onMouseUp();
        }, { once: true });
    }
    markResizing(resizing) {
        this.mouseDown = resizing;
        this.setState(Object.assign(Object.assign({}, this.state), { resizing }));
    }
    onMouseMove() {
        if (!this.mouseDown) {
            return;
        }
        const lastMousePosition = MousePositions_1.MousePositions.get();
        const mult = this.props.side === 'left' ? 1 : -1;
        const delta = mult * (lastMousePosition.clientX - this.mousePosition.clientX);
        const width = this.state.width + delta;
        this.setState(Object.assign(Object.assign({}, this.state), { width }));
        this.mousePosition = lastMousePosition;
    }
    toggle() {
        const newMode = () => {
            switch (this.state.mode) {
                case 'expanded':
                    return 'collapsed';
                case 'collapsed':
                    return 'expanded';
            }
        };
        const mode = newMode();
        this.setState(Object.assign(Object.assign({}, this.state), { mode }));
    }
    setFlyout() {
        console.log("setting as flyout ");
        const flyout = !this.state.flyout;
        const newState = Object.assign(Object.assign({}, this.state), { flyout });
        console.log("newState: ", newState);
        this.setState(newState);
    }
}
exports.Dock = Dock;
//# sourceMappingURL=data:application/json;base64,