"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const toastr_1 = __importDefault(require("toastr"));
const Optional_1 = require("polar-shared/src/util/ts/Optional");
toastr_1.default.options.toastClass = 'toastr';
class Toaster {
    static info(message, title = "", options = {}) {
        title = Optional_1.Optional.of(title).getOrElse("");
        return toastr_1.default.info(message, title, this.augmentExtendedOptions(options));
    }
    static success(message, title = "", options = {}) {
        title = Optional_1.Optional.of(title).getOrElse("");
        return toastr_1.default.success(message, title, this.augmentExtendedOptions(options));
    }
    static warning(message, title = "", options = {}) {
        title = Optional_1.Optional.of(title).getOrElse("");
        return toastr_1.default.warning(message, title, this.augmentExtendedOptions(options));
    }
    static error(message, title = "", options = {}) {
        title = Optional_1.Optional.of(title).getOrElse("");
        return toastr_1.default.error(message, title, this.augmentExtendedOptions(options));
    }
    static clear(ref) {
        toastr_1.default.clear(ref, { force: true });
    }
    static remove() {
        toastr_1.default.remove();
    }
    static persistentError(message, title = "") {
        this.error(message, title, {
            timeOut: 0,
            extendedTimeOut: 0,
            preventDuplicates: true
        });
    }
    static augmentExtendedOptions(options) {
        const result = Object.assign({}, options);
        if (options.requiresAcknowledgment) {
            Object.assign(result, {
                closeButton: true,
                timeOut: 0,
                extendedTimeOut: 0,
            });
        }
        return result;
    }
}
exports.Toaster = Toaster;
var ToasterMessageType;
(function (ToasterMessageType) {
    ToasterMessageType["SUCCESS"] = "success";
    ToasterMessageType["INFO"] = "info";
    ToasterMessageType["WARNING"] = "warning";
    ToasterMessageType["ERROR"] = "error";
})(ToasterMessageType = exports.ToasterMessageType || (exports.ToasterMessageType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9hc3Rlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlRvYXN0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxvREFBNEI7QUFJNUIsZ0VBQTJEO0FBRTNELGdCQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7QUFLckMsTUFBYSxPQUFPO0lBRVQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFlLEVBQUUsUUFBZ0IsRUFBRSxFQUFFLFVBQTBCLEVBQUU7UUFDaEYsS0FBSyxHQUFHLG1CQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QyxPQUFPLGdCQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBZSxFQUFFLFFBQWdCLEVBQUUsRUFBRSxVQUEwQixFQUFFO1FBQ25GLEtBQUssR0FBRyxtQkFBUSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekMsT0FBTyxnQkFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWUsRUFBRSxRQUFnQixFQUFFLEVBQUUsVUFBMEIsRUFBRTtRQUNuRixLQUFLLEdBQUcsbUJBQVEsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sZ0JBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFlLEVBQUUsUUFBZ0IsRUFBRSxFQUFFLFVBQTBCLEVBQUU7UUFDakYsS0FBSyxHQUFHLG1CQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QyxPQUFPLGdCQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUtNLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBZTtRQUMvQixnQkFBTSxDQUFDLEtBQUssQ0FBTyxHQUFHLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBTU0sTUFBTSxDQUFDLE1BQU07UUFDaEIsZ0JBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBUU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFlLEVBQUUsUUFBZ0IsRUFBRTtRQUU3RCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUU7WUFDdkIsT0FBTyxFQUFFLENBQUM7WUFDVixlQUFlLEVBQUUsQ0FBQztZQUNsQixpQkFBaUIsRUFBRSxJQUFJO1NBQzFCLENBQUMsQ0FBQztJQUVQLENBQUM7SUFFTyxNQUFNLENBQUMsc0JBQXNCLENBQUMsT0FBdUI7UUFFekQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFMUMsSUFBSSxPQUFPLENBQUMsc0JBQXNCLEVBQUU7WUFDaEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7Z0JBQ2xCLFdBQVcsRUFBRSxJQUFJO2dCQUNqQixPQUFPLEVBQUUsQ0FBQztnQkFDVixlQUFlLEVBQUUsQ0FBQzthQUNyQixDQUFDLENBQUM7U0FDTjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7Q0FFSjtBQXJFRCwwQkFxRUM7QUFtQkQsSUFBWSxrQkFVWDtBQVZELFdBQVksa0JBQWtCO0lBRTFCLHlDQUFtQixDQUFBO0lBRW5CLG1DQUFhLENBQUE7SUFFYix5Q0FBbUIsQ0FBQTtJQUVuQixxQ0FBZSxDQUFBO0FBRW5CLENBQUMsRUFWVyxrQkFBa0IsR0FBbEIsMEJBQWtCLEtBQWxCLDBCQUFrQixRQVU3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUb2FzdHIgZnJvbSAndG9hc3RyJztcblxuLy8gbmVlZGVkIHRvIGVuZm9yY2UgdGhhdCBqcXVlcnkgaXMgd29ya2luZy5cbmltcG9ydCAkIGZyb20gJy4uL0pRdWVyeSc7XG5pbXBvcnQge09wdGlvbmFsfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3V0aWwvdHMvT3B0aW9uYWwnO1xuXG5Ub2FzdHIub3B0aW9ucy50b2FzdENsYXNzID0gJ3RvYXN0cic7XG5cbi8qKlxuICogSGlnaCBsZXZlbCBpbnRlcmZhY2UgdG8gY3JlYXRlIHRvYXN0ZXIgVUkgcG9wdXBzIGZvciBtZXNzYWdlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRvYXN0ZXIge1xuXG4gICAgcHVibGljIHN0YXRpYyBpbmZvKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU6IHN0cmluZyA9IFwiXCIsIG9wdGlvbnM6IFRvYXN0ZXJPcHRpb25zID0ge30pOiBUb2FzdGVyUmVmIHtcbiAgICAgICAgdGl0bGUgPSBPcHRpb25hbC5vZih0aXRsZSkuZ2V0T3JFbHNlKFwiXCIpO1xuICAgICAgICByZXR1cm4gVG9hc3RyLmluZm8obWVzc2FnZSwgdGl0bGUsIHRoaXMuYXVnbWVudEV4dGVuZGVkT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzdWNjZXNzKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU6IHN0cmluZyA9IFwiXCIsIG9wdGlvbnM6IFRvYXN0ZXJPcHRpb25zID0ge30pOiBUb2FzdGVyUmVmIHtcbiAgICAgICAgdGl0bGUgPSBPcHRpb25hbC5vZih0aXRsZSkuZ2V0T3JFbHNlKFwiXCIpO1xuICAgICAgICByZXR1cm4gVG9hc3RyLnN1Y2Nlc3MobWVzc2FnZSwgdGl0bGUsIHRoaXMuYXVnbWVudEV4dGVuZGVkT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyB3YXJuaW5nKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU6IHN0cmluZyA9IFwiXCIsIG9wdGlvbnM6IFRvYXN0ZXJPcHRpb25zID0ge30pOiBUb2FzdGVyUmVmIHtcbiAgICAgICAgdGl0bGUgPSBPcHRpb25hbC5vZih0aXRsZSkuZ2V0T3JFbHNlKFwiXCIpO1xuICAgICAgICByZXR1cm4gVG9hc3RyLndhcm5pbmcobWVzc2FnZSwgdGl0bGUsIHRoaXMuYXVnbWVudEV4dGVuZGVkT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBlcnJvcihtZXNzYWdlOiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcgPSBcIlwiLCBvcHRpb25zOiBUb2FzdGVyT3B0aW9ucyA9IHt9KTogVG9hc3RlclJlZiB7XG4gICAgICAgIHRpdGxlID0gT3B0aW9uYWwub2YodGl0bGUpLmdldE9yRWxzZShcIlwiKTtcbiAgICAgICAgcmV0dXJuIFRvYXN0ci5lcnJvcihtZXNzYWdlLCB0aXRsZSwgdGhpcy5hdWdtZW50RXh0ZW5kZWRPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBhIHByZXZpb3VzbHkgcmFpc2VkIHRvYXN0LlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY2xlYXIocmVmOiBUb2FzdGVyUmVmKSB7XG4gICAgICAgIFRvYXN0ci5jbGVhcig8YW55PiByZWYsIHtmb3JjZTogdHJ1ZX0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdlIGV4cG9zZSByZW1vdmUgbm93IGJ1dCBpZGVhbGx5IHdlIHdvdWxkIHJlbW92ZSBqdXN0IHRoZSBwcmltYXJ5IHRvYXN0XG4gICAgICogbm90IHRoZSBzZWNvbmRhcnkvYW5jaWxsYXJ5IG9uZXMgdGhhdCBtaWdodCBiZSB1bnJlbGF0ZWQuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZW1vdmUoKSB7XG4gICAgICAgIFRvYXN0ci5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gZXJyb3IgdGhhdCBkb2Vzbid0IGF1dG8taGlkZSBhbmQgaXMgYSBzaW5nbGV0b24gYXJvdW5kIHRoZSBzYW1lXG4gICAgICogbWVzc2FnZXMgYW5kIHJlcXVpcmVzIHRoZSB1c2VyIHRvIGFja25vd2xlZGdlIGl0Li4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcGVyc2lzdGVudEVycm9yKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU6IHN0cmluZyA9IFwiXCIpIHtcblxuICAgICAgICB0aGlzLmVycm9yKG1lc3NhZ2UsIHRpdGxlLCB7XG4gICAgICAgICAgICB0aW1lT3V0OiAwLFxuICAgICAgICAgICAgZXh0ZW5kZWRUaW1lT3V0OiAwLFxuICAgICAgICAgICAgcHJldmVudER1cGxpY2F0ZXM6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBhdWdtZW50RXh0ZW5kZWRPcHRpb25zKG9wdGlvbnM6IFRvYXN0ZXJPcHRpb25zKTogVG9hc3Rlck9wdGlvbnMge1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJlcXVpcmVzQWNrbm93bGVkZ21lbnQpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgY2xvc2VCdXR0b246IHRydWUsXG4gICAgICAgICAgICAgICAgdGltZU91dDogMCxcbiAgICAgICAgICAgICAgICBleHRlbmRlZFRpbWVPdXQ6IDAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICB9XG5cbn1cblxuLyoqXG4gKiBBIHJlZmVyZW5jZSB0byBhIHRvYXN0IGJ1dCB0aGlzIGlzIGFjdHVhbGx5IGEganF1ZXJ5IG9iamVjdC4gV2UganVzdCBkb24ndFxuICogd2FudCB0byBleHBvc2UgaXQgZGlyZWN0bHkgZm9yIG5vdy5cbiAqL1xuZXhwb3J0IHR5cGUgVG9hc3RlclJlZiA9IG9iamVjdDtcblxuZXhwb3J0IGludGVyZmFjZSBUb2FzdGVyT3B0aW9ucyB7XG4gICAgdGltZU91dD86IG51bWJlcjtcbiAgICBleHRlbmRlZFRpbWVPdXQ/OiBudW1iZXI7XG4gICAgcHJldmVudER1cGxpY2F0ZXM/OiBib29sZWFuO1xuICAgIGNsb3NlQnV0dG9uPzogYm9vbGVhbjtcbiAgICBkZWJ1Zz86IGJvb2xlYW47XG4gICAgbmV3ZXN0T25Ub3A/OiBib29sZWFuO1xuICAgIHJlcXVpcmVzQWNrbm93bGVkZ21lbnQ/OiBib29sZWFuO1xuICAgIHBvc2l0aW9uQ2xhc3M/OiAndG9hc3QtdG9wLWNlbnRlcicgfCAndG9hc3QtdG9wLXJpZ2h0JyB8ICd0b2FzdC10b3AtbGVmdCcgfCAndG9hc3QtdG9wLWZ1bGwtd2lkdGgnO1xufVxuXG5leHBvcnQgZW51bSBUb2FzdGVyTWVzc2FnZVR5cGUge1xuXG4gICAgU1VDQ0VTUyA9IFwic3VjY2Vzc1wiLFxuXG4gICAgSU5GTyA9IFwiaW5mb1wiLFxuXG4gICAgV0FSTklORyA9IFwid2FybmluZ1wiLFxuXG4gICAgRVJST1IgPSBcImVycm9yXCJcblxufVxuXG5cbiJdfQ==