"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Platforms_1 = require("polar-shared/src/util/Platforms");
const AppRuntime_1 = require("../../AppRuntime");
const electron_1 = require("electron");
class Nav {
    static createHashURL(hash) {
        const url = new URL(window.location.href);
        url.hash = hash;
        return url.toString();
    }
    static openLinkWithNewTab(link) {
        if (AppRuntime_1.AppRuntime.isBrowser()) {
            const win = window.open(link, '_blank');
            if (win) {
                win.focus();
            }
        }
        else {
            electron_1.shell.openExternal(link)
                .catch(err => console.error(err));
        }
    }
    static createLinkLoader(opts = { focus: true, newWindow: true }) {
        if (Platforms_1.Platforms.type() === 'desktop') {
            return new DesktopLinkLoader(opts);
        }
        else {
            return new MobileLinkLoader();
        }
    }
}
exports.Nav = Nav;
class DesktopLinkLoader {
    constructor(opts) {
        const win = opts.newWindow ? window.open('', '_blank') : window;
        if (win) {
            this.win = win;
            if (opts.newWindow) {
                if (opts.focus) {
                    win.focus();
                }
                win.document.write("Loading...");
            }
        }
        else {
            throw new Error("Unable to create window");
        }
    }
    load(link) {
        this.win.location.href = link;
    }
}
class MobileLinkLoader {
    load(link) {
        document.location.href = link;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmF2LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTmF2LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0RBQTBEO0FBQzFELGlEQUE0QztBQUM1Qyx1Q0FBK0I7QUFFL0IsTUFBYSxHQUFHO0lBRUwsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFZO1FBQ3BDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsT0FBTyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFZO1FBRXpDLElBQUksdUJBQVUsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUV4QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUV4QyxJQUFJLEdBQUcsRUFBRTtnQkFDTCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDZjtTQUVKO2FBQU07WUFDSCxnQkFBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7aUJBQ25CLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUV6QztJQUVMLENBQUM7SUFPTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBdUIsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUM7UUFFaEYsSUFBSSxxQkFBUyxDQUFDLElBQUksRUFBRSxLQUFLLFNBQVMsRUFBRTtZQUNoQyxPQUFPLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdEM7YUFBTTtZQUNILE9BQU8sSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1NBQ2pDO0lBRUwsQ0FBQztDQUVKO0FBekNELGtCQXlDQztBQUVELE1BQU0saUJBQWlCO0lBSW5CLFlBQVksSUFBb0I7UUFFNUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUVoRSxJQUFJLEdBQUcsRUFBRTtZQUVMLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1lBRWYsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUVoQixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ1osR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNmO2dCQUVELEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBRXBDO1NBRUo7YUFBTTtZQUNILE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztTQUM5QztJQUVMLENBQUM7SUFFTSxJQUFJLENBQUMsSUFBWTtRQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2xDLENBQUM7Q0FFSjtBQUVELE1BQU0sZ0JBQWdCO0lBRVgsSUFBSSxDQUFDLElBQVk7UUFDcEIsUUFBUSxDQUFDLFFBQVMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ25DLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGxhdGZvcm1zfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3V0aWwvUGxhdGZvcm1zJztcbmltcG9ydCB7QXBwUnVudGltZX0gZnJvbSAnLi4vLi4vQXBwUnVudGltZSc7XG5pbXBvcnQge3NoZWxsfSBmcm9tICdlbGVjdHJvbic7XG5cbmV4cG9ydCBjbGFzcyBOYXYge1xuXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVIYXNoVVJMKGhhc2g6IHN0cmluZykge1xuICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgdXJsLmhhc2ggPSBoYXNoO1xuICAgICAgICByZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBvcGVuTGlua1dpdGhOZXdUYWIobGluazogc3RyaW5nKSB7XG5cbiAgICAgICAgaWYgKEFwcFJ1bnRpbWUuaXNCcm93c2VyKCkpIHtcblxuICAgICAgICAgICAgY29uc3Qgd2luID0gd2luZG93Lm9wZW4obGluaywgJ19ibGFuaycpO1xuXG4gICAgICAgICAgICBpZiAod2luKSB7XG4gICAgICAgICAgICAgICAgd2luLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNoZWxsLm9wZW5FeHRlcm5hbChsaW5rKVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBsb2FkZXIgdGhhdCBjYW4gZnVuY3Rpb24gb3V0c2lkZSBvZiBhIGF1dGhvcml6ZWQgZXZlbnQgbG9vcFxuICAgICAqIGJ5IHByZS1jcmVhdGluZyBhIHdpbmRvdyBhbmQgdGhlbiBjaGFuZ2luZyB0aGUgbG9jYXRpb24gbGF0ZXIuXG4gICAgICpcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUxpbmtMb2FkZXIob3B0czogTGlua0xvYWRlck9wdHMgPSB7Zm9jdXM6IHRydWUsIG5ld1dpbmRvdzogdHJ1ZX0pOiBMaW5rTG9hZGVyIHtcblxuICAgICAgICBpZiAoUGxhdGZvcm1zLnR5cGUoKSA9PT0gJ2Rlc2t0b3AnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERlc2t0b3BMaW5rTG9hZGVyKG9wdHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb2JpbGVMaW5rTG9hZGVyKCk7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuXG5jbGFzcyBEZXNrdG9wTGlua0xvYWRlciBpbXBsZW1lbnRzIExpbmtMb2FkZXIge1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSB3aW46IFdpbmRvdztcblxuICAgIGNvbnN0cnVjdG9yKG9wdHM6IExpbmtMb2FkZXJPcHRzKSB7XG5cbiAgICAgICAgY29uc3Qgd2luID0gb3B0cy5uZXdXaW5kb3cgPyB3aW5kb3cub3BlbignJywgJ19ibGFuaycpIDogd2luZG93O1xuXG4gICAgICAgIGlmICh3aW4pIHtcblxuICAgICAgICAgICAgdGhpcy53aW4gPSB3aW47XG5cbiAgICAgICAgICAgIGlmIChvcHRzLm5ld1dpbmRvdykge1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuZm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgd2luLmRvY3VtZW50LndyaXRlKFwiTG9hZGluZy4uLlwiKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIHdpbmRvd1wiKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcHVibGljIGxvYWQobGluazogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMud2luLmxvY2F0aW9uLmhyZWYgPSBsaW5rO1xuICAgIH1cblxufVxuXG5jbGFzcyBNb2JpbGVMaW5rTG9hZGVyIGltcGxlbWVudHMgTGlua0xvYWRlciB7XG5cbiAgICBwdWJsaWMgbG9hZChsaW5rOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgZG9jdW1lbnQubG9jYXRpb24hLmhyZWYgPSBsaW5rO1xuICAgIH1cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpbmtMb2FkZXJPcHRzIHtcbiAgICByZWFkb25seSBmb2N1czogYm9vbGVhbjtcbiAgICByZWFkb25seSBuZXdXaW5kb3c6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlua0xvYWRlciB7XG5cbiAgICBsb2FkKGxpbms6IHN0cmluZyk6IHZvaWQ7XG5cbn1cbiJdfQ==