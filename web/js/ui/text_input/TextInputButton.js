"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const reactstrap_1 = require("reactstrap");
class TextInputButton extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.value = '';
        this.onCancel = this.onCancel.bind(this);
        this.toggle = this.toggle.bind(this);
        this.state = {
            popoverOpen: false
        };
    }
    render() {
        return (react_1.default.createElement("div", null,
            react_1.default.createElement(reactstrap_1.Button, { id: this.props.id, onClick: this.toggle }, this.props.children),
            react_1.default.createElement(reactstrap_1.Popover, { placement: this.props.placement || 'bottom', isOpen: this.state.popoverOpen, target: this.props.id, toggle: this.toggle },
                react_1.default.createElement(reactstrap_1.PopoverBody, null,
                    react_1.default.createElement("div", { className: "w-100 text-center lead p-1" }),
                    react_1.default.createElement(reactstrap_1.Form, null,
                        react_1.default.createElement(reactstrap_1.FormGroup, null,
                            react_1.default.createElement(reactstrap_1.Label, { className: "font-weight-bold", for: this.props.id }, this.props.title),
                            react_1.default.createElement(reactstrap_1.Input, { type: "text", name: "text", id: this.props.id, onChange: (event) => this.value = event.target.value, placeholder: this.props.placement || '' }))),
                    react_1.default.createElement("div", { className: "text-right" },
                        react_1.default.createElement(reactstrap_1.Button, { color: "secondary", size: "sm", className: "m-1", onClick: () => this.onCancel() }, "Cancel"),
                        react_1.default.createElement(reactstrap_1.Button, { color: "primary", size: "sm", className: "m-1", onClick: () => this.props.onComplete(this.value) }, "Set"))))));
    }
    hide() {
        this.setState({
            popoverOpen: false
        });
    }
    onCancel() {
        this.hide();
    }
    toggle() {
        this.setState({
            popoverOpen: !this.state.popoverOpen
        });
    }
}
exports.TextInputButton = TextInputButton;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dElucHV0QnV0dG9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGV4dElucHV0QnV0dG9uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGtEQUEwQjtBQUMxQiwyQ0FBdUY7QUFHdkYsTUFBYSxlQUFnQixTQUFRLGVBQUssQ0FBQyxTQUF5QjtJQUloRSxZQUFZLEtBQWE7UUFDckIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBSFQsVUFBSyxHQUFXLEVBQUUsQ0FBQztRQUt2QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFckMsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNULFdBQVcsRUFBRSxLQUFLO1NBQ3JCLENBQUM7SUFFTixDQUFDO0lBRU0sTUFBTTtRQUNULE9BQU8sQ0FDSDtZQUVJLDhCQUFDLG1CQUFNLElBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxJQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FDZjtZQUVULDhCQUFDLG9CQUFPLElBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxJQUFJLFFBQVEsRUFDM0MsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUM5QixNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQ3JCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFFeEIsOEJBQUMsd0JBQVc7b0JBRVIsdUNBQUssU0FBUyxFQUFDLDRCQUE0QixHQUVyQztvQkFFTiw4QkFBQyxpQkFBSTt3QkFFRCw4QkFBQyxzQkFBUzs0QkFFTiw4QkFBQyxrQkFBSyxJQUFDLFNBQVMsRUFBQyxrQkFBa0IsRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQVM7NEJBRWxGLDhCQUFDLGtCQUFLLElBQUMsSUFBSSxFQUFDLE1BQU0sRUFDWCxJQUFJLEVBQUMsTUFBTSxFQUNYLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFDakIsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUNwRCxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLElBQUksRUFBRSxHQUFHLENBRXpDLENBRVQ7b0JBRVAsdUNBQUssU0FBUyxFQUFDLFlBQVk7d0JBRXZCLDhCQUFDLG1CQUFNLElBQUMsS0FBSyxFQUFDLFdBQVcsRUFDakIsSUFBSSxFQUFDLElBQUksRUFDVCxTQUFTLEVBQUMsS0FBSyxFQUNmLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGFBQWlCO3dCQUV2RCw4QkFBQyxtQkFBTSxJQUFDLEtBQUssRUFBQyxTQUFTLEVBQ2YsSUFBSSxFQUFDLElBQUksRUFDVCxTQUFTLEVBQUMsS0FBSyxFQUNmLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQWMsQ0FFcEUsQ0FFSSxDQUVSLENBRVIsQ0FDVCxDQUFDO0lBQ04sQ0FBQztJQUVPLElBQUk7UUFDUixJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ1YsV0FBVyxFQUFFLEtBQUs7U0FDckIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLFFBQVE7UUFDWixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVPLE1BQU07UUFDVixJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ1YsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXO1NBQ3ZDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FFSjtBQXpGRCwwQ0F5RkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgcmVhY3Qvbm8tbXVsdGktY29tcDogMCwgcmVhY3QvcHJvcC10eXBlczogMCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7QnV0dG9uLCBGb3JtLCBGb3JtR3JvdXAsIElucHV0LCBMYWJlbCwgUG9wb3ZlciwgUG9wb3ZlckJvZHl9IGZyb20gJ3JlYWN0c3RyYXAnO1xuaW1wb3J0IFBvcHBlciBmcm9tICdwb3BwZXIuanMnO1xuXG5leHBvcnQgY2xhc3MgVGV4dElucHV0QnV0dG9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG5cbiAgICBwcml2YXRlIHZhbHVlOiBzdHJpbmcgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMub25DYW5jZWwgPSB0aGlzLm9uQ2FuY2VsLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudG9nZ2xlID0gdGhpcy50b2dnbGUuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgcG9wb3Zlck9wZW46IGZhbHNlXG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cblxuICAgICAgICAgICAgICAgIDxCdXR0b24gaWQ9e3RoaXMucHJvcHMuaWR9IG9uQ2xpY2s9e3RoaXMudG9nZ2xlfT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgICAgICAgICA8UG9wb3ZlciBwbGFjZW1lbnQ9e3RoaXMucHJvcHMucGxhY2VtZW50IHx8ICdib3R0b20nfVxuICAgICAgICAgICAgICAgICAgICAgICAgIGlzT3Blbj17dGhpcy5zdGF0ZS5wb3BvdmVyT3Blbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9e3RoaXMucHJvcHMuaWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlPXt0aGlzLnRvZ2dsZX0+XG5cbiAgICAgICAgICAgICAgICAgICAgPFBvcG92ZXJCb2R5PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctMTAwIHRleHQtY2VudGVyIGxlYWQgcC0xXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybT5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JtR3JvdXA+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsIGNsYXNzTmFtZT1cImZvbnQtd2VpZ2h0LWJvbGRcIiBmb3I9e3RoaXMucHJvcHMuaWR9Pnt0aGlzLnByb3BzLnRpdGxlfTwvTGFiZWw+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0IHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT4gdGhpcy52YWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt0aGlzLnByb3BzLnBsYWNlbWVudCB8fCAnJ30vPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvRm9ybT5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXJpZ2h0XCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNvbG9yPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtLTFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5vbkNhbmNlbCgpfT5DYW5jZWw8L0J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtLTFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5vbkNvbXBsZXRlKHRoaXMudmFsdWUpfT5TZXQ8L0J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPC9Qb3BvdmVyQm9keT5cblxuICAgICAgICAgICAgICAgIDwvUG9wb3Zlcj5cblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoaWRlKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHBvcG92ZXJPcGVuOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQ2FuY2VsKCkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHRvZ2dsZSgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBwb3BvdmVyT3BlbjogIXRoaXMuc3RhdGUucG9wb3Zlck9wZW5cbiAgICAgICAgfSk7XG4gICAgfVxuXG59XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBwbGFjZW1lbnQ/OiBQb3BwZXIuUGxhY2VtZW50O1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAgIG9uQ29tcGxldGU6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICBwb3BvdmVyT3BlbjogYm9vbGVhbjtcbn1cblxuIl19