"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const reactstrap_1 = require("reactstrap");
const DialogContainer_1 = require("./DialogContainer");
class Styles {
}
Styles.title = {
    fontSize: "20px",
    fontWeight: "bold"
};
Styles.subtitle = {};
Styles.button = {
    fontWeight: "bold"
};
class Alert extends react_1.default.PureComponent {
    constructor(props) {
        super(props);
        this.onConfirm = this.onConfirm.bind(this);
        this.onKeyDown = this.onKeyDown.bind(this);
    }
    render() {
        const opts = {
            buttonColor: 'primary',
            titlebarClassName: 'bg-dark'
        };
        const { type } = this.props;
        if (type) {
            opts.buttonColor = type;
            opts.titlebarClassName = 'bg-' + type;
        }
        return (react_1.default.createElement(DialogContainer_1.DialogContainer, { open: true },
            react_1.default.createElement("div", { onKeyDown: (event) => this.onKeyDown(event), style: { minWidth: '350px' } },
                react_1.default.createElement("div", { className: "w-100 p-1 pl-2 pr-2 " + opts.titlebarClassName, style: Styles.title }, this.props.title),
                react_1.default.createElement("div", { className: "w-100 p-1 m-1 text-grey900 text-xl", style: Styles.subtitle }, this.props.body),
                react_1.default.createElement("div", { className: "text-center m-1 pb-1" },
                    react_1.default.createElement(reactstrap_1.Button, { color: opts.buttonColor, style: Styles.button, size: "lg", className: "m-1", onClick: () => this.onConfirm() }, "OK")))));
    }
    onKeyDown(event) {
        if (event.key === "Escape") {
            this.props.onConfirm();
        }
    }
    onConfirm() {
        this.props.onConfirm();
    }
}
exports.Alert = Alert;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWxlcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBbGVydC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBMEI7QUFDMUIsMkNBQWtDO0FBQ2xDLHVEQUFrRDtBQUlsRCxNQUFNLE1BQU07O0FBRU0sWUFBSyxHQUF3QjtJQUN2QyxRQUFRLEVBQUUsTUFBTTtJQUNoQixVQUFVLEVBQUUsTUFBTTtDQUNyQixDQUFDO0FBRVksZUFBUSxHQUF3QixFQUM3QyxDQUFDO0FBRVksYUFBTSxHQUF3QjtJQUN4QyxVQUFVLEVBQUUsTUFBTTtDQUNyQixDQUFDO0FBSU4sTUFBYSxLQUFNLFNBQVEsZUFBSyxDQUFDLGFBQTZCO0lBRTFELFlBQVksS0FBVTtRQUNsQixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFYixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFL0MsQ0FBQztJQUVNLE1BQU07UUFFVCxNQUFNLElBQUksR0FBRztZQUNULFdBQVcsRUFBRSxTQUFTO1lBQ3RCLGlCQUFpQixFQUFFLFNBQVM7U0FDL0IsQ0FBQztRQUVGLE1BQU0sRUFBQyxJQUFJLEVBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRTFCLElBQUksSUFBSSxFQUFFO1lBQ04sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7WUFDeEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDekM7UUFFRCxPQUFPLENBRUgsOEJBQUMsaUNBQWUsSUFBQyxJQUFJLEVBQUUsSUFBSTtZQUV2Qix1Q0FBSyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQzNDLEtBQUssRUFBRSxFQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUM7Z0JBRTNCLHVDQUFLLFNBQVMsRUFBRSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQzFELEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxJQUVuQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FFZjtnQkFFTix1Q0FBSyxTQUFTLEVBQUMsb0NBQW9DLEVBQzlDLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxJQUV0QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FFZDtnQkFFTix1Q0FBSyxTQUFTLEVBQUMsc0JBQXNCO29CQUVqQyw4QkFBQyxtQkFBTSxJQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxFQUN2QixLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFDcEIsSUFBSSxFQUFDLElBQUksRUFDVCxTQUFTLEVBQUMsS0FBSyxFQUNmLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQWEsQ0FFbEQsQ0FFSixDQUVRLENBRXJCLENBQUM7SUFFTixDQUFDO0lBRU8sU0FBUyxDQUFDLEtBQXVDO1FBRXJELElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUMxQjtJQUVMLENBQUM7SUFFTyxTQUFTO1FBQ2IsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMzQixDQUFDO0NBR0o7QUE1RUQsc0JBNEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7QnV0dG9ufSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCB7RGlhbG9nQ29udGFpbmVyfSBmcm9tICcuL0RpYWxvZ0NvbnRhaW5lcic7XG5pbXBvcnQge051bGxDb2xsYXBzZX0gZnJvbSAnLi4vbnVsbF9jb2xsYXBzZS9OdWxsQ29sbGFwc2UnO1xuaW1wb3J0IHtBbGVydFByb3BzLCBDb25maXJtUHJvcHN9IGZyb20gXCIuL0RpYWxvZ3NcIjtcblxuY2xhc3MgU3R5bGVzIHtcblxuICAgIHB1YmxpYyBzdGF0aWMgdGl0bGU6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7XG4gICAgICAgIGZvbnRTaXplOiBcIjIwcHhcIixcbiAgICAgICAgZm9udFdlaWdodDogXCJib2xkXCJcbiAgICB9O1xuXG4gICAgcHVibGljIHN0YXRpYyBzdWJ0aXRsZTogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHtcbiAgICB9O1xuXG4gICAgcHVibGljIHN0YXRpYyBidXR0b246IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7XG4gICAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiXG4gICAgfTtcblxufVxuXG5leHBvcnQgY2xhc3MgQWxlcnQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogYW55KSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLm9uQ29uZmlybSA9IHRoaXMub25Db25maXJtLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25LZXlEb3duID0gdGhpcy5vbktleURvd24uYmluZCh0aGlzKTtcblxuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG5cbiAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgIGJ1dHRvbkNvbG9yOiAncHJpbWFyeScsXG4gICAgICAgICAgICB0aXRsZWJhckNsYXNzTmFtZTogJ2JnLWRhcmsnXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qge3R5cGV9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgb3B0cy5idXR0b25Db2xvciA9IHR5cGU7XG4gICAgICAgICAgICBvcHRzLnRpdGxlYmFyQ2xhc3NOYW1lID0gJ2JnLScgKyB0eXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcblxuICAgICAgICAgICAgPERpYWxvZ0NvbnRhaW5lciBvcGVuPXt0cnVlfT5cblxuICAgICAgICAgICAgICAgIDxkaXYgb25LZXlEb3duPXsoZXZlbnQpID0+IHRoaXMub25LZXlEb3duKGV2ZW50KX1cbiAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7bWluV2lkdGg6ICczNTBweCd9fT5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJ3LTEwMCBwLTEgcGwtMiBwci0yIFwiICsgb3B0cy50aXRsZWJhckNsYXNzTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17U3R5bGVzLnRpdGxlfT5cblxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMudGl0bGV9XG5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTEwMCBwLTEgbS0xIHRleHQtZ3JleTkwMCB0ZXh0LXhsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17U3R5bGVzLnN1YnRpdGxlfT5cblxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYm9keX1cblxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyIG0tMSBwYi0xXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY29sb3I9e29wdHMuYnV0dG9uQ29sb3J9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtTdHlsZXMuYnV0dG9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwibGdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtLTFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLm9uQ29uZmlybSgpfT5PSzwvQnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwvRGlhbG9nQ29udGFpbmVyPlxuXG4gICAgICAgICk7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uS2V5RG93bihldmVudDogUmVhY3QuS2V5Ym9hcmRFdmVudDxIVE1MRWxlbWVudD4pIHtcblxuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ29uZmlybSgpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQ29uZmlybSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNvbmZpcm0oKTtcbiAgICB9XG5cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wcyBleHRlbmRzIEFsZXJ0UHJvcHMge1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN0YXRlIHtcblxufVxuIl19