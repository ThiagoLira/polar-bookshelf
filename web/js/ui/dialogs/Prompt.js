"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const reactstrap_1 = require("reactstrap");
const Label_1 = __importDefault(require("reactstrap/lib/Label"));
const Input_1 = __importDefault(require("reactstrap/lib/Input"));
const DialogContainer_1 = require("./DialogContainer");
const InputValidators_1 = require("./InputValidators");
class Prompt extends react_1.default.PureComponent {
    constructor(props) {
        super(props);
        this.value = '';
        this.onCancel = this.onCancel.bind(this);
        this.onDone = this.onDone.bind(this);
        this.onKeyDown = this.onKeyDown.bind(this);
        this.state = {};
    }
    render() {
        const id = 'prompt-' + Math.floor(10000 * Math.random());
        const { validation } = this.state;
        const InputValidationMessage = () => {
            if (validation) {
                return react_1.default.createElement("div", { className: "mt-1 mb-1" },
                    react_1.default.createElement("div", { className: "alert alert-danger p-1", role: "alert" }, validation.message));
            }
            else {
                return react_1.default.createElement("div", null);
            }
        };
        return (react_1.default.createElement(DialogContainer_1.DialogContainer, { open: true },
            react_1.default.createElement("div", { className: "p-3" },
                react_1.default.createElement(InputValidationMessage, null),
                react_1.default.createElement(Label_1.default, { className: "font-weight-bold", for: id },
                    react_1.default.createElement("h4", null, this.props.title)),
                react_1.default.createElement("div", { className: "mt-1 mb-3" },
                    react_1.default.createElement(Input_1.default, { type: "text", name: id, id: id, style: {
                            width: '450px',
                            maxWidth: '100vh'
                        }, onKeyDown: event => this.onKeyDown(event), defaultValue: this.props.defaultValue || '', onChange: (event) => this.value = event.target.value, autoFocus: true, placeholder: this.props.placeholder || '' })),
                react_1.default.createElement("div", { className: "text-right" },
                    react_1.default.createElement(reactstrap_1.Button, { color: "light", size: "lg", className: "", onClick: () => this.onCancel() }, "Cancel"),
                    react_1.default.createElement(reactstrap_1.Button, { color: "primary", size: "lg", className: "ml-1", onClick: () => this.onDone(this.value) }, "Done")))));
    }
    onKeyDown(event) {
        if (event.key === "Enter") {
            this.onDone(this.value);
        }
        if (event.key === "Escape") {
            this.onCancel();
        }
    }
    onCancel() {
        this.props.onCancel();
    }
    onDone(value) {
        const validator = this.props.validator || InputValidators_1.NULL_INPUT_VALIDATOR;
        const validation = validator(value);
        if (validation) {
            this.setState({ validation });
            return;
        }
        this.props.onDone(value);
    }
}
exports.Prompt = Prompt;
//# sourceMappingURL=data:application/json;base64,