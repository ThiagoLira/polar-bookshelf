"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const Button_1 = __importDefault(require("reactstrap/lib/Button"));
const PopoverBody_1 = __importDefault(require("reactstrap/lib/PopoverBody"));
const reactstrap_1 = require("reactstrap");
const NotificationForPrivateGroupDoc_1 = require("./NotificationForPrivateGroupDoc");
const NullCollapse_1 = require("../null_collapse/NullCollapse");
const DropdownChevron_1 = require("../util/DropdownChevron");
const NotificationList = (props) => {
    const invitations = props.invitations || [];
    return react_1.default.createElement("div", null, invitations.map(invitation => react_1.default.createElement(NotificationForPrivateGroupDoc_1.NotificationForPrivateGroupDoc, { key: invitation.id, invitation: invitation, persistenceLayerProvider: props.persistenceLayerProvider })));
};
const NotificationBody = (props) => {
    const invitations = props.invitations || [];
    const hasNotifications = invitations.length > 0;
    return react_1.default.createElement("div", null,
        react_1.default.createElement(NullCollapse_1.NullCollapse, { open: !hasNotifications },
            react_1.default.createElement("b", null, "No new notifications available.")),
        react_1.default.createElement(NullCollapse_1.NullCollapse, { open: hasNotifications },
            react_1.default.createElement(NotificationList, Object.assign({}, props))));
};
class NotificationButton extends react_1.default.PureComponent {
    constructor(props) {
        super(props);
        this.toggle = this.toggle.bind(this);
        this.state = {
            open: false,
        };
    }
    render() {
        const invitations = this.props.invitations || [];
        const count = invitations.length;
        const hasNotifications = count > 0;
        const color = hasNotifications ? 'primary' : 'light';
        return (react_1.default.createElement("div", { className: "" },
            react_1.default.createElement(Button_1.default, { color: color, id: "notification-button", size: "md", onClick: () => this.toggle(true), style: { whiteSpace: 'nowrap' }, className: "border mr-1" },
                react_1.default.createElement("span", { className: "fa-layers fa-fw" },
                    react_1.default.createElement("i", { className: "fas fa-envelope" }),
                    react_1.default.createElement(NullCollapse_1.NullCollapse, { open: count > 0 },
                        "\u00A0 ",
                        count),
                    react_1.default.createElement(DropdownChevron_1.DropdownChevron, null))),
            react_1.default.createElement(reactstrap_1.Popover, { trigger: "legacy", placement: "bottom", fade: false, delay: { show: 0, hide: 0 }, isOpen: this.state.open, toggle: () => this.toggle(false), target: "notification-button", className: "", style: {
                    minWidth: '450px',
                    maxWidth: '600px'
                } },
                react_1.default.createElement(PopoverBody_1.default, { className: "shadow" },
                    react_1.default.createElement(NotificationBody, Object.assign({}, this.props))))));
    }
    toggle(open) {
        this.setState(Object.assign(Object.assign({}, this.state), { open }));
    }
}
exports.NotificationButton = NotificationButton;
//# sourceMappingURL=data:application/json;base64,