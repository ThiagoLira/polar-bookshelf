"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_select_1 = __importDefault(require("react-select"));
const Functions_1 = require("polar-shared/src/util/Functions");
const EmailAddresses_1 = require("../../util/EmailAddresses");
class GroupsSelector extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.handleChange = this.handleChange.bind(this);
        this.onPaste = this.onPaste.bind(this);
        this.state = {
            selectedOptions: this.props.selectedOptions || []
        };
    }
    render() {
        const options = [...this.props.options || []];
        const selectedOptions = [...this.state.selectedOptions];
        return react_1.default.createElement("div", { onPaste: event => this.onPaste(event) },
            react_1.default.createElement(react_select_1.default, { isMulti: true, isClearable: true, classNamePrefix: "select", onChange: (selectedOptions) => this.handleChange(selectedOptions), value: selectedOptions, defaultValue: selectedOptions, placeholder: "Enter or select groups", options: options }));
    }
    onPaste(event) {
        event.preventDefault();
        const text = event.clipboardData.getData('text/plain');
        const emailAddresses = EmailAddresses_1.EmailAddresses.parseList(text);
        const newContacts = emailAddresses.map(current => {
            return {
                value: current.address,
                label: EmailAddresses_1.EmailAddresses.format(current)
            };
        });
        this.setState(Object.assign(Object.assign({}, this.state), { selectedOptions: [...this.state.selectedOptions, ...newContacts] }));
    }
    handleChange(selectedOptions) {
        this.setState(Object.assign(Object.assign({}, this.state), { selectedOptions }));
        const onChange = this.props.onChange || Functions_1.NULL_FUNCTION;
        onChange(selectedOptions.map(current => current.value));
    }
}
exports.GroupsSelector = GroupsSelector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3JvdXBzU2VsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJHcm91cHNTZWxlY3Rvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBMEI7QUFDMUIsZ0VBQTJDO0FBRTNDLCtEQUE4RDtBQUM5RCw4REFBeUQ7QUFTekQsTUFBYSxjQUFlLFNBQVEsZUFBSyxDQUFDLFNBQXlCO0lBRS9ELFlBQVksS0FBYTtRQUNyQixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFYixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkMsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNULGVBQWUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsSUFBSSxFQUFFO1NBQ3BELENBQUM7SUFFTixDQUFDO0lBRU0sTUFBTTtRQUdULE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM5QyxNQUFNLGVBQWUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUV4RCxPQUFPLHVDQUFLLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1lBRTdDLDhCQUFDLHNCQUFlLElBQ1osT0FBTyxRQUNQLFdBQVcsUUFHWCxlQUFlLEVBQUMsUUFBUSxFQUN4QixRQUFRLEVBQUUsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBNkMsQ0FBQyxFQUMvRixLQUFLLEVBQUUsZUFBZSxFQUN0QixZQUFZLEVBQUUsZUFBZSxFQUM3QixXQUFXLEVBQUMsd0JBQXdCLEVBQ3BDLE9BQU8sRUFBRSxPQUFPLEdBRUYsQ0FFaEIsQ0FBQztJQUVYLENBQUM7SUFFTyxPQUFPLENBQUMsS0FBMkM7UUFFdkQsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRXZCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXZELE1BQU0sY0FBYyxHQUFHLCtCQUFjLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRELE1BQU0sV0FBVyxHQUFrQixjQUFjLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBRTVELE9BQU87Z0JBQ0gsS0FBSyxFQUFFLE9BQU8sQ0FBQyxPQUFPO2dCQUN0QixLQUFLLEVBQUUsK0JBQWMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO2FBQ3hDLENBQUM7UUFFTixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxRQUFRLGlDQUNOLElBQUksQ0FBQyxLQUFLLEtBQ2IsZUFBZSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxHQUFHLFdBQVcsQ0FBQyxJQUNsRSxDQUFDO0lBRVAsQ0FBQztJQUVPLFlBQVksQ0FBQyxlQUEyQztRQUM1RCxJQUFJLENBQUMsUUFBUSxpQ0FBSyxJQUFJLENBQUMsS0FBSyxLQUFFLGVBQWUsSUFBRSxDQUFDO1FBRWhELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLHlCQUFhLENBQUM7UUFFdEQsUUFBUSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUU1RCxDQUFDO0NBRUo7QUF6RUQsd0NBeUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDcmVhdGFibGVTZWxlY3QgZnJvbSAncmVhY3Qtc2VsZWN0JztcbmltcG9ydCB7Q29udGFjdElEU3RyfSBmcm9tICcuLi8uLi9kYXRhc3RvcmUvc2hhcmluZy9kYi9Db250YWN0cyc7XG5pbXBvcnQge05VTExfRlVOQ1RJT059IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvdXRpbC9GdW5jdGlvbnMnO1xuaW1wb3J0IHtFbWFpbEFkZHJlc3Nlc30gZnJvbSAnLi4vLi4vdXRpbC9FbWFpbEFkZHJlc3Nlcyc7XG5pbXBvcnQge1VzZXJSZWZ9IGZyb20gJy4uLy4uL2RhdGFzdG9yZS9zaGFyaW5nL3JwYy9Vc2VyUmVmcyc7XG5pbXBvcnQge0NvbnRhY3RQcm9maWxlfSBmcm9tICcuL0dyb3VwU2hhcmluZ1JlY29yZHMnO1xuaW1wb3J0IHtDb250YWN0T3B0aW9uc30gZnJvbSAnLi9Db250YWN0T3B0aW9ucyc7XG5pbXBvcnQge0dyb3VwTmFtZVN0cn0gZnJvbSBcIi4uLy4uL2RhdGFzdG9yZS9zaGFyaW5nL2RiL0dyb3Vwc1wiO1xuXG4vKipcbiAqIEFsbG93IHRoZSB1c2VyIHRvIHNlbGVjdCBmcm9tIG9uZSBvciBtb3JlIG9mIHRoZWlyIGNvbnRhY3RzLlxuICovXG5leHBvcnQgY2xhc3MgR3JvdXBzU2VsZWN0b3IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vblBhc3RlID0gdGhpcy5vblBhc3RlLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uczogdGhpcy5wcm9wcy5zZWxlY3RlZE9wdGlvbnMgfHwgW11cbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG5cblxuICAgICAgICBjb25zdCBvcHRpb25zID0gWy4uLnRoaXMucHJvcHMub3B0aW9ucyB8fCBbXV07XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9ucyA9IFsuLi50aGlzLnN0YXRlLnNlbGVjdGVkT3B0aW9uc107XG5cbiAgICAgICAgcmV0dXJuIDxkaXYgb25QYXN0ZT17ZXZlbnQgPT4gdGhpcy5vblBhc3RlKGV2ZW50KX0+XG5cbiAgICAgICAgICAgIDxDcmVhdGFibGVTZWxlY3RcbiAgICAgICAgICAgICAgICBpc011bHRpXG4gICAgICAgICAgICAgICAgaXNDbGVhcmFibGVcbiAgICAgICAgICAgICAgICAvLyBvbktleURvd249e2V2ZW50ID0+IHRoaXMub25LZXlEb3duKGV2ZW50KX1cbiAgICAgICAgICAgICAgICAvLyBjbGFzc05hbWU9XCJiYXNpYy1tdWx0aS1zZWxlY3RcIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZVByZWZpeD1cInNlbGVjdFwiXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhzZWxlY3RlZE9wdGlvbnMpID0+IHRoaXMuaGFuZGxlQ2hhbmdlKHNlbGVjdGVkT3B0aW9ucyBhcyBSZWFkb25seUFycmF5PEdyb3VwT3B0aW9uPil9XG4gICAgICAgICAgICAgICAgdmFsdWU9e3NlbGVjdGVkT3B0aW9uc31cbiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e3NlbGVjdGVkT3B0aW9uc31cbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIG9yIHNlbGVjdCBncm91cHNcIlxuICAgICAgICAgICAgICAgIG9wdGlvbnM9e29wdGlvbnN9PlxuXG4gICAgICAgICAgICA8L0NyZWF0YWJsZVNlbGVjdD5cblxuICAgICAgICA8L2Rpdj47XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uUGFzdGUoZXZlbnQ6IFJlYWN0LkNsaXBib2FyZEV2ZW50PEhUTUxEaXZFbGVtZW50Pikge1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3QgdGV4dCA9IGV2ZW50LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dC9wbGFpbicpO1xuXG4gICAgICAgIGNvbnN0IGVtYWlsQWRkcmVzc2VzID0gRW1haWxBZGRyZXNzZXMucGFyc2VMaXN0KHRleHQpO1xuXG4gICAgICAgIGNvbnN0IG5ld0NvbnRhY3RzOiBHcm91cE9wdGlvbltdID0gZW1haWxBZGRyZXNzZXMubWFwKGN1cnJlbnQgPT4ge1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBjdXJyZW50LmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgbGFiZWw6IEVtYWlsQWRkcmVzc2VzLmZvcm1hdChjdXJyZW50KVxuICAgICAgICAgICAgfTtcblxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUsXG4gICAgICAgICAgICBzZWxlY3RlZE9wdGlvbnM6IFsuLi50aGlzLnN0YXRlLnNlbGVjdGVkT3B0aW9ucywgLi4ubmV3Q29udGFjdHNdXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVDaGFuZ2Uoc2VsZWN0ZWRPcHRpb25zOiBSZWFkb25seUFycmF5PEdyb3VwT3B0aW9uPikge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsuLi50aGlzLnN0YXRlLCBzZWxlY3RlZE9wdGlvbnN9KTtcblxuICAgICAgICBjb25zdCBvbkNoYW5nZSA9IHRoaXMucHJvcHMub25DaGFuZ2UgfHwgTlVMTF9GVU5DVElPTjtcblxuICAgICAgICBvbkNoYW5nZShzZWxlY3RlZE9wdGlvbnMubWFwKGN1cnJlbnQgPT4gY3VycmVudC52YWx1ZSkpO1xuXG4gICAgfVxuXG59XG5cbmludGVyZmFjZSBJUHJvcHMge1xuICAgIHJlYWRvbmx5IG9wdGlvbnM/OiBSZWFkb25seUFycmF5PEdyb3VwT3B0aW9uPjtcbiAgICByZWFkb25seSBzZWxlY3RlZE9wdGlvbnM/OiBSZWFkb25seUFycmF5PEdyb3VwT3B0aW9uPjtcbiAgICByZWFkb25seSBvbkNoYW5nZT86IChncm91cFNlbGVjdGlvbnM6IFJlYWRvbmx5QXJyYXk8R3JvdXBOYW1lU3RyPikgPT4gdm9pZDtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gICAgcmVhZG9ubHkgc2VsZWN0ZWRPcHRpb25zOiBSZWFkb25seUFycmF5PEdyb3VwT3B0aW9uPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHcm91cE9wdGlvbiB7XG4gICAgcmVhZG9ubHkgdmFsdWU6IEdyb3VwTmFtZVN0cjtcbiAgICByZWFkb25seSBsYWJlbDogc3RyaW5nO1xufVxuXG4iXX0=