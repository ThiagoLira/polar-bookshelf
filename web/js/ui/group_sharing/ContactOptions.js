"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ContactOptions {
    static toContactOptions(contactProfiles) {
        const contactProfilesMapped = contactProfiles.map(current => {
            if (current.profile) {
                const { profile } = current;
                const { contact } = current;
                const createLabel = () => {
                    if (profile.name && profile.handle && contact.email) {
                        return `${profile.name} (${contact.email}) AKA ${profile.handle}`;
                    }
                    if (profile.name && contact.email) {
                        return `${profile.name} (${contact.email})`;
                    }
                    return profile.name || profile.handle || contact.email || "";
                };
                const label = createLabel();
                return {
                    value: current.profile.id,
                    label
                };
            }
            else if (current.contact.email) {
                return {
                    value: current.contact.email,
                    label: current.contact.email
                };
            }
            else {
                console.warn("Broken profile information: ", current);
                return undefined;
            }
        });
        return contactProfilesMapped
            .filter(current => current !== undefined)
            .map(current => current);
    }
    static toUserRefs(options = []) {
        return options.map(current => {
            if (current.value.indexOf("@") !== -1) {
                return {
                    value: current.value,
                    type: 'email'
                };
            }
            return {
                value: current.value,
                type: 'profileID'
            };
        });
    }
}
exports.ContactOptions = ContactOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFjdE9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDb250YWN0T3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLE1BQWEsY0FBYztJQUVoQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsZUFBOEM7UUFFekUsTUFBTSxxQkFBcUIsR0FDckIsZUFBZSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUVoQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Z0JBRWpCLE1BQU0sRUFBQyxPQUFPLEVBQUMsR0FBRyxPQUFPLENBQUM7Z0JBQzFCLE1BQU0sRUFBQyxPQUFPLEVBQUMsR0FBRyxPQUFPLENBQUM7Z0JBRTFCLE1BQU0sV0FBVyxHQUFHLEdBQUcsRUFBRTtvQkFFckIsSUFBSSxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTt3QkFDakQsT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLEtBQUssU0FBUyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7cUJBQ3JFO29CQUVELElBQUksT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO3dCQUMvQixPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksS0FBSyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUM7cUJBQy9DO29CQUVELE9BQU8sT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO2dCQUVqRSxDQUFDLENBQUM7Z0JBRUYsTUFBTSxLQUFLLEdBQUcsV0FBVyxFQUFFLENBQUM7Z0JBRTVCLE9BQU87b0JBQ0gsS0FBSyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFDekIsS0FBSztpQkFDUixDQUFDO2FBRUw7aUJBQU0sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtnQkFFOUIsT0FBTztvQkFDSCxLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFNO29CQUM3QixLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFNO2lCQUNoQyxDQUFDO2FBRUw7aUJBQU07Z0JBRUgsT0FBTyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFNdEQsT0FBTyxTQUFTLENBQUM7YUFFcEI7UUFFTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8scUJBQXFCO2FBQ25CLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUM7YUFDeEMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBUSxDQUFDLENBQUM7SUFFdEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVLENBQUMsVUFBd0MsRUFBRTtRQUUvRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFFekIsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFFbkMsT0FBTztvQkFDSCxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7b0JBQ3BCLElBQUksRUFBRSxPQUFPO2lCQUNoQixDQUFDO2FBRUw7WUFFRCxPQUFPO2dCQUNILEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztnQkFDcEIsSUFBSSxFQUFFLFdBQVc7YUFDcEIsQ0FBQztRQUVOLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQztDQUVKO0FBbEZELHdDQWtGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29udGFjdFByb2ZpbGV9IGZyb20gJy4vR3JvdXBTaGFyaW5nUmVjb3Jkcyc7XG5pbXBvcnQge1VzZXJSZWZ9IGZyb20gJy4uLy4uL2RhdGFzdG9yZS9zaGFyaW5nL3JwYy9Vc2VyUmVmcyc7XG5pbXBvcnQge0NvbnRhY3RPcHRpb259IGZyb20gJy4vQ29udGFjdHNTZWxlY3Rvcic7XG5cbmV4cG9ydCBjbGFzcyBDb250YWN0T3B0aW9ucyB7XG5cbiAgICBwdWJsaWMgc3RhdGljIHRvQ29udGFjdE9wdGlvbnMoY29udGFjdFByb2ZpbGVzOiBSZWFkb25seUFycmF5PENvbnRhY3RQcm9maWxlPik6IFJlYWRvbmx5QXJyYXk8Q29udGFjdE9wdGlvbj4ge1xuXG4gICAgICAgIGNvbnN0IGNvbnRhY3RQcm9maWxlc01hcHBlZDogUmVhZG9ubHlBcnJheTxDb250YWN0T3B0aW9uIHwgdW5kZWZpbmVkPlxuICAgICAgICAgICAgPSBjb250YWN0UHJvZmlsZXMubWFwKGN1cnJlbnQgPT4ge1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudC5wcm9maWxlKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB7cHJvZmlsZX0gPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IHtjb250YWN0fSA9IGN1cnJlbnQ7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjcmVhdGVMYWJlbCA9ICgpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvZmlsZS5uYW1lICYmIHByb2ZpbGUuaGFuZGxlICYmIGNvbnRhY3QuZW1haWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtwcm9maWxlLm5hbWV9ICgke2NvbnRhY3QuZW1haWx9KSBBS0EgJHtwcm9maWxlLmhhbmRsZX1gO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2ZpbGUubmFtZSAmJiBjb250YWN0LmVtYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7cHJvZmlsZS5uYW1lfSAoJHtjb250YWN0LmVtYWlsfSlgO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2ZpbGUubmFtZSB8fCBwcm9maWxlLmhhbmRsZSB8fCBjb250YWN0LmVtYWlsIHx8IFwiXCI7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBjcmVhdGVMYWJlbCgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN1cnJlbnQucHJvZmlsZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnQuY29udGFjdC5lbWFpbCkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN1cnJlbnQuY29udGFjdC5lbWFpbCEsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBjdXJyZW50LmNvbnRhY3QuZW1haWwhXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkJyb2tlbiBwcm9maWxlIGluZm9ybWF0aW9uOiBcIiwgY3VycmVudCk7XG5cbiAgICAgICAgICAgICAgICAvLyBJIHRoaW5rIHRoZXJlIGlzIGp1c3QgYSBwcm9maWxlSUQgaGVyZSBhbmQgd2UncmUgbm90IHByb3Blcmx5XG4gICAgICAgICAgICAgICAgLy8gcmVzb2x2aW5nIGl0IHRvIHNob3cgaXQgaW4gdGhlIFVJLlxuXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBvbmUgaXMgYnJva2VuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjb250YWN0UHJvZmlsZXNNYXBwZWRcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGN1cnJlbnQgPT4gY3VycmVudCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIC5tYXAoY3VycmVudCA9PiBjdXJyZW50ISk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHRvVXNlclJlZnMob3B0aW9uczogUmVhZG9ubHlBcnJheTxDb250YWN0T3B0aW9uPiA9IFtdKTogUmVhZG9ubHlBcnJheTxVc2VyUmVmPiB7XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnMubWFwKGN1cnJlbnQgPT4ge1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudC52YWx1ZS5pbmRleE9mKFwiQFwiKSAhPT0gLTEpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjdXJyZW50LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZW1haWwnXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBjdXJyZW50LnZhbHVlLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdwcm9maWxlSUQnXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG59XG4iXX0=