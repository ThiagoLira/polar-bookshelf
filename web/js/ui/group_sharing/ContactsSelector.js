"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_select_1 = __importDefault(require("react-select"));
const Functions_1 = require("polar-shared/src/util/Functions");
const EmailAddresses_1 = require("../../util/EmailAddresses");
const ContactOptions_1 = require("./ContactOptions");
class ContactsSelector extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.handleChange = this.handleChange.bind(this);
        this.onPaste = this.onPaste.bind(this);
        this.state = {
            selectedOptions: this.props.selectedOptions || []
        };
    }
    render() {
        const options = [...this.props.options || []];
        const selectedOptions = [...this.state.selectedOptions];
        return react_1.default.createElement("div", { onPaste: event => this.onPaste(event) },
            react_1.default.createElement(react_select_1.default, { isMulti: true, isClearable: true, autoFocus: true, classNamePrefix: "select", onChange: (selectedOptions) => this.handleChange(selectedOptions), value: selectedOptions, defaultValue: selectedOptions, placeholder: "Enter names or email addresses", options: options }));
    }
    onPaste(event) {
        event.preventDefault();
        const text = event.clipboardData.getData('text/plain');
        const emailAddresses = EmailAddresses_1.EmailAddresses.parseList(text);
        const newContacts = emailAddresses.map(current => {
            return {
                value: current.address,
                label: EmailAddresses_1.EmailAddresses.format(current)
            };
        });
        this.setState(Object.assign(Object.assign({}, this.state), { selectedOptions: [...this.state.selectedOptions, ...newContacts] }));
    }
    handleChange(selectedOptions) {
        this.setState(Object.assign(Object.assign({}, this.state), { selectedOptions }));
        const onChange = this.props.onChange || Functions_1.NULL_FUNCTION;
        onChange(ContactOptions_1.ContactOptions.toUserRefs(selectedOptions));
    }
}
exports.ContactsSelector = ContactsSelector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGFjdHNTZWxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNvbnRhY3RzU2VsZWN0b3IudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0RBQTBCO0FBQzFCLGdFQUEyQztBQUUzQywrREFBOEQ7QUFDOUQsOERBQXlEO0FBRXpELHFEQUFnRDtBQUtoRCxNQUFhLGdCQUFpQixTQUFRLGVBQUssQ0FBQyxTQUF5QjtJQUVqRSxZQUFZLEtBQWE7UUFDckIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXZDLElBQUksQ0FBQyxLQUFLLEdBQUc7WUFDVCxlQUFlLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLElBQUksRUFBRTtTQUNwRCxDQUFDO0lBRU4sQ0FBQztJQUVNLE1BQU07UUFHVCxNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLENBQUM7UUFDOUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFeEQsT0FBTyx1Q0FBSyxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUU3Qyw4QkFBQyxzQkFBZSxJQUVaLE9BQU8sUUFDUCxXQUFXLFFBQ1gsU0FBUyxRQUdULGVBQWUsRUFBQyxRQUFRLEVBQ3hCLFFBQVEsRUFBRSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUErQyxDQUFDLEVBQ2pHLEtBQUssRUFBRSxlQUFlLEVBQ3RCLFlBQVksRUFBRSxlQUFlLEVBQzdCLFdBQVcsRUFBQyxnQ0FBZ0MsRUFDNUMsT0FBTyxFQUFFLE9BQU8sR0FFRixDQUVoQixDQUFDO0lBRVgsQ0FBQztJQUVPLE9BQU8sQ0FBQyxLQUEyQztRQUV2RCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFdkIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFdkQsTUFBTSxjQUFjLEdBQUcsK0JBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEQsTUFBTSxXQUFXLEdBQW9CLGNBQWMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFFOUQsT0FBTztnQkFDSCxLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU87Z0JBQ3RCLEtBQUssRUFBRSwrQkFBYyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7YUFDeEMsQ0FBQztRQUVOLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFFBQVEsaUNBQ04sSUFBSSxDQUFDLEtBQUssS0FDYixlQUFlLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLEdBQUcsV0FBVyxDQUFDLElBQ2xFLENBQUM7SUFFUCxDQUFDO0lBRU8sWUFBWSxDQUFDLGVBQTZDO1FBQzlELElBQUksQ0FBQyxRQUFRLGlDQUFLLElBQUksQ0FBQyxLQUFLLEtBQUUsZUFBZSxJQUFFLENBQUM7UUFFaEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUkseUJBQWEsQ0FBQztRQUV0RCxRQUFRLENBQUMsK0JBQWMsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUV6RCxDQUFDO0NBRUo7QUEzRUQsNENBMkVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDcmVhdGFibGVTZWxlY3QgZnJvbSAncmVhY3Qtc2VsZWN0JztcbmltcG9ydCB7Q29udGFjdElEU3RyfSBmcm9tICcuLi8uLi9kYXRhc3RvcmUvc2hhcmluZy9kYi9Db250YWN0cyc7XG5pbXBvcnQge05VTExfRlVOQ1RJT059IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvdXRpbC9GdW5jdGlvbnMnO1xuaW1wb3J0IHtFbWFpbEFkZHJlc3Nlc30gZnJvbSAnLi4vLi4vdXRpbC9FbWFpbEFkZHJlc3Nlcyc7XG5pbXBvcnQge1VzZXJSZWZ9IGZyb20gJy4uLy4uL2RhdGFzdG9yZS9zaGFyaW5nL3JwYy9Vc2VyUmVmcyc7XG5pbXBvcnQge0NvbnRhY3RPcHRpb25zfSBmcm9tICcuL0NvbnRhY3RPcHRpb25zJztcblxuLyoqXG4gKiBBbGxvdyB0aGUgdXNlciB0byBzZWxlY3QgZnJvbSBvbmUgb3IgbW9yZSBvZiB0aGVpciBjb250YWN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRhY3RzU2VsZWN0b3IgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vblBhc3RlID0gdGhpcy5vblBhc3RlLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uczogdGhpcy5wcm9wcy5zZWxlY3RlZE9wdGlvbnMgfHwgW11cbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG5cblxuICAgICAgICBjb25zdCBvcHRpb25zID0gWy4uLnRoaXMucHJvcHMub3B0aW9ucyB8fCBbXV07XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9ucyA9IFsuLi50aGlzLnN0YXRlLnNlbGVjdGVkT3B0aW9uc107XG5cbiAgICAgICAgcmV0dXJuIDxkaXYgb25QYXN0ZT17ZXZlbnQgPT4gdGhpcy5vblBhc3RlKGV2ZW50KX0+XG5cbiAgICAgICAgICAgIDxDcmVhdGFibGVTZWxlY3RcblxuICAgICAgICAgICAgICAgIGlzTXVsdGlcbiAgICAgICAgICAgICAgICBpc0NsZWFyYWJsZVxuICAgICAgICAgICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICAgICAgICAgIC8vIG9uS2V5RG93bj17ZXZlbnQgPT4gdGhpcy5vbktleURvd24oZXZlbnQpfVxuICAgICAgICAgICAgICAgIC8vIGNsYXNzTmFtZT1cImJhc2ljLW11bHRpLXNlbGVjdFwiXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lUHJlZml4PVwic2VsZWN0XCJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KHNlbGVjdGVkT3B0aW9ucykgPT4gdGhpcy5oYW5kbGVDaGFuZ2Uoc2VsZWN0ZWRPcHRpb25zIGFzIFJlYWRvbmx5QXJyYXk8Q29udGFjdE9wdGlvbj4pfVxuICAgICAgICAgICAgICAgIHZhbHVlPXtzZWxlY3RlZE9wdGlvbnN9XG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtzZWxlY3RlZE9wdGlvbnN9XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciBuYW1lcyBvciBlbWFpbCBhZGRyZXNzZXNcIlxuICAgICAgICAgICAgICAgIG9wdGlvbnM9e29wdGlvbnN9PlxuXG4gICAgICAgICAgICA8L0NyZWF0YWJsZVNlbGVjdD5cblxuICAgICAgICA8L2Rpdj47XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uUGFzdGUoZXZlbnQ6IFJlYWN0LkNsaXBib2FyZEV2ZW50PEhUTUxEaXZFbGVtZW50Pikge1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3QgdGV4dCA9IGV2ZW50LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dC9wbGFpbicpO1xuXG4gICAgICAgIGNvbnN0IGVtYWlsQWRkcmVzc2VzID0gRW1haWxBZGRyZXNzZXMucGFyc2VMaXN0KHRleHQpO1xuXG4gICAgICAgIGNvbnN0IG5ld0NvbnRhY3RzOiBDb250YWN0T3B0aW9uW10gPSBlbWFpbEFkZHJlc3Nlcy5tYXAoY3VycmVudCA9PiB7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGN1cnJlbnQuYWRkcmVzcyxcbiAgICAgICAgICAgICAgICBsYWJlbDogRW1haWxBZGRyZXNzZXMuZm9ybWF0KGN1cnJlbnQpXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uczogWy4uLnRoaXMuc3RhdGUuc2VsZWN0ZWRPcHRpb25zLCAuLi5uZXdDb250YWN0c11cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUNoYW5nZShzZWxlY3RlZE9wdGlvbnM6IFJlYWRvbmx5QXJyYXk8Q29udGFjdE9wdGlvbj4pIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Li4udGhpcy5zdGF0ZSwgc2VsZWN0ZWRPcHRpb25zfSk7XG5cbiAgICAgICAgY29uc3Qgb25DaGFuZ2UgPSB0aGlzLnByb3BzLm9uQ2hhbmdlIHx8IE5VTExfRlVOQ1RJT047XG5cbiAgICAgICAgb25DaGFuZ2UoQ29udGFjdE9wdGlvbnMudG9Vc2VyUmVmcyhzZWxlY3RlZE9wdGlvbnMpKTtcblxuICAgIH1cblxufVxuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICByZWFkb25seSBvcHRpb25zPzogUmVhZG9ubHlBcnJheTxDb250YWN0T3B0aW9uPjtcbiAgICByZWFkb25seSBzZWxlY3RlZE9wdGlvbnM/OiBSZWFkb25seUFycmF5PENvbnRhY3RPcHRpb24+O1xuICAgIHJlYWRvbmx5IG9uQ2hhbmdlPzogKGNvbnRhY3RTZWxlY3Rpb25zOiBSZWFkb25seUFycmF5PFVzZXJSZWY+KSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgICByZWFkb25seSBzZWxlY3RlZE9wdGlvbnM6IFJlYWRvbmx5QXJyYXk8Q29udGFjdE9wdGlvbj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGFjdE9wdGlvbiB7XG4gICAgcmVhZG9ubHkgdmFsdWU6IENvbnRhY3RJRFN0cjtcbiAgICByZWFkb25seSBsYWJlbDogc3RyaW5nO1xufVxuXG4iXX0=