"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Nav_1 = __importDefault(require("reactstrap/lib/Nav"));
const NavItem_1 = __importDefault(require("reactstrap/lib/NavItem"));
const NavLink_1 = __importDefault(require("reactstrap/lib/NavLink"));
const Button_1 = __importDefault(require("reactstrap/lib/Button"));
const TabButtonContextMenu_1 = require("./TabButtonContextMenu");
const TabPanes_1 = require("./TabPanes");
const TabStyles_1 = require("./TabStyles");
let tabSequence = 10000;
class TabNav extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.toggle = this.toggle.bind(this);
        this.addTab = this.addTab.bind(this);
        this.closeTab = this.closeTab.bind(this);
        this.closeOtherTabs = this.closeOtherTabs.bind(this);
        this.props.addTabBinder(tab => this.addTab(tab));
        const initialTabs = this.props.initialTabs || [];
        const tabs = initialTabs.map(current => {
            return Object.assign(Object.assign({}, current), { id: tabSequence++ });
        });
        this.state = {
            activeTab: 0,
            tabs
        };
    }
    render() {
        const NavTabs = () => {
            return React.createElement(Nav_1.default, { style: TabStyles_1.TabStyles.TAB_NAV, tabs: true }, this.state.tabs.map(tab => React.createElement(NavItem_1.default, { key: tab.id },
                React.createElement(NavLink_1.default, { className: "p-0 " + (tab.id === this.state.activeTab ? "active" : "") },
                    React.createElement("div", { style: { display: 'flex' }, className: tab.id === this.state.activeTab ? "border-bottom border-primary " : "" },
                        React.createElement(TabButtonContextMenu_1.TabButtonContextMenu, { onCloseOtherTabs: () => this.closeOtherTabs(tab.id), onClose: () => this.closeTab(tab.id) },
                            React.createElement("div", { className: "mt-auto mb-auto pt-1 pb-1 pl-2 pr-1", style: { userSelect: 'none' }, onClick: () => this.toggle(tab.id) }, tab.title)),
                        React.createElement("div", { className: "mt-auto mb-auto mr-1" },
                            React.createElement(Button_1.default, { color: "light", onClick: () => this.closeTab(tab.id), className: "text-muted p-1", style: { fontSize: '14px' } },
                                React.createElement("i", { className: "fas fa-times" }))))))));
        };
        return (React.createElement("div", { className: "tab-nav" },
            React.createElement(NavTabs, null),
            React.createElement(TabPanes_1.TabPanes, { tabs: this.state.tabs, activeTab: this.state.activeTab })));
    }
    addTab(tab) {
        const newTab = Object.assign(Object.assign({}, tab), { id: tabSequence++ });
        const activeTab = newTab.id;
        this.setState(Object.assign(Object.assign({}, this.state), { tabs: [...this.state.tabs, newTab], activeTab }));
    }
    closeTab(tab) {
        const tabs = this.state.tabs.filter(current => current.id !== tab);
        this.setState(Object.assign(Object.assign({}, this.state), { tabs }));
    }
    closeOtherTabs(tab) {
        const tabs = this.state.tabs.filter(current => current.id === tab);
        this.setState(Object.assign(Object.assign({}, this.state), { tabs, activeTab: tab }));
    }
    toggle(tab) {
        if (this.state.activeTab !== tab) {
            this.setState(Object.assign(Object.assign({}, this.state), { activeTab: tab }));
        }
    }
}
exports.TabNav = TabNav;
class ExternalContent {
    constructor(href) {
        this.href = href;
    }
}
//# sourceMappingURL=data:application/json;base64,