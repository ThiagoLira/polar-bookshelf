"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const Tooltip_1 = __importDefault(require("reactstrap/lib/Tooltip"));
const Optional_1 = require("polar-shared/src/util/ts/Optional");
class SimpleTooltipEx extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.id = 'tooltip-parent-' + Math.floor(1000000 * Math.random());
        this.state = {
            open: false
        };
        this.onMouseEnter = this.onMouseEnter.bind(this);
        this.onMouseLeave = this.onMouseLeave.bind(this);
        this.onMouseMove = this.onMouseMove.bind(this);
        this.deactivate = this.deactivate.bind(this);
        this.schedule = this.schedule.bind(this);
        this.trigger = this.trigger.bind(this);
        this.show = Optional_1.Optional.of(this.props.show).getOrElse(1000);
    }
    render() {
        const placement = this.props.placement || 'bottom';
        return (react_1.default.createElement("div", { className: "", onMouseEnter: () => this.onMouseEnter(), onMouseMove: () => this.onMouseMove(), onMouseLeave: () => this.onMouseLeave(), onMouseDown: () => this.deactivate(), onMouseUp: () => this.deactivate(), onClick: () => this.deactivate(), onContextMenu: () => this.deactivate() },
            react_1.default.createElement("div", { id: this.id }, this.props.children),
            react_1.default.createElement(Tooltip_1.default, { style: Object.assign({ maxWidth: '325px', textAlign: 'justify' }, this.props.style || {}), isOpen: this.state.open, className: "", placement: placement, delay: { show: 0, hide: 0 }, target: this.id }, this.props.text)));
    }
    onMouseEnter() {
        this.schedule();
    }
    onMouseMove() {
        if (this.show === 0) {
            return;
        }
        if (this.state.open) {
            this.setState({ open: false });
        }
        else {
            this.schedule();
        }
    }
    onMouseLeave() {
        this.deactivate();
    }
    deactivate() {
        if (this.timeout) {
            window.clearTimeout(this.timeout);
        }
        this.setState({ open: false });
    }
    schedule() {
        if (this.show === 0) {
            this.trigger();
            return;
        }
        if (this.timeout) {
            window.clearTimeout(this.timeout);
        }
        this.timeout = window.setTimeout(() => this.trigger(), this.show);
    }
    trigger() {
        if (this.props.disabled) {
            return;
        }
        this.setState({ open: true });
    }
}
exports.SimpleTooltipEx = SimpleTooltipEx;
//# sourceMappingURL=data:application/json;base64,