"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("polar-shared/src/logger/Logger");
const Optional_1 = require("polar-shared/src/util/ts/Optional");
const ID = 'polar-progress-bar';
const log = Logger_1.Logger.create();
class ProgressBar {
    update(val, autoDestroy = true) {
        if (!val || val < 0) {
            return;
        }
        ProgressBar.getProgressElement().map(progressElement => {
            if (progressElement instanceof HTMLProgressElement) {
                progressElement.value = val;
            }
            if (autoDestroy && val >= 100) {
                this.destroy();
            }
        });
    }
    destroy() {
        const progressElement = ProgressBar.getProgressElement().getOrUndefined();
        if (progressElement) {
            if (progressElement.parentElement !== null) {
                progressElement.parentElement.removeChild(progressElement);
            }
            else {
                log.warn("No parent element for progress bar.");
            }
        }
        else {
        }
    }
    static getProgressElement() {
        const element = document.getElementById(ID);
        return Optional_1.Optional.of(element);
    }
    static create(indeterminate = true) {
        const current = this.getProgressElement();
        if (current.isPresent()) {
            return new ProgressBar();
        }
        let element;
        if (indeterminate) {
            element = document.createElement('div');
            element.setAttribute('class', 'progress-indeterminate-slider');
            element.innerHTML = `
                <div class="progress-indeterminate-line"></div>
                <div class="progress-indeterminate-subline progress-indeterminate-inc"></div>
                <div class="progress-indeterminate-subline progress-indeterminate-dec"></div>
            `;
        }
        else {
            element = document.createElement('progress');
        }
        if (!indeterminate && element instanceof HTMLProgressElement) {
            element.value = 0;
            element.max = 100;
        }
        element.id = ID;
        element.style.height = '4px';
        element.style.width = `100%`;
        element.style.position = 'fixed';
        element.style.top = '0';
        element.style.left = '0';
        element.style.zIndex = '99999999999';
        element.style.borderTop = '0';
        element.style.borderLeft = '0';
        element.style.borderRight = '0';
        element.style.borderBottom = '0';
        document.body.appendChild(element);
        return new ProgressBar();
    }
}
exports.ProgressBar = ProgressBar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvZ3Jlc3NCYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQcm9ncmVzc0Jhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUFzRDtBQUN0RCxnRUFBMkQ7QUFFM0QsTUFBTSxFQUFFLEdBQUcsb0JBQW9CLENBQUM7QUFFaEMsTUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBTzVCLE1BQWEsV0FBVztJQUViLE1BQU0sQ0FBQyxHQUFXLEVBQUUsY0FBdUIsSUFBSTtRQUVsRCxJQUFJLENBQUUsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDbEIsT0FBTztTQUNWO1FBT0QsV0FBVyxDQUFDLGtCQUFrQixFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUFFO1lBRW5ELElBQUksZUFBZSxZQUFZLG1CQUFtQixFQUFFO2dCQUNoRCxlQUFlLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQzthQUMvQjtZQUVELElBQUksV0FBVyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUU7Z0JBQzNCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUNsQjtRQUVMLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUVNLE9BQU87UUFFVixNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUUxRSxJQUFJLGVBQWUsRUFBRTtZQUVqQixJQUFJLGVBQWUsQ0FBQyxhQUFhLEtBQUssSUFBSSxFQUFFO2dCQUN4QyxlQUFlLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUM5RDtpQkFBTTtnQkFDSCxHQUFHLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxDQUFDLENBQUM7YUFDbkQ7U0FFSjthQUFNO1NBRU47SUFFTCxDQUFDO0lBRU8sTUFBTSxDQUFDLGtCQUFrQjtRQUM3QixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sbUJBQVEsQ0FBQyxFQUFFLENBQXVCLE9BQU8sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUF5QixJQUFJO1FBRTlDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBRTFDLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxXQUFXLEVBQUUsQ0FBQztTQUM1QjtRQUVELElBQUksT0FBb0IsQ0FBQztRQU16QixJQUFJLGFBQWEsRUFBRTtZQUVmLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXhDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLCtCQUErQixDQUFDLENBQUM7WUFFL0QsT0FBTyxDQUFDLFNBQVMsR0FBRzs7OzthQUluQixDQUFDO1NBRUw7YUFBTTtZQUNILE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsSUFBSSxDQUFFLGFBQWEsSUFBSSxPQUFPLFlBQVksbUJBQW1CLEVBQUU7WUFFM0QsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDbEIsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7U0FDckI7UUFFRCxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUVoQixPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFFN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1FBSTdCLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUNqQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDeEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQztRQUNyQyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFDOUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7UUFJakMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkMsT0FBTyxJQUFJLFdBQVcsRUFBRSxDQUFDO0lBRTdCLENBQUM7Q0FFSjtBQS9HRCxrQ0ErR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xvZ2dlcn0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9sb2dnZXIvTG9nZ2VyJztcbmltcG9ydCB7T3B0aW9uYWx9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvdXRpbC90cy9PcHRpb25hbCc7XG5cbmNvbnN0IElEID0gJ3BvbGFyLXByb2dyZXNzLWJhcic7XG5cbmNvbnN0IGxvZyA9IExvZ2dlci5jcmVhdGUoKTtcblxuLyoqXG4gKiBTaW1wbGUgcHJvZ3Jlc3MgYmFyIHRoYXQgd2UgY2FuIGRpc3BsYXkgYXQgYW55IHRpbWUgb24gYSBwYWdlIHdpdGhvdXRcbiAqIGNvbXBsaWNhdGVkIHJlbmRlcmluZyBpc3N1ZXMgb3IgcmVxdWlyaW5nIFJlYWN0IHRvIGJlIHVzZWQuICBUaGlzIGFsbG93c1xuICogdXMgdG8gZWFzaWx5IHNob3cgYSBHVUkgZm9yIGEgZG93bmxvYWQgYXQgYW55IHBvaW50IGluIHRpbWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9ncmVzc0JhciB7XG5cbiAgICBwdWJsaWMgdXBkYXRlKHZhbDogbnVtYmVyLCBhdXRvRGVzdHJveTogYm9vbGVhbiA9IHRydWUpIHtcblxuICAgICAgICBpZiAoISB2YWwgfHwgdmFsIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRklYTUU6IHRoZXJlIGlzIG5vdyBhIGJ1ZyBoZXJlIHdoZXJlIGlmIHRoZSBQcm9ncmVzc0JhciBpc1xuICAgICAgICAvLyBhdXRvLWRlc3Ryb3llZCBlYXJseSwgYW55IGxhZ2dpbmcgcHJvZ3Jlc3MgYmFyIHZhbHVlcyB3b24ndCBnZXRcbiAgICAgICAgLy8gY3JlYXRlZC4uLiB3ZSBuZWVkIHRoZSBhYmlsaXR5IHRvIGF1dG8tY3JlYXRlIGlmIHRoZSB2YWx1ZSBpc1xuICAgICAgICAvLyBpbiB0aGUgaW50ZXJ2YWwgWzAsMTAwKSBidXQgZGVzdHJveSBpdCBpZiB0aGUgdmFsdWUgaXMgMTAwLlxuXG4gICAgICAgIFByb2dyZXNzQmFyLmdldFByb2dyZXNzRWxlbWVudCgpLm1hcChwcm9ncmVzc0VsZW1lbnQgPT4ge1xuXG4gICAgICAgICAgICBpZiAocHJvZ3Jlc3NFbGVtZW50IGluc3RhbmNlb2YgSFRNTFByb2dyZXNzRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHByb2dyZXNzRWxlbWVudC52YWx1ZSA9IHZhbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGF1dG9EZXN0cm95ICYmIHZhbCA+PSAxMDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBkZXN0cm95KCkge1xuXG4gICAgICAgIGNvbnN0IHByb2dyZXNzRWxlbWVudCA9IFByb2dyZXNzQmFyLmdldFByb2dyZXNzRWxlbWVudCgpLmdldE9yVW5kZWZpbmVkKCk7XG5cbiAgICAgICAgaWYgKHByb2dyZXNzRWxlbWVudCkge1xuXG4gICAgICAgICAgICBpZiAocHJvZ3Jlc3NFbGVtZW50LnBhcmVudEVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0VsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChwcm9ncmVzc0VsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2cud2FybihcIk5vIHBhcmVudCBlbGVtZW50IGZvciBwcm9ncmVzcyBiYXIuXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBsb2cud2FybihcIk5vIHByb2dyZXNzIGJhciB0byBkZXN0cm95LlwiKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0UHJvZ3Jlc3NFbGVtZW50KCk6IE9wdGlvbmFsPEhUTUxQcm9ncmVzc0VsZW1lbnQ+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKElEKTtcbiAgICAgICAgcmV0dXJuIE9wdGlvbmFsLm9mKDxIVE1MUHJvZ3Jlc3NFbGVtZW50PiBlbGVtZW50KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShpbmRldGVybWluYXRlOiBib29sZWFuID0gdHJ1ZSk6IFByb2dyZXNzQmFyIHtcblxuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5nZXRQcm9ncmVzc0VsZW1lbnQoKTtcblxuICAgICAgICBpZiAoY3VycmVudC5pc1ByZXNlbnQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9ncmVzc0JhcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gICAgICAgIC8vIFRPRE86IHRlY2huaWNhbGx5IHRoZXJlJ3MgYSBidWcgaWYgd2UgdXNlZCBpbmRldGVybWluYXRlIGFuZFxuICAgICAgICAvLyBkZXRlcm1pbmF0ZSBwcm9ncmVzcyBiYXJzIGJ1dCB3ZSBkb24ndCB1c2UgdGhlbSBvdmVybGFwcGluZyBpblxuICAgICAgICAvLyB0aGUgc2FtZSBhcHAgcmlnaHQgbm93LlxuXG4gICAgICAgIGlmIChpbmRldGVybWluYXRlKSB7XG5cbiAgICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3Byb2dyZXNzLWluZGV0ZXJtaW5hdGUtc2xpZGVyJyk7XG5cbiAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1pbmRldGVybWluYXRlLWxpbmVcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtaW5kZXRlcm1pbmF0ZS1zdWJsaW5lIHByb2dyZXNzLWluZGV0ZXJtaW5hdGUtaW5jXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2dyZXNzLWluZGV0ZXJtaW5hdGUtc3VibGluZSBwcm9ncmVzcy1pbmRldGVybWluYXRlLWRlY1wiPjwvZGl2PlxuICAgICAgICAgICAgYDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Byb2dyZXNzJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISBpbmRldGVybWluYXRlICYmIGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MUHJvZ3Jlc3NFbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBzZXQgdGhlIGRlZmF1bHRzXG4gICAgICAgICAgICBlbGVtZW50LnZhbHVlID0gMDtcbiAgICAgICAgICAgIGVsZW1lbnQubWF4ID0gMTAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5pZCA9IElEO1xuXG4gICAgICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzRweCc7XG5cbiAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IGAxMDAlYDtcblxuICAgICAgICAvLy8gcHJvZ3Jlc3Muc3R5bGUuYmFja2dyb3VuZENvbG9yPScjODlBREZEJztcbiAgICAgICAgLy8gcHJvZ3Jlc3Muc3R5bGUuY29sb3I9JyM4OUFERkQnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSAnMCc7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgICAgZWxlbWVudC5zdHlsZS56SW5kZXggPSAnOTk5OTk5OTk5OTknO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmJvcmRlclRvcCA9ICcwJztcbiAgICAgICAgZWxlbWVudC5zdHlsZS5ib3JkZXJMZWZ0ID0gJzAnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmJvcmRlclJpZ2h0ID0gJzAnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmJvcmRlckJvdHRvbSA9ICcwJztcbiAgICAgICAgLy8gZWxlbWVudC5zdHlsZS53ZWJraXRBcHBlYXJhbmNlID0gJ25vbmUnO1xuICAgICAgICAvLyBlbGVtZW50LnN0eWxlLmJvcmRlclJhZGl1cyA9ICcwJztcblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvZ3Jlc3NCYXIoKTtcblxuICAgIH1cblxufVxuXG4iXX0=