"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const AnnotationHighlightButton_1 = require("./AnnotationHighlightButton");
const Styles = {
    bar: {
        backgroundColor: '#333333',
        width: '200px'
    }
};
class ControlledAnnotationBar extends React.Component {
    constructor(props) {
        super(props);
        this.dispatchOnHighlighted = this.dispatchOnHighlighted.bind(this);
        this.state = {};
    }
    render() {
        return (React.createElement("div", null,
            React.createElement("div", { className: "rounded p-1 annotationbar text-center", style: Styles.bar },
                React.createElement(AnnotationHighlightButton_1.AnnotationHighlightButton, { dispatchColor: 'yellow', styleColor: 'rgba(255,255,0)', onHighlightedColor: color => this.dispatchOnHighlighted(color) }),
                React.createElement(AnnotationHighlightButton_1.AnnotationHighlightButton, { dispatchColor: 'red', styleColor: 'rgba(255,0,0)', onHighlightedColor: color => this.dispatchOnHighlighted(color) }),
                React.createElement(AnnotationHighlightButton_1.AnnotationHighlightButton, { dispatchColor: 'green', styleColor: 'rgba(0,255,0)', onHighlightedColor: color => this.dispatchOnHighlighted(color) }),
                React.createElement(AnnotationHighlightButton_1.AnnotationHighlightButton, { dispatchColor: '#9900EF', styleColor: '#9900EF', onHighlightedColor: color => this.dispatchOnHighlighted(color) }),
                React.createElement(AnnotationHighlightButton_1.AnnotationHighlightButton, { dispatchColor: '#FF6900', styleColor: '#FF6900', onHighlightedColor: color => this.dispatchOnHighlighted(color) }))));
    }
    dispatchOnHighlighted(highlightColor) {
        const highlightCreatedEvent = {
            activeSelection: this.props.activeSelection,
            highlightColor,
            pageNum: this.props.pageNum,
            annotationDescriptor: this.props.annotationDescriptor
        };
        this.props.onHighlighted(highlightCreatedEvent);
    }
}
exports.ControlledAnnotationBar = ControlledAnnotationBar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJvbGxlZEFubm90YXRpb25CYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDb250cm9sbGVkQW5ub3RhdGlvbkJhci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsNkNBQStCO0FBSy9CLDJFQUFzRTtBQUd0RSxNQUFNLE1BQU0sR0FBYztJQUV0QixHQUFHLEVBQUU7UUFDRCxlQUFlLEVBQUUsU0FBUztRQUMxQixLQUFLLEVBQUUsT0FBTztLQUNqQjtDQUVKLENBQUM7QUFLRixNQUFhLHVCQUF3QixTQUFRLEtBQUssQ0FBQyxTQUF5QjtJQUV4RSxZQUFZLEtBQVU7UUFDbEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbkUsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7SUFFcEIsQ0FBQztJQUVNLE1BQU07UUFDVCxPQUFPLENBQ0g7WUFFSSw2QkFBSyxTQUFTLEVBQUMsdUNBQXVDLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHO2dCQUVwRSxvQkFBQyxxREFBeUIsSUFBQyxhQUFhLEVBQUMsUUFBUSxFQUN0QixVQUFVLEVBQUMsaUJBQWlCLEVBQzVCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxHQUFHO2dCQUU1RixvQkFBQyxxREFBeUIsSUFBQyxhQUFhLEVBQUMsS0FBSyxFQUNuQixVQUFVLEVBQUMsZUFBZSxFQUMxQixrQkFBa0IsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsR0FBRztnQkFFNUYsb0JBQUMscURBQXlCLElBQUMsYUFBYSxFQUFDLE9BQU8sRUFDckIsVUFBVSxFQUFDLGVBQWUsRUFDMUIsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLEdBQUc7Z0JBRTVGLG9CQUFDLHFEQUF5QixJQUFDLGFBQWEsRUFBQyxTQUFTLEVBQ3ZCLFVBQVUsRUFBQyxTQUFTLEVBQ3BCLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxHQUFHO2dCQUU1RixvQkFBQyxxREFBeUIsSUFBQyxhQUFhLEVBQUMsU0FBUyxFQUN2QixVQUFVLEVBQUMsU0FBUyxFQUNwQixrQkFBa0IsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUUxRixDQUVKLENBQ1QsQ0FBQztJQUVOLENBQUM7SUFFTyxxQkFBcUIsQ0FBQyxjQUE4QjtRQUV4RCxNQUFNLHFCQUFxQixHQUEwQjtZQUNqRCxlQUFlLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlO1lBQzNDLGNBQWM7WUFDZCxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPO1lBQzNCLG9CQUFvQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsb0JBQW9CO1NBQ3hELENBQUM7UUFFRixJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBRXBELENBQUM7Q0FFSjtBQXpERCwwREF5REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0FjdGl2ZVNlbGVjdGlvbn0gZnJvbSAnLi4vcG9wdXAvQWN0aXZlU2VsZWN0aW9ucyc7XG5pbXBvcnQge0Fubm90YXRpb25EZXNjcmlwdG9yfSBmcm9tICcuLi8uLi9tZXRhZGF0YS9Bbm5vdGF0aW9uRGVzY3JpcHRvcic7XG5pbXBvcnQge0hpZ2hsaWdodENyZWF0ZWRFdmVudH0gZnJvbSAnLi4vLi4vY29tbWVudHMvcmVhY3QvSGlnaGxpZ2h0Q3JlYXRlZEV2ZW50JztcbmltcG9ydCB7SGlnaGxpZ2h0Q29sb3J9IGZyb20gXCJwb2xhci1zaGFyZWQvc3JjL21ldGFkYXRhL0lCYXNlSGlnaGxpZ2h0XCI7XG5pbXBvcnQge0Fubm90YXRpb25IaWdobGlnaHRCdXR0b259IGZyb20gXCIuL0Fubm90YXRpb25IaWdobGlnaHRCdXR0b25cIjtcbmltcG9ydCB7SVN0eWxlTWFwfSBmcm9tIFwiLi4vLi4vcmVhY3QvSVN0eWxlTWFwXCI7XG5cbmNvbnN0IFN0eWxlczogSVN0eWxlTWFwID0ge1xuXG4gICAgYmFyOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMzMzMzMzMnLFxuICAgICAgICB3aWR0aDogJzIwMHB4J1xuICAgIH1cblxufTtcblxuLyoqXG4gKiBBbiBhbm5vdGF0aW9uIGJhciB0aGF0IGlzIHBsYWNlZCBleGFjdGx5LlxuICovXG5leHBvcnQgY2xhc3MgQ29udHJvbGxlZEFubm90YXRpb25CYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hPbkhpZ2hsaWdodGVkID0gdGhpcy5kaXNwYXRjaE9uSGlnaGxpZ2h0ZWQuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge307XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm91bmRlZCBwLTEgYW5ub3RhdGlvbmJhciB0ZXh0LWNlbnRlclwiIHN0eWxlPXtTdHlsZXMuYmFyfT5cblxuICAgICAgICAgICAgICAgICAgICA8QW5ub3RhdGlvbkhpZ2hsaWdodEJ1dHRvbiBkaXNwYXRjaENvbG9yPSd5ZWxsb3cnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlQ29sb3I9J3JnYmEoMjU1LDI1NSwwKSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25IaWdobGlnaHRlZENvbG9yPXtjb2xvciA9PiB0aGlzLmRpc3BhdGNoT25IaWdobGlnaHRlZChjb2xvcil9Lz5cblxuICAgICAgICAgICAgICAgICAgICA8QW5ub3RhdGlvbkhpZ2hsaWdodEJ1dHRvbiBkaXNwYXRjaENvbG9yPSdyZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlQ29sb3I9J3JnYmEoMjU1LDAsMCknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uSGlnaGxpZ2h0ZWRDb2xvcj17Y29sb3IgPT4gdGhpcy5kaXNwYXRjaE9uSGlnaGxpZ2h0ZWQoY29sb3IpfS8+XG5cbiAgICAgICAgICAgICAgICAgICAgPEFubm90YXRpb25IaWdobGlnaHRCdXR0b24gZGlzcGF0Y2hDb2xvcj0nZ3JlZW4nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlQ29sb3I9J3JnYmEoMCwyNTUsMCknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uSGlnaGxpZ2h0ZWRDb2xvcj17Y29sb3IgPT4gdGhpcy5kaXNwYXRjaE9uSGlnaGxpZ2h0ZWQoY29sb3IpfS8+XG5cbiAgICAgICAgICAgICAgICAgICAgPEFubm90YXRpb25IaWdobGlnaHRCdXR0b24gZGlzcGF0Y2hDb2xvcj0nIzk5MDBFRidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVDb2xvcj0nIzk5MDBFRidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25IaWdobGlnaHRlZENvbG9yPXtjb2xvciA9PiB0aGlzLmRpc3BhdGNoT25IaWdobGlnaHRlZChjb2xvcil9Lz5cblxuICAgICAgICAgICAgICAgICAgICA8QW5ub3RhdGlvbkhpZ2hsaWdodEJ1dHRvbiBkaXNwYXRjaENvbG9yPScjRkY2OTAwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZUNvbG9yPScjRkY2OTAwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkhpZ2hsaWdodGVkQ29sb3I9e2NvbG9yID0+IHRoaXMuZGlzcGF0Y2hPbkhpZ2hsaWdodGVkKGNvbG9yKX0vPlxuXG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkaXNwYXRjaE9uSGlnaGxpZ2h0ZWQoaGlnaGxpZ2h0Q29sb3I6IEhpZ2hsaWdodENvbG9yKSB7XG5cbiAgICAgICAgY29uc3QgaGlnaGxpZ2h0Q3JlYXRlZEV2ZW50OiBIaWdobGlnaHRDcmVhdGVkRXZlbnQgPSB7XG4gICAgICAgICAgICBhY3RpdmVTZWxlY3Rpb246IHRoaXMucHJvcHMuYWN0aXZlU2VsZWN0aW9uLFxuICAgICAgICAgICAgaGlnaGxpZ2h0Q29sb3IsXG4gICAgICAgICAgICBwYWdlTnVtOiB0aGlzLnByb3BzLnBhZ2VOdW0sXG4gICAgICAgICAgICBhbm5vdGF0aW9uRGVzY3JpcHRvcjogdGhpcy5wcm9wcy5hbm5vdGF0aW9uRGVzY3JpcHRvclxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucHJvcHMub25IaWdobGlnaHRlZChoaWdobGlnaHRDcmVhdGVkRXZlbnQpO1xuXG4gICAgfVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb3BzIGV4dGVuZHMgQW5ub3RhdGlvbkJhckNhbGxiYWNrcyB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgQWN0aXZlU2VsZWN0aW9uIGluIHRoZSBicm93c2VyIHRoYXQncyBiZWluZyBzZWxlY3RlZCBieSB0aGUgdXNlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBhY3RpdmVTZWxlY3Rpb246IEFjdGl2ZVNlbGVjdGlvbjtcblxuICAgIHJlYWRvbmx5IHR5cGU6IEFubm90YXRpb25CYXJUYXJnZXRUeXBlO1xuXG4gICAgcmVhZG9ubHkgcGFnZU51bTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgYW5ub3RhdGlvbkRlc2NyaXB0b3IgaWYgdGhpcyBpcyBhbiBleGlzdGluZyBhbm5vdGF0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFubm90YXRpb25EZXNjcmlwdG9yPzogQW5ub3RhdGlvbkRlc2NyaXB0b3I7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU3RhdGUge1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFubm90YXRpb25CYXJDYWxsYmFja3Mge1xuICAgIC8vIGNhbGxlZCB3aGVuIHRoZSBjb21tZW50IGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgIG9uSGlnaGxpZ2h0ZWQ6IE9uSGlnaGxpZ2h0ZWRDYWxsYmFjaztcbn1cblxuZXhwb3J0IHR5cGUgT25IaWdobGlnaHRlZENhbGxiYWNrXG4gICAgPSAoaGlnaGxpZ2h0Q3JlYXRlZEV2ZW50OiBIaWdobGlnaHRDcmVhdGVkRXZlbnQpID0+IHZvaWQ7XG5cbi8qKlxuICogVGhlIHR5cGUgb2YgdGhlIHNlbGVjdGlvbi4gIEEgJ3JhbmdlJyBpcyBqdXN0IGEgdXNlciBoaWdobGlnaHQuICBPdGhlcndpc2VcbiAqIGl0J3MgZWl0aGVyIGEgcHJldmlvdXNseSBjcmVhdGVkICd0ZXh0LWhpZ2hsaWdodCcgb3IgJ2FyZWEtaGlnaGxpZ2h0XG4gKi9cbmV4cG9ydCB0eXBlIEFubm90YXRpb25CYXJUYXJnZXRUeXBlID0gJ3JhbmdlJyB8ICd0ZXh0LWhpZ2hsaWdodCcgfCAnYXJlYS1oaWdobGlnaHQnO1xuIl19