"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("polar-shared/src/logger/Logger");
const DefaultPersistenceLayer_1 = require("../DefaultPersistenceLayer");
const FirebaseDatastore_1 = require("../FirebaseDatastore");
const AbstractAdvertisingPersistenceLayer_1 = require("../advertiser/AbstractAdvertisingPersistenceLayer");
const Firebase_1 = require("../../firebase/Firebase");
const SharingDatastores_1 = require("../SharingDatastores");
const TracedDatastore_1 = require("../TracedDatastore");
const DataFileCacheDatastore_1 = require("../DataFileCacheDatastore");
const log = Logger_1.Logger.create();
class WebPersistenceLayerFactory {
    static create() {
        const toDatastore = () => {
            if (SharingDatastores_1.SharingDatastores.isSupported()) {
                return SharingDatastores_1.SharingDatastores.create();
            }
            else {
                Firebase_1.Firebase.init();
                const firebaseDatastore = new FirebaseDatastore_1.FirebaseDatastore();
                const dataFileCacheDatastore = new DataFileCacheDatastore_1.DataFileCacheDatastore(firebaseDatastore);
                const tracedDatastore = new TracedDatastore_1.TracedDatastore(dataFileCacheDatastore, 'traced-firebase');
                return tracedDatastore;
            }
        };
        const datastore = toDatastore();
        log.info("Using datastore: " + datastore.id);
        return new NullListenablePersistenceLayer(new DefaultPersistenceLayer_1.DefaultPersistenceLayer(datastore));
    }
}
exports.WebPersistenceLayerFactory = WebPersistenceLayerFactory;
class NullListenablePersistenceLayer extends AbstractAdvertisingPersistenceLayer_1.AbstractAdvertisingPersistenceLayer {
    constructor(delegate) {
        super(delegate);
        this.id = 'null';
    }
    broadcastEvent(event) {
    }
}
exports.NullListenablePersistenceLayer = NullListenablePersistenceLayer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViUGVyc2lzdGVuY2VMYXllckZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJXZWJQZXJzaXN0ZW5jZUxheWVyRmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUFzRDtBQUV0RCx3RUFBbUU7QUFDbkUsNERBQXVEO0FBQ3ZELDJHQUFzRztBQUd0RyxzREFBaUQ7QUFDakQsNERBQXVEO0FBQ3ZELHdEQUFtRDtBQUNuRCxzRUFBaUU7QUFFakUsTUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRTVCLE1BQWEsMEJBQTBCO0lBRTVCLE1BQU0sQ0FBQyxNQUFNO1FBRWhCLE1BQU0sV0FBVyxHQUFHLEdBQUcsRUFBRTtZQUVyQixJQUFJLHFDQUFpQixDQUFDLFdBQVcsRUFBRSxFQUFFO2dCQUNqQyxPQUFPLHFDQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ3JDO2lCQUFNO2dCQUNILG1CQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBRWhCLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxxQ0FBaUIsRUFBRSxDQUFDO2dCQUNsRCxNQUFNLHNCQUFzQixHQUFHLElBQUksK0NBQXNCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQkFDN0UsTUFBTSxlQUFlLEdBQUcsSUFBSSxpQ0FBZSxDQUFDLHNCQUFzQixFQUFFLGlCQUFpQixDQUFDLENBQUM7Z0JBQ3ZGLE9BQU8sZUFBZSxDQUFDO2FBRTFCO1FBRUwsQ0FBQyxDQUFDO1FBRUYsTUFBTSxTQUFTLEdBQUcsV0FBVyxFQUFFLENBQUM7UUFFaEMsR0FBRyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFN0MsT0FBTyxJQUFJLDhCQUE4QixDQUFDLElBQUksaURBQXVCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUV0RixDQUFDO0NBRUo7QUE1QkQsZ0VBNEJDO0FBRUQsTUFBYSw4QkFBK0IsU0FBUSx5RUFBbUM7SUFJbkYsWUFBWSxRQUEwQjtRQUNsQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFISixPQUFFLEdBQXVCLE1BQU0sQ0FBQztJQUloRCxDQUFDO0lBRVMsY0FBYyxDQUFDLEtBQTRCO0lBQ3JELENBQUM7Q0FFSjtBQVhELHdFQVdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtMb2dnZXJ9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvbG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQge0xpc3RlbmFibGVQZXJzaXN0ZW5jZUxheWVyfSBmcm9tICcuLi9MaXN0ZW5hYmxlUGVyc2lzdGVuY2VMYXllcic7XG5pbXBvcnQge0RlZmF1bHRQZXJzaXN0ZW5jZUxheWVyfSBmcm9tICcuLi9EZWZhdWx0UGVyc2lzdGVuY2VMYXllcic7XG5pbXBvcnQge0ZpcmViYXNlRGF0YXN0b3JlfSBmcm9tICcuLi9GaXJlYmFzZURhdGFzdG9yZSc7XG5pbXBvcnQge0Fic3RyYWN0QWR2ZXJ0aXNpbmdQZXJzaXN0ZW5jZUxheWVyfSBmcm9tICcuLi9hZHZlcnRpc2VyL0Fic3RyYWN0QWR2ZXJ0aXNpbmdQZXJzaXN0ZW5jZUxheWVyJztcbmltcG9ydCB7UGVyc2lzdGVuY2VMYXllciwgUGVyc2lzdGVuY2VMYXllcklEfSBmcm9tICcuLi9QZXJzaXN0ZW5jZUxheWVyJztcbmltcG9ydCB7UGVyc2lzdGVuY2VMYXllckV2ZW50fSBmcm9tICcuLi9QZXJzaXN0ZW5jZUxheWVyRXZlbnQnO1xuaW1wb3J0IHtGaXJlYmFzZX0gZnJvbSAnLi4vLi4vZmlyZWJhc2UvRmlyZWJhc2UnO1xuaW1wb3J0IHtTaGFyaW5nRGF0YXN0b3Jlc30gZnJvbSAnLi4vU2hhcmluZ0RhdGFzdG9yZXMnO1xuaW1wb3J0IHtUcmFjZWREYXRhc3RvcmV9IGZyb20gJy4uL1RyYWNlZERhdGFzdG9yZSc7XG5pbXBvcnQge0RhdGFGaWxlQ2FjaGVEYXRhc3RvcmV9IGZyb20gJy4uL0RhdGFGaWxlQ2FjaGVEYXRhc3RvcmUnO1xuXG5jb25zdCBsb2cgPSBMb2dnZXIuY3JlYXRlKCk7XG5cbmV4cG9ydCBjbGFzcyBXZWJQZXJzaXN0ZW5jZUxheWVyRmFjdG9yeSB7XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOiBMaXN0ZW5hYmxlUGVyc2lzdGVuY2VMYXllciB7XG5cbiAgICAgICAgY29uc3QgdG9EYXRhc3RvcmUgPSAoKSA9PiB7XG5cbiAgICAgICAgICAgIGlmIChTaGFyaW5nRGF0YXN0b3Jlcy5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNoYXJpbmdEYXRhc3RvcmVzLmNyZWF0ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBGaXJlYmFzZS5pbml0KCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBmaXJlYmFzZURhdGFzdG9yZSA9IG5ldyBGaXJlYmFzZURhdGFzdG9yZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFGaWxlQ2FjaGVEYXRhc3RvcmUgPSBuZXcgRGF0YUZpbGVDYWNoZURhdGFzdG9yZShmaXJlYmFzZURhdGFzdG9yZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2VkRGF0YXN0b3JlID0gbmV3IFRyYWNlZERhdGFzdG9yZShkYXRhRmlsZUNhY2hlRGF0YXN0b3JlLCAndHJhY2VkLWZpcmViYXNlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNlZERhdGFzdG9yZTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZGF0YXN0b3JlID0gdG9EYXRhc3RvcmUoKTtcblxuICAgICAgICBsb2cuaW5mbyhcIlVzaW5nIGRhdGFzdG9yZTogXCIgKyBkYXRhc3RvcmUuaWQpO1xuXG4gICAgICAgIHJldHVybiBuZXcgTnVsbExpc3RlbmFibGVQZXJzaXN0ZW5jZUxheWVyKG5ldyBEZWZhdWx0UGVyc2lzdGVuY2VMYXllcihkYXRhc3RvcmUpKTtcblxuICAgIH1cblxufVxuXG5leHBvcnQgY2xhc3MgTnVsbExpc3RlbmFibGVQZXJzaXN0ZW5jZUxheWVyIGV4dGVuZHMgQWJzdHJhY3RBZHZlcnRpc2luZ1BlcnNpc3RlbmNlTGF5ZXIge1xuXG4gICAgcHVibGljIHJlYWRvbmx5IGlkOiBQZXJzaXN0ZW5jZUxheWVySUQgPSAnbnVsbCc7XG5cbiAgICBjb25zdHJ1Y3RvcihkZWxlZ2F0ZTogUGVyc2lzdGVuY2VMYXllcikge1xuICAgICAgICBzdXBlcihkZWxlZ2F0ZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGJyb2FkY2FzdEV2ZW50KGV2ZW50OiBQZXJzaXN0ZW5jZUxheWVyRXZlbnQpOiB2b2lkIHtcbiAgICB9XG5cbn1cblxuXG4iXX0=