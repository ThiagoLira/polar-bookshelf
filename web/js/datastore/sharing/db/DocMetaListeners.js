"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const UserGroups_1 = require("./UserGroups");
const GroupDocs_1 = require("./GroupDocs");
const SetArrays_1 = require("polar-shared/src/util/SetArrays");
const Collections_1 = require("./Collections");
const DocMetas_1 = require("../../../metadata/DocMetas");
const Optional_1 = require("polar-shared/src/util/ts/Optional");
const Proxies_1 = require("../../../proxies/Proxies");
const ProfileOwners_1 = require("./ProfileOwners");
const Author_1 = require("../../../metadata/Author");
const Logger_1 = require("polar-shared/src/logger/Logger");
const UserProfiles_1 = require("./UserProfiles");
const FirebaseDatastores_1 = require("../../FirebaseDatastores");
const Dictionaries_1 = require("polar-shared/src/util/Dictionaries");
const log = Logger_1.Logger.create();
class DocMetaListener {
    constructor(fingerprint, profileID, docMetaHandler, errHandler) {
        this.fingerprint = fingerprint;
        this.profileID = profileID;
        this.docMetaHandler = docMetaHandler;
        this.errHandler = errHandler;
        this.docMetaIndex = {};
        this.groupDocMonitors = new Set();
        this.monitoredGroups = new Set();
    }
    start() {
        console.log("Starting DocMetaListener.");
        const handleUserGroups = () => __awaiter(this, void 0, void 0, function* () {
            const userProfile = yield UserProfiles_1.UserProfiles.currentUserProfile();
            console.log("Using userProfile: ", userProfile);
            yield UserGroups_1.UserGroups.onSnapshot(userGroup => this.onSnapshotForUserGroup(userGroup));
        });
        handleUserGroups()
            .catch(err => this.errHandler(err));
    }
    onSnapshotForUserGroup(userGroup) {
        if (!userGroup) {
            return;
        }
        if (!userGroup.groups) {
            log.warn("No user groups on object: ", userGroup);
            return;
        }
        for (const groupID of userGroup.groups) {
            if (this.monitoredGroups.has(groupID)) {
                continue;
            }
            this.monitoredGroups.add(groupID);
            this.handleGroup(groupID)
                .catch(err => this.errHandler(err));
        }
    }
    handleGroup(groupID) {
        return __awaiter(this, void 0, void 0, function* () {
            yield GroupDocs_1.GroupDocs.onSnapshotForByGroupIDAndFingerprint(groupID, this.fingerprint, groupDocs => this.onSnapshotForGroupDocs(groupDocs));
        });
    }
    onSnapshotForGroupDocs(groupDocChanges) {
        for (const groupDocChange of groupDocChanges) {
            this.handleGroupDoc(groupDocChange)
                .catch(err => this.errHandler(err));
        }
    }
    handleGroupDoc(groupDocChange) {
        return __awaiter(this, void 0, void 0, function* () {
            if (groupDocChange.type === 'removed') {
                return;
            }
            const groupDoc = groupDocChange.value;
            const { docID, profileID } = groupDoc;
            if (profileID === this.profileID) {
                return;
            }
            if (!this.groupDocMonitors.has(docID)) {
                yield DocMetaRecords.onSnapshot(docID, docMetaRecord => this.onSnapshotForDocMetaRecord(groupDoc, docMetaRecord));
                this.groupDocMonitors.add(docID);
            }
        });
    }
    onSnapshotForDocMetaRecord(groupDoc, docMetaRecord) {
        this.handleDocMetaRecord(groupDoc, docMetaRecord)
            .catch(err => this.errHandler(err));
    }
    handleDocMetaRecord(groupDoc, docMetaRecord) {
        return __awaiter(this, void 0, void 0, function* () {
            const primaryDocID = FirebaseDatastores_1.FirebaseDatastores.computeDocMetaID(this.fingerprint);
            if (groupDoc.docID === primaryDocID) {
                return;
            }
            const { profileID } = groupDoc;
            const userProfile = yield UserProfiles_1.UserProfiles.get(profileID);
            if (!userProfile) {
                log.warn("No user profile");
                return;
            }
            yield this.handleDocMetaRecordWithUserProfile(groupDoc, userProfile, docMetaRecord);
        });
    }
    handleDocMetaRecordWithUserProfile(docUpdateRef, userProfile, docMetaRecord) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!docMetaRecord) {
                return;
            }
            const { docID, fingerprint } = docUpdateRef;
            const prev = Optional_1.Optional.of(this.docMetaIndex[docID]).getOrUndefined();
            const initDocMeta = (docMeta) => {
                for (const pageMeta of Object.values(docMeta.pageMetas)) {
                    Dictionaries_1.Dictionaries.clear(pageMeta.pagemarks);
                }
                return docMeta;
            };
            const createDocMeta = () => {
                const result = initDocMeta(DocMetas_1.DocMetas.deserialize(docMetaRecord.value.value, fingerprint));
                if (prev) {
                    return result;
                }
                return Proxies_1.Proxies.create(result);
            };
            const curr = createDocMeta();
            yield DocMetaRecords.applyAuthorsFromUserProfile(curr, userProfile);
            if (prev) {
                DocMetaRecords.mergeDocMetaUpdate(curr, prev);
            }
            else {
                this.docMetaHandler(curr, docUpdateRef);
                this.docMetaIndex[docID] = curr;
            }
        });
    }
}
exports.DocMetaListener = DocMetaListener;
class DocMetaListeners {
    static register(fingerprint, docMetaHandler, errHandler) {
        return __awaiter(this, void 0, void 0, function* () {
            const profileOwner = yield ProfileOwners_1.ProfileOwners.get();
            if (!profileOwner) {
                log.warn("No profile owner for user");
                return;
            }
            const { profileID } = profileOwner;
            new DocMetaListener(fingerprint, profileID, docMetaHandler, errHandler).start();
        });
    }
}
exports.DocMetaListeners = DocMetaListeners;
class StringDicts {
    static merge(source, target) {
        const deletable = SetArrays_1.SetArrays.difference(Object.keys(target), Object.keys(source));
        for (const key of deletable) {
            delete target[key];
        }
        const copyable = SetArrays_1.SetArrays.difference(Object.keys(source), Object.keys(target));
        for (const key of copyable) {
            target[key] = source[key];
        }
    }
}
class DocMetaRecords {
    static onSnapshot(id, handler) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield Collections_1.Collections.onDocumentSnapshot(this.COLLECTION, id, record => handler(record));
        });
    }
    static mergeDocMetaUpdate(source, target) {
        const mergePageMeta = (source, target) => {
            StringDicts.merge(source.textHighlights, target.textHighlights);
            StringDicts.merge(source.areaHighlights, target.areaHighlights);
            StringDicts.merge(source.notes, target.notes);
            StringDicts.merge(source.comments, target.comments);
            StringDicts.merge(source.questions, target.questions);
            StringDicts.merge(source.flashcards, target.flashcards);
        };
        for (const page of Dictionaries_1.Dictionaries.numberKeys(source.pageMetas)) {
            mergePageMeta(source.pageMetas[page], target.pageMetas[page]);
        }
    }
    static applyAuthorsFromUserProfile(docMeta, userProfile) {
        const { profile } = userProfile;
        const createAuthorFromProfile = () => {
            const profileID = profile.id;
            const name = profile.name || profile.handle || 'unknown';
            const createImage = () => {
                if (profile.image) {
                    return {
                        src: profile.image.url
                    };
                }
                return undefined;
            };
            const image = createImage();
            const guest = !userProfile.self;
            return new Author_1.Author({ name, image, profileID, guest });
        };
        const author = createAuthorFromProfile();
        const applyAuthorToAnnotations = (dict) => {
            for (const annotation of Object.values(dict)) {
                annotation.author = author;
            }
        };
        const applyAuthorToPage = (pageMeta) => {
            applyAuthorToAnnotations(pageMeta.textHighlights);
            applyAuthorToAnnotations(pageMeta.areaHighlights);
            applyAuthorToAnnotations(pageMeta.notes);
            applyAuthorToAnnotations(pageMeta.comments);
            applyAuthorToAnnotations(pageMeta.questions);
            applyAuthorToAnnotations(pageMeta.flashcards);
        };
        for (const page of Dictionaries_1.Dictionaries.numberKeys(docMeta.pageMetas)) {
            applyAuthorToPage(docMeta.pageMetas[page]);
        }
    }
}
exports.DocMetaRecords = DocMetaRecords;
DocMetaRecords.COLLECTION = 'doc_meta';
//# sourceMappingURL=data:application/json;base64,