"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Latch_1 = require("polar-shared/src/util/Latch");
class AbstractDatastoreMutation {
    constructor() {
        this.id = AbstractDatastoreMutation.SEQUENCE++;
    }
}
AbstractDatastoreMutation.SEQUENCE = 0;
class DefaultDatastoreMutation extends AbstractDatastoreMutation {
    constructor() {
        super();
        this.written = new Latch_1.Latch();
        this.committed = new Latch_1.Latch();
    }
}
exports.DefaultDatastoreMutation = DefaultDatastoreMutation;
class CommittedDatastoreMutation extends AbstractDatastoreMutation {
    constructor(value) {
        super();
        this.written = new Latch_1.Latch();
        this.committed = new Latch_1.Latch();
        this.written.resolve(value);
        this.committed.resolve(value);
    }
}
exports.CommittedDatastoreMutation = CommittedDatastoreMutation;
class BatchDatastoreMutation extends AbstractDatastoreMutation {
    constructor(dm0, dm1, target) {
        super();
        this.written = target.written;
        this.committed = target.committed;
        this.batched(dm0.written.get(), dm1.written.get(), this.written);
        this.batched(dm0.committed.get(), dm1.committed.get(), this.committed);
    }
    batched(promise0, promise1, latch) {
        const batch = Promise.all([promise0, promise1]);
        batch.then((result) => {
            latch.resolve(result[0]);
        }).catch(err => {
            latch.reject(err);
        });
    }
}
exports.BatchDatastoreMutation = BatchDatastoreMutation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YXN0b3JlTXV0YXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEYXRhc3RvcmVNdXRhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVEQUFrRDtBQXdCbEQsTUFBZSx5QkFBeUI7SUFBeEM7UUFJb0IsT0FBRSxHQUFXLHlCQUF5QixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBS3RFLENBQUM7O0FBUGlCLGtDQUFRLEdBQUcsQ0FBQyxDQUFDO0FBYS9CLE1BQWEsd0JBQTRCLFNBQVEseUJBQTRCO0lBR3pFO1FBQ0ksS0FBSyxFQUFFLENBQUM7UUFHSSxZQUFPLEdBQUcsSUFBSSxhQUFLLEVBQUssQ0FBQztRQUV6QixjQUFTLEdBQUcsSUFBSSxhQUFLLEVBQUssQ0FBQztJQUozQyxDQUFDO0NBTUo7QUFYRCw0REFXQztBQUtELE1BQWEsMEJBQThCLFNBQVEseUJBQTRCO0lBTTNFLFlBQVksS0FBUTtRQUNoQixLQUFLLEVBQUUsQ0FBQztRQUxJLFlBQU8sR0FBRyxJQUFJLGFBQUssRUFBSyxDQUFDO1FBRXpCLGNBQVMsR0FBRyxJQUFJLGFBQUssRUFBSyxDQUFDO1FBSXZDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FFSjtBQVpELGdFQVlDO0FBS0QsTUFBYSxzQkFBMEIsU0FBUSx5QkFBNEI7SUFNdkUsWUFBWSxHQUF5QixFQUFFLEdBQXlCLEVBQUUsTUFBNEI7UUFDMUYsS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO1FBRWxDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFM0UsQ0FBQztJQUVPLE9BQU8sQ0FBQyxRQUFvQixFQUFFLFFBQW9CLEVBQUUsS0FBZTtRQUV2RSxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFaEQsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ2xCLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztJQUVQLENBQUM7Q0FFSjtBQTdCRCx3REE2QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xhdGNofSBmcm9tIFwicG9sYXItc2hhcmVkL3NyYy91dGlsL0xhdGNoXCI7XG5cbi8qKlxuICogVGhlIHJlc3VsdCBvZiBhIERhdGFzdG9yZSBtdXRhdGlvbiBpbmNsdWRpbmcgbGF0Y2hlcyBmb3Igd2hldGhlciB0aGUgcmVzdWx0XG4gKiB3YXMgZnVsbCB3cml0dGVuIG9yIG5vdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEYXRhc3RvcmVNdXRhdGlvbjxUPiB7XG5cbiAgICByZWFkb25seSBpZDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG11dGF0aW9uIHdhcyB3cml0dGVuIGJ1dCBzdGlsbCBwZW5kaW5nLiAgVGhpcyBoYXBwZW5zIHdoZW4gd2UncmVcbiAgICAgKiB3cml0aW5nIHRvIGEgV0FMIG9yIGEgbG9jYWwgdnMgY2xvdWQgZW52aXJvbm1lbnQgd2hlcmUgdGhlIHdyaXRlIG1heSBuZWVkXG4gICAgICogdG8gYmUgd3JpdHRlbiB0byBhIGNsb3VkIHByb3ZpZGVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHdyaXR0ZW46IExhdGNoPFQ+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG11dGF0aW9uIHdhcyBmdWxseSBjb21tbWl0ZWQgYW5kIGNhbiBub3QgYmUgbG9zdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb21taXR0ZWQ6IExhdGNoPFQ+O1xuXG59XG5cbmFic3RyYWN0IGNsYXNzIEFic3RyYWN0RGF0YXN0b3JlTXV0YXRpb248VD4gaW1wbGVtZW50cyBEYXRhc3RvcmVNdXRhdGlvbjxUPiB7XG5cbiAgICBwdWJsaWMgc3RhdGljIFNFUVVFTkNFID0gMDtcblxuICAgIHB1YmxpYyByZWFkb25seSBpZDogbnVtYmVyID0gQWJzdHJhY3REYXRhc3RvcmVNdXRhdGlvbi5TRVFVRU5DRSsrO1xuXG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHdyaXR0ZW46IExhdGNoPFQ+O1xuICAgIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBjb21taXR0ZWQ6IExhdGNoPFQ+O1xuXG59XG5cbi8qKlxuICogRnVsbHkgY29tbWl0dGVkIGFoZWFkIG9mIHRpbWUgYW5kIHdpdGggYSBnaXZlbiB2YWx1ZS4gVGhpcyBpcyB1c2VkIGZvciB0aGVcbiAqIGRpc2sgZGF0YXN0b3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZhdWx0RGF0YXN0b3JlTXV0YXRpb248VD4gZXh0ZW5kcyBBYnN0cmFjdERhdGFzdG9yZU11dGF0aW9uPFQ+IHtcblxuICAgIC8vIFRPRE86IHJlZmFjdG9yIGFuZCByZW5hbWUgY2xhc3MgYXMgRGF0YXN0b3JlTGF0Y2hQYWlyXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlYWRvbmx5IHdyaXR0ZW4gPSBuZXcgTGF0Y2g8VD4oKTtcblxuICAgIHB1YmxpYyByZWFkb25seSBjb21taXR0ZWQgPSBuZXcgTGF0Y2g8VD4oKTtcblxufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21taXR0ZWREYXRhc3RvcmVNdXRhdGlvbjxUPiBleHRlbmRzIEFic3RyYWN0RGF0YXN0b3JlTXV0YXRpb248VD4ge1xuXG4gICAgcHVibGljIHJlYWRvbmx5IHdyaXR0ZW4gPSBuZXcgTGF0Y2g8VD4oKTtcblxuICAgIHB1YmxpYyByZWFkb25seSBjb21taXR0ZWQgPSBuZXcgTGF0Y2g8VD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBUKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMud3JpdHRlbi5yZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgdGhpcy5jb21taXR0ZWQucmVzb2x2ZSh2YWx1ZSk7XG4gICAgfVxuXG59XG5cbi8qKlxuICogVGhlIHdyaXRlcyB3cml0dGVuIGFuZCBjb21taXR0ZWQgbXV0YXRpb25zIGNvbXBsZXRlIHRvZ2V0aGVyIGFzIGEgYmF0Y2guXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXRjaERhdGFzdG9yZU11dGF0aW9uPFQ+IGV4dGVuZHMgQWJzdHJhY3REYXRhc3RvcmVNdXRhdGlvbjxUPiB7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgd3JpdHRlbjogTGF0Y2g8VD47XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgY29tbWl0dGVkOiBMYXRjaDxUPjtcblxuICAgIGNvbnN0cnVjdG9yKGRtMDogRGF0YXN0b3JlTXV0YXRpb248VD4sIGRtMTogRGF0YXN0b3JlTXV0YXRpb248VD4sIHRhcmdldDogRGF0YXN0b3JlTXV0YXRpb248VD4gKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy53cml0dGVuID0gdGFyZ2V0LndyaXR0ZW47XG4gICAgICAgIHRoaXMuY29tbWl0dGVkID0gdGFyZ2V0LmNvbW1pdHRlZDtcblxuICAgICAgICB0aGlzLmJhdGNoZWQoZG0wLndyaXR0ZW4uZ2V0KCksIGRtMS53cml0dGVuLmdldCgpLCB0aGlzLndyaXR0ZW4pO1xuICAgICAgICB0aGlzLmJhdGNoZWQoZG0wLmNvbW1pdHRlZC5nZXQoKSwgZG0xLmNvbW1pdHRlZC5nZXQoKSwgdGhpcy5jb21taXR0ZWQpO1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBiYXRjaGVkKHByb21pc2UwOiBQcm9taXNlPFQ+LCBwcm9taXNlMTogUHJvbWlzZTxUPiwgbGF0Y2g6IExhdGNoPFQ+KTogdm9pZCB7XG5cbiAgICAgICAgY29uc3QgYmF0Y2ggPSBQcm9taXNlLmFsbChbcHJvbWlzZTAsIHByb21pc2UxXSk7XG5cbiAgICAgICAgYmF0Y2gudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBsYXRjaC5yZXNvbHZlKHJlc3VsdFswXSk7XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBsYXRjaC5yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbn1cbiJdfQ==