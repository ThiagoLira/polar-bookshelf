"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const DocMetaRef_1 = require("./DocMetaRef");
const Files_1 = require("polar-shared/src/util/Files");
const DatastoreMutation_1 = require("./DatastoreMutation");
const AsyncWorkQueues_1 = require("polar-shared/src/util/AsyncWorkQueues");
const DocMetas_1 = require("../metadata/DocMetas");
const DatastoreMutations_1 = require("./DatastoreMutations");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const Either_1 = require("../util/Either");
const BackendFileRefs_1 = require("./BackendFileRefs");
const Visibility_1 = require("polar-shared/src/datastore/Visibility");
class AbstractDatastore {
    constructor() {
        this.datastoreMutations = DatastoreMutations_1.DatastoreMutations.create('written');
    }
    writeDocMeta(docMeta, datastoreMutation = new DatastoreMutation_1.DefaultDatastoreMutation()) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = DocMetas_1.DocMetas.serialize(docMeta, "");
            const docInfo = docMeta.docInfo;
            const syncMutation = new DatastoreMutation_1.DefaultDatastoreMutation();
            DatastoreMutations_1.DatastoreMutations.pipe(syncMutation, datastoreMutation, () => docInfo);
            yield this.write(docMeta.docInfo.fingerprint, data, docInfo, { datastoreMutation: syncMutation });
            return docInfo;
        });
    }
    handleWriteFile(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!opts) {
                return;
            }
            if (opts.writeFile) {
                yield this.writeFile(opts.writeFile.backend, opts.writeFile, opts.writeFile.data);
            }
        });
    }
    synchronizeDocs(...docMetaRefs) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    deactivate() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    createBackup() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
}
exports.AbstractDatastore = AbstractDatastore;
class DefaultWriteFileOpts {
    constructor() {
        this.meta = {};
        this.visibility = Visibility_1.Visibility.PRIVATE;
    }
}
exports.DefaultWriteFileOpts = DefaultWriteFileOpts;
var sources;
(function (sources) {
    class DataSources {
        static toLiteral(source) {
            return __awaiter(this, void 0, void 0, function* () {
                if (typeof source === 'function') {
                    return source();
                }
                return source;
            });
        }
    }
    sources.DataSources = DataSources;
})(sources = exports.sources || (exports.sources = {}));
class BinaryFileDatas {
    static toType(data) {
        if (typeof data === 'string') {
            return 'string';
        }
        else if (data instanceof Buffer) {
            return 'buffer';
        }
        else if (data instanceof Blob) {
            return 'blob';
        }
        else if (Files_1.FileHandles.isFileHandle(data)) {
            return 'file-handle';
        }
        else {
            return 'readable-stream';
        }
    }
}
exports.BinaryFileDatas = BinaryFileDatas;
function isBinaryFileData(data) {
    if (!Preconditions_1.isPresent(data)) {
        return false;
    }
    if (typeof data === 'string') {
        return true;
    }
    if (data instanceof Buffer) {
        return true;
    }
    if (data instanceof Blob) {
        return true;
    }
    if (Preconditions_1.isPresent(data.path)) {
        return true;
    }
    return false;
}
exports.isBinaryFileData = isBinaryFileData;
class DocMetaSnapshotEvents {
    static format(ev) {
        let batch = "NO BATCH";
        if (ev.batch) {
            batch = `(id: ${ev.batch.id}, terminated: ${ev.batch.terminated})`;
        }
        const progress = ev.progress.progress;
        const nrMutations = ev.docMetaMutations.length;
        return `${ev.datastore} ${progress}% (consistency: ${ev.consistency}, nr mutations: ${nrMutations}, batch: ${batch})`;
    }
    static toDocInfos(docMetaSnapshotEvent) {
        return __awaiter(this, void 0, void 0, function* () {
            return AsyncWorkQueues_1.AsyncWorkQueues
                .awaitAsyncFunctions(docMetaSnapshotEvent.docMetaMutations.map(current => current.docInfoProvider));
        });
    }
    static toSyncDocs(docMetaSnapshotEvent) {
        return __awaiter(this, void 0, void 0, function* () {
            const typedAsyncFunctions = docMetaSnapshotEvent.docMetaMutations.map(docMetaMutation => {
                return () => __awaiter(this, void 0, void 0, function* () {
                    const docInfo = yield docMetaMutation.docInfoProvider();
                    return SyncDocs.fromDocInfo(docInfo, docMetaMutation.mutationType);
                });
            });
            return yield AsyncWorkQueues_1.AsyncWorkQueues.awaitAsyncFunctions(typedAsyncFunctions);
        });
    }
}
exports.DocMetaSnapshotEvents = DocMetaSnapshotEvents;
class SyncDocMaps {
    static putAll(syncDocMap, syncDocs) {
        for (const syncDoc of syncDocs) {
            syncDocMap[syncDoc.fingerprint] = syncDoc;
        }
    }
    static fromArray(syncDocs) {
        const result = {};
        for (const syncDoc of syncDocs) {
            result[syncDoc.fingerprint] = syncDoc;
        }
        return result;
    }
}
exports.SyncDocMaps = SyncDocMaps;
class SyncDocs {
    static fromDocInfo(docInfo, mutationType) {
        const files = BackendFileRefs_1.BackendFileRefs.toBackendFileRefs(Either_1.Either.ofRight(docInfo));
        return {
            fingerprint: docInfo.fingerprint,
            title: docInfo.title || 'untitled',
            docMetaFileRef: DocMetaRef_1.DocMetaFileRefs.createFromDocInfo(docInfo),
            mutationType,
            uuid: docInfo.uuid,
            files
        };
    }
}
exports.SyncDocs = SyncDocs;
class NetworkLayers {
}
exports.NetworkLayers = NetworkLayers;
NetworkLayers.LOCAL = new Set(['local']);
NetworkLayers.LOCAL_AND_WEB = new Set(['local', 'web']);
NetworkLayers.WEB = new Set(['web']);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YXN0b3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRGF0YXN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0EsNkNBQXlFO0FBR3pFLHVEQUFvRTtBQUNwRSwyREFBZ0Y7QUFJaEYsMkVBQXNFO0FBQ3RFLG1EQUE4QztBQUM5Qyw2REFBd0Q7QUFHeEQsa0VBQXlEO0FBQ3pELDJDQUFzQztBQUN0Qyx1REFBa0Q7QUFJbEQsc0VBQWlFO0FBNEhqRSxNQUFzQixpQkFBaUI7SUFJbkM7UUFDSSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsdUNBQWtCLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRW5FLENBQUM7SUFFWSxZQUFZLENBQUMsT0FBaUIsRUFDakIsb0JBQWlELElBQUksNENBQXdCLEVBQUU7O1lBRXJHLE1BQU0sSUFBSSxHQUFHLG1CQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUM3QyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1lBRWhDLE1BQU0sWUFBWSxHQUFHLElBQUksNENBQXdCLEVBQVcsQ0FBQztZQUM3RCx1Q0FBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRXhFLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUMsaUJBQWlCLEVBQUUsWUFBWSxFQUFDLENBQUMsQ0FBQztZQUNoRyxPQUFPLE9BQU8sQ0FBQztRQUVuQixDQUFDO0tBQUE7SUFVZSxlQUFlLENBQUMsSUFBZ0I7O1lBRTVDLElBQUksQ0FBRSxJQUFJLEVBQUU7Z0JBQ1IsT0FBTzthQUNWO1lBRUQsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNoQixNQUFNLElBQUksQ0FBQyxTQUFT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RVYsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFpQixFQUFFLFlBQTBCO1FBRW5FLE1BQU0sS0FBSyxHQUFHLGlDQUFlLENBQUMsaUJBQWlCLENBQUMsZUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRXpFLE9BQU87WUFDSCxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7WUFDaEMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLElBQUksVUFBVTtZQUNsQyxjQUFjLEVBQUUsNEJBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7WUFDMUQsWUFBWTtZQUNaLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtZQUNsQixLQUFLO1NBQ1IsQ0FBQztJQUVOLENBQUM7Q0FFSjtBQWpCRCw0QkFpQkM7QUFxRUQsTUFBYSxhQUFhOztBQUExQixzQ0FRQztBQU5pQixtQkFBSyxHQUFHLElBQUksR0FBRyxDQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUV6QywyQkFBYSxHQUFHLElBQUksR0FBRyxDQUFlLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFFeEQsaUJBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBIGRhdGFzdG9yZSB0aGF0IHN1cHBvcnRzIGxlZGdlcnMgYW5kIGNoZWNrcG9pbnRzLlxuaW1wb3J0IHtEb2NNZXRhRmlsZVJlZiwgRG9jTWV0YUZpbGVSZWZzLCBEb2NNZXRhUmVmfSBmcm9tICcuL0RvY01ldGFSZWYnO1xuaW1wb3J0IHtCYWNrZW5kfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL2RhdGFzdG9yZS9CYWNrZW5kJztcbmltcG9ydCB7RG9jRmlsZU1ldGF9IGZyb20gJy4vRG9jRmlsZU1ldGEnO1xuaW1wb3J0IHtGaWxlSGFuZGxlLCBGaWxlSGFuZGxlc30gZnJvbSAncG9sYXItc2hhcmVkL3NyYy91dGlsL0ZpbGVzJztcbmltcG9ydCB7RGF0YXN0b3JlTXV0YXRpb24sIERlZmF1bHREYXRhc3RvcmVNdXRhdGlvbn0gZnJvbSAnLi9EYXRhc3RvcmVNdXRhdGlvbic7XG5pbXBvcnQge1Byb2dyZXNzLCBQcm9ncmVzc0xpc3RlbmVyfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3V0aWwvUHJvZ3Jlc3NUcmFja2VyJztcbmltcG9ydCB7QXN5bmNQcm92aWRlcn0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy91dGlsL1Byb3ZpZGVycyc7XG5pbXBvcnQge1VVSUR9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvbWV0YWRhdGEvVVVJRCc7XG5pbXBvcnQge0FzeW5jV29ya1F1ZXVlc30gZnJvbSAncG9sYXItc2hhcmVkL3NyYy91dGlsL0FzeW5jV29ya1F1ZXVlcyc7XG5pbXBvcnQge0RvY01ldGFzfSBmcm9tICcuLi9tZXRhZGF0YS9Eb2NNZXRhcyc7XG5pbXBvcnQge0RhdGFzdG9yZU11dGF0aW9uc30gZnJvbSAnLi9EYXRhc3RvcmVNdXRhdGlvbnMnO1xuaW1wb3J0IHtJU09EYXRlVGltZVN0cmluZ30gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9JU09EYXRlVGltZVN0cmluZ3MnO1xuaW1wb3J0IHtQZXJzaXN0ZW50UHJlZnN9IGZyb20gJy4uL3V0aWwvcHJlZnMvUHJlZnMnO1xuaW1wb3J0IHtpc1ByZXNlbnR9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvUHJlY29uZGl0aW9ucyc7XG5pbXBvcnQge0VpdGhlcn0gZnJvbSAnLi4vdXRpbC9FaXRoZXInO1xuaW1wb3J0IHtCYWNrZW5kRmlsZVJlZnN9IGZyb20gJy4vQmFja2VuZEZpbGVSZWZzJztcbmltcG9ydCB7SURvY0luZm99IGZyb20gXCJwb2xhci1zaGFyZWQvc3JjL21ldGFkYXRhL0lEb2NJbmZvXCI7XG5pbXBvcnQge0lEb2NNZXRhfSBmcm9tIFwicG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9JRG9jTWV0YVwiO1xuaW1wb3J0IHtCYWNrZW5kRmlsZVJlZn0gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvZGF0YXN0b3JlL0JhY2tlbmRGaWxlUmVmXCI7XG5pbXBvcnQge1Zpc2liaWxpdHl9IGZyb20gXCJwb2xhci1zaGFyZWQvc3JjL2RhdGFzdG9yZS9WaXNpYmlsaXR5XCI7XG5pbXBvcnQge0ZpbGVSZWZ9IGZyb20gXCJwb2xhci1zaGFyZWQvc3JjL2RhdGFzdG9yZS9GaWxlUmVmXCI7XG5pbXBvcnQge1BhdGhTdHIsIFVSTFN0cn0gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvdXRpbC9TdHJpbmdzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YXN0b3JlIGV4dGVuZHMgQmluYXJ5RGF0YXN0b3JlLCBXcml0YWJsZURhdGFzdG9yZSB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaWQgb2YgdGhpcyBkYXRhc3RvcmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaWQ6IERhdGFzdG9yZUlEO1xuXG4gICAgLyoqXG4gICAgICogSW5pdCB0aGUgZGF0YXN0b3JlLCBwb3RlbnRpYWxseSByZWFkaW5nIGZpbGVzIG9mIGRpc2ssIHRoZSBuZXR3b3JrLCBldGMuXG4gICAgICovXG4gICAgaW5pdChlcnJvckxpc3RlbmVyPzogRXJyb3JMaXN0ZW5lciwgb3B0cz86IERhdGFzdG9yZUluaXRPcHRzKTogUHJvbWlzZTxJbml0UmVzdWx0PjtcblxuICAgIHN0b3AoKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSBEaXNrRGF0YXN0b3JlIGNvbnRhaW5zIGEgZG9jdW1lbnQgZm9yIHRoZSBnaXZlblxuICAgICAqIGZpbmdlcnByaW50LlxuICAgICAqL1xuICAgIGNvbnRhaW5zKGZpbmdlcnByaW50OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkYXRhIGZvciB0aGUgRG9jTWV0YSBvYmplY3Qgd2UgY3VycmVudGx5IGluIHRoZSBkYXRhc3RvcmUgZm9yXG4gICAgICogdGhpcyBnaXZlbiBmaW5nZXJwcmludCBvciBudWxsIGlmIGl0IGRvZXMgbm90IGV4aXN0LlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gQSBKU09OIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIERvY01ldGEgd2hpY2ggaXMgZGVjb2RlZFxuICAgICAqIGJ5IHRoZSBQZXJzaXN0ZW5jZUxheWVyLlxuICAgICAqL1xuICAgIGdldERvY01ldGEoZmluZ2VycHJpbnQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD47XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYW4gYXJyYXkgb2Yge0RvY01ldGFSZWZ9cyBjdXJyZW50bHkgaW4gdGhlIHJlcG9zaXRvcnkuXG4gICAgICovXG4gICAgZ2V0RG9jTWV0YVJlZnMoKTogUHJvbWlzZTxEb2NNZXRhUmVmW10+O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGEgY3VycmVudCBzbmFwc2hvdCBvZiB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhlIERhdGFzdG9yZSBieVxuICAgICAqIHJlY2VpdmluZyBEb2NNZXRhU25hcHNob3RFdmVudCBvbiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAgICAgKi9cbiAgICBzbmFwc2hvdChkb2NNZXRhU25hcHNob3RFdmVudExpc3RlbmVyOiBEb2NNZXRhU25hcHNob3RFdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgIGVycm9yTGlzdGVuZXI/OiBFcnJvckxpc3RlbmVyKTogUHJvbWlzZTxTbmFwc2hvdFJlc3VsdD47XG5cbiAgICAvKipcbiAgICAgKiBBbiBldmVudCBsaXN0ZW5lciB0byBsaXN0ZW4gdG8gdGhlIGRhdGFzdG9yZSB3aGlsZSBvcGVyYXRpbmcgb24gYm90aFxuICAgICAqIHRoZSB1bmRlcmx5aW5nIGRhdGFzdG9yZXMgdG8gZGlzY292ZXIgd2hlbiBkb2N1bWVudHMgYXJlIGRpc2NvdmVyZWRcbiAgICAgKiB3aXRob3V0IGhhdmluZyB0byByZS1yZWFkIHRoZSBkYXRhc3RvcmUgYWZ0ZXIgaXQncyBiZWVuIGluaXRpYWxpemVkLlxuICAgICAqL1xuICAgIGFkZERvY01ldGFTbmFwc2hvdEV2ZW50TGlzdGVuZXIoZG9jTWV0YVNuYXBzaG90RXZlbnRMaXN0ZW5lcjogRG9jTWV0YVNuYXBzaG90RXZlbnRMaXN0ZW5lcik6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBEZWFjdGl2YXRlIHVzaW5nIHRoaXMgZGF0YXN0b3JlLiBGb3IgbW9zdCBkYXRhc3RvcmVzIHRoaXMgaXMgbm90IHVzZWRcbiAgICAgKiBidXQgZm9yIGNsb3VkIHNvdXJjZXMgdGhpcyB3b3VsZCBsb2dvdXQgYW5kIHBlcmZvcm0gb3RoZXIgdGFza3MuXG4gICAgICovXG4gICAgZGVhY3RpdmF0ZSgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGFuIG92ZXJ2aWV3IG9mIHRoZSBkYXRhc3RvcmUgaW5jbHVkaW5nIHRoZSB0aW1lIGl0IHdhcyBjcmVhdGVkIGFzXG4gICAgICogd2VsbCBhcyBvdGhlciBzdGF0cyBpbmNsdWRpbmcgdGhlIG51bWJlciBvZiBkb2NzLlxuICAgICAqL1xuICAgIG92ZXJ2aWV3KCk6IFByb21pc2U8RGF0YXN0b3JlT3ZlcnZpZXcgfCB1bmRlZmluZWQ+O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGEgUHJlZnMgb2JqZWN0IHRoYXQgc3VwcG9ydHMgcmVhZGluZyBhbmQgd3JpdGluZyBrZXkvdmFsdWVzIHRvIGFcbiAgICAgKiBzaW1wbGUgcHJlZnMgc3RvcmUuXG4gICAgICovXG4gICAgZ2V0UHJlZnMoKTogUHJlZnNQcm92aWRlcjtcblxuICAgIGNhcGFiaWxpdGllcygpOiBEYXRhc3RvcmVDYXBhYmlsaXRpZXM7XG5cbn1cblxuLy8gd3JpdGFibGUsIHJlYWRvbmx5ICwgcm8gdnMgcncuLi4gcmVhZG9ubHkgaXMgYmV0dGVyIEJVVCB0aGF0J3MgcmVzZXJ2ZWQgYnlcbi8vIHR5cGVzY3JpcHRcblxuZXhwb3J0IHR5cGUgTW9kZSA9ICdydycgfCAncm8nO1xuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFzdG9yZVBlcm1pc3Npb24ge1xuXG4gICAgLyoqXG4gICAgICogVGhlIGhpZ2ggbGV2ZWwgcGVybWlzc2lvbnMgbW9kZSBmb3IgdGhpcyBkYXRhc3RvcmUuIEFwcGxpZWQgdG8gQUxMXG4gICAgICogYWNjZXNzIHRvIHRoZSBzdG9yZSBub3Qgb24gYSBmaWxlIGJ5IGZpbGUgYmFzaXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbW9kZTogTW9kZTtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFzdG9yZUNhcGFiaWxpdGllcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBjYWxsZXJzIHdpdGggdGhlIGF2YWlsYWJsZSBuZXR3b3JrIGxheWVycyBmb3IgdGhpcyBkYXRhc3RvcmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmV0d29ya0xheWVyczogUmVhZG9ubHlTZXQ8TmV0d29ya0xheWVyPjtcblxuICAgIHJlYWRvbmx5IHBlcm1pc3Npb246IERhdGFzdG9yZVBlcm1pc3Npb247XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhc3RvcmVJbmZvIHtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0aW1lIHRoZSBkYXRhc3RvcmUgd2FzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY3JlYXRlZDogSVNPRGF0ZVRpbWVTdHJpbmc7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhc3RvcmVPdmVydmlldyB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGltZSB0aGUgZGF0YXN0b3JlIHdhcyBjcmVhdGVkLiAgUmlnaHQgbm93IHdlIGRvbid0IGFsd2F5cyBrbm93XG4gICAgICogd2hlbiB0aGUgZGF0YXN0b3JlIHdhcyBjcmVhdGVkIGR1ZSB0byBhZGRpbmcgdGhpcyBmZWF0dXJlIGxhdGVyIChzdG9yaW5nXG4gICAgICogdGhlIGNyZWF0aW9uIHRpbWUpIGxhdGVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNyZWF0ZWQ/OiBJU09EYXRlVGltZVN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgZG9jdW1lbnRzIGluIHRoZSBkYXRhc3RvcmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbnJEb2NzOiBudW1iZXI7XG5cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0RGF0YXN0b3JlIHtcblxuICAgIHByb3RlY3RlZCBkYXRhc3RvcmVNdXRhdGlvbnM6IERhdGFzdG9yZU11dGF0aW9ucztcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5kYXRhc3RvcmVNdXRhdGlvbnMgPSBEYXRhc3RvcmVNdXRhdGlvbnMuY3JlYXRlKCd3cml0dGVuJyk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgd3JpdGVEb2NNZXRhKGRvY01ldGE6IElEb2NNZXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXN0b3JlTXV0YXRpb246IERhdGFzdG9yZU11dGF0aW9uPElEb2NJbmZvPiA9IG5ldyBEZWZhdWx0RGF0YXN0b3JlTXV0YXRpb24oKSk6IFByb21pc2U8SURvY0luZm8+IHtcblxuICAgICAgICBjb25zdCBkYXRhID0gRG9jTWV0YXMuc2VyaWFsaXplKGRvY01ldGEsIFwiXCIpO1xuICAgICAgICBjb25zdCBkb2NJbmZvID0gZG9jTWV0YS5kb2NJbmZvO1xuXG4gICAgICAgIGNvbnN0IHN5bmNNdXRhdGlvbiA9IG5ldyBEZWZhdWx0RGF0YXN0b3JlTXV0YXRpb248Ym9vbGVhbj4oKTtcbiAgICAgICAgRGF0YXN0b3JlTXV0YXRpb25zLnBpcGUoc3luY011dGF0aW9uLCBkYXRhc3RvcmVNdXRhdGlvbiwgKCkgPT4gZG9jSW5mbyk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy53cml0ZShkb2NNZXRhLmRvY0luZm8uZmluZ2VycHJpbnQsIGRhdGEsIGRvY0luZm8sIHtkYXRhc3RvcmVNdXRhdGlvbjogc3luY011dGF0aW9ufSk7XG4gICAgICAgIHJldHVybiBkb2NJbmZvO1xuXG4gICAgfVxuXG4gICAgcHVibGljIGFic3RyYWN0IHdyaXRlRmlsZShiYWNrZW5kOiBCYWNrZW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmOiBGaWxlUmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogQmluYXJ5RmlsZURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzPzogV3JpdGVGaWxlT3B0cyk6IFByb21pc2U8RG9jRmlsZU1ldGE+O1xuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBmaWxlIHdyaXRlIGlmIHNwZWNpZnkgYXMgYSBkZXBlbmRlbmN5IHdpdGhpbiB3cml0ZSgpXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFzeW5jIGhhbmRsZVdyaXRlRmlsZShvcHRzPzogV3JpdGVPcHRzKSB7XG5cbiAgICAgICAgaWYgKCEgb3B0cykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdHMud3JpdGVGaWxlKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLndyaXRlRmlsZShvcHRzLndyaXRlRmlsZS5iYWNrZW5kLCBvcHRzLndyaXRlRmlsZSwgb3B0cy53cml0ZUZpbGUuZGF0YSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyBhYnN0cmFjdCB3cml0ZShmaW5nZXJwcmludDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBhbnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRvY0luZm86IElEb2NJbmZvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzPzogV3JpdGVPcHRzKTogUHJvbWlzZTx2b2lkPjtcblxuICAgIHB1YmxpYyBhc3luYyBzeW5jaHJvbml6ZURvY3MoLi4uZG9jTWV0YVJlZnM6IERvY01ldGFSZWZbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBub29wXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGRlYWN0aXZhdGUoKSB7XG4gICAgICAgIC8vIG5vb3BcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgY3JlYXRlQmFja3VwKCk6IFByb21pc2U8dm9pZD4ge1xuXG4gICAgICAgIC8vIG9ubHkgc3VwcG9ydGVkIHdpdGggdGhlIGRpc2sgZGF0YXN0b3JlLlxuICAgICAgICAvLyBUT0RPICh3ZWJhcHApIEkgdGhpbmsgdGhpcyBuZWVkcyB0byBiZSBlbmFibGVkIGZvciBGaXJlYmFzZT9cbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTm90IHN1cHBvcnRlZCB3aXRoIHRoaXMgZGF0YXRvcmVcIik7XG5cbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBXcml0ZU9wdHMge1xuXG4gICAgcmVhZG9ubHkgZGF0YXN0b3JlTXV0YXRpb24/OiBEYXRhc3RvcmVNdXRhdGlvbjxib29sZWFuPjtcblxuICAgIC8qKlxuICAgICAqIEFsc28gd3JpdGUgYSBmaWxlIChQREYsIFBIWikgd2l0aCB0aGUgRG9jTWV0YSBkYXRhIHNvIHRoYXQgaXQncyBhdG9taWNcbiAgICAgKiBhbmQgdGhhdCB0aGUgb3BlcmF0aW9ucyBhcmUgb3JkZXJlZCBwcm9wZXJseS5cbiAgICAgKi9cbiAgICByZWFkb25seSB3cml0ZUZpbGU/OiBCYWNrZW5kRmlsZVJlZkRhdGE7XG5cbiAgICByZWFkb25seSB2aXNpYmlsaXR5PzogVmlzaWJpbGl0eTtcblxuICAgIHJlYWRvbmx5IGdyb3Vwcz86IFJlYWRvbmx5QXJyYXk8R3JvdXBJRFN0cj47XG5cbn1cblxuaW50ZXJmYWNlIFdyaXRhYmxlRGF0YXN0b3JlIHtcblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSB0aGUgRG9jTWV0YSBmaWxlIGFuZCB0aGUgdW5kZXJseWluZyBkb2MgZnJvbSB0aGUgc3Rhc2guICBEZWxldGVzXG4gICAgICogTVVTVCBiZSBpZGVtcG90ZW50LlxuICAgICAqXG4gICAgICovXG4gICAgZGVsZXRlKGRvY01ldGFGaWxlUmVmOiBEb2NNZXRhRmlsZVJlZiwgZGF0YXN0b3JlTXV0YXRpb24/OiBEYXRhc3RvcmVNdXRhdGlvbjxib29sZWFuPik6IFByb21pc2U8UmVhZG9ubHk8RGVsZXRlUmVzdWx0Pj47XG5cbiAgICB3cml0ZURvY01ldGEoZG9jTWV0YTogSURvY01ldGEsIGRhdGFzdG9yZU11dGF0aW9uPzogRGF0YXN0b3JlTXV0YXRpb248SURvY0luZm8+KTogUHJvbWlzZTxJRG9jSW5mbz47XG5cbiAgICAvKipcbiAgICAgKiBXcml0ZSB0aGUgZGF0YXN0b3JlIHRvIGRpc2suICBXcml0ZXMgc2hvdWxkIGJlIGlkZW1wb3RlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmluZ2VycHJpbnQgVGhlIGZpbmdlcnByaW50IG9mIHRoZSBkYXRhIHdlIHNob3VsZCBiZSB3b3JraW5nIHdpdGguXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIFJBVyBkYXRhIHRvIGRlY29kZSBieSB0aGUgUGVyc2lzdGVuY2VMYXllclxuICAgICAqIEBwYXJhbSBkb2NJbmZvIFRoZSBEb2NJbmZvIGZvciB0aGlzIGRvY3VtZW50IHRoYXQgd2UncmUgd3JpdGluZ1xuICAgICAqIEBwYXJhbSBvcHRzIFRoZSBvcHRzIHRvIHVzZSB3aGVuIHdyaXRpbmcgdGhlIGZpbGUuXG4gICAgICovXG4gICAgd3JpdGUoZmluZ2VycHJpbnQ6IHN0cmluZyxcbiAgICAgICAgICBkYXRhOiBzdHJpbmcsXG4gICAgICAgICAgZG9jSW5mbzogSURvY0luZm8sXG4gICAgICAgICAgb3B0cz86IFdyaXRlT3B0cyk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBNYWtlIHN1cmUgdGhlIGRvY3Mgd2l0aCB0aGUgZ2l2ZW4gZmluZ2VycHJpbnRzIGFyZSBzeW5jaHJvbml6ZWQgd2l0aFxuICAgICAqIHRoaXMgZGF0YXN0b3JlLiBPbmx5IGltcGxlbWVudGVkIGluIGNsb3VkIGRhdGFzdG9yZXMuXG4gICAgICovXG4gICAgc3luY2hyb25pemVEb2NzKC4uLmRvY01ldGFSZWZzOiBEb2NNZXRhUmVmW10pOiBQcm9taXNlPHZvaWQ+O1xuXG4gICAgY3JlYXRlQmFja3VwKCk6IFByb21pc2U8dm9pZD47XG5cbn1cblxuLyoqXG4gKiBBIGRhdGFzdG9yZSB0aGF0IHN1cHBvcnQgc3RvcmFnZSBvZiBiaW5hcnkgZGF0YSAoaW1hZ2VzLCB2aWRlb3MsIFBERnMsIGV0YykuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmluYXJ5RGF0YXN0b3JlIGV4dGVuZHMgUmVhZGFibGVCaW5hcnlEYXRhc3RvcmUsIFdyaXRhYmxlQmluYXJ5RGF0YXN0b3JlIHtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlYWRhYmxlQmluYXJ5RGF0YXN0b3JlIHtcblxuICAgIGNvbnRhaW5zRmlsZShiYWNrZW5kOiBCYWNrZW5kLCByZWY6IEZpbGVSZWYpOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gICAgZ2V0RmlsZShiYWNrZW5kOiBCYWNrZW5kLCByZWY6IEZpbGVSZWYsIG9wdHM/OiBHZXRGaWxlT3B0cyk6IERvY0ZpbGVNZXRhO1xuXG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgZ2V0RmlsZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEdldEZpbGVPcHRzIHtcblxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0aGUgY2FsbGVyIHRvIHNwZWNpZnkgYSBtb3JlIHNwZWNpZmljIG5ldHdvcmsgbGF5ZXIgZm9yIHRoZVxuICAgICAqIGZpbGUgb3BlcmF0aW9uIGFuZCByZXR1cm5pbmcgYSBtb3JlIHNwZWNpZmljIFVSTC5cbiAgICAgKi9cbiAgICByZWFkb25seSBuZXR3b3JrTGF5ZXI/OiBOZXR3b3JrTGF5ZXI7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBXcml0YWJsZUJpbmFyeURhdGFzdG9yZSB7XG5cbiAgICAvKipcbiAgICAgKiBBZGQgZmlsZSBkYXRhIHRvIHRoZSBkYXRhc3RvcmUuICBUaGlzIGlzIHVzZWQgZm9yIGJpbmFyeSBkYXRhIG9yIG90aGVyXG4gICAgICogZGF0YSB0eXBlcyB0aGF0IG5lZWQgdG8gYmUgc3RvcmVkLiBUaGlzIGlzIHByaW1hcmlseSBkZXNpZ25lZCBmb3IgdmlkZW8sXG4gICAgICogYXVkaW8sIGFuZCBkb2N1bWVudHMgbGlrZSBQREYsIGVQdWIsIGV0Yy5cbiAgICAgKi9cbiAgICB3cml0ZUZpbGUoYmFja2VuZDogQmFja2VuZCxcbiAgICAgICAgICAgICAgcmVmOiBGaWxlUmVmLFxuICAgICAgICAgICAgICBkYXRhOiBCaW5hcnlGaWxlRGF0YSxcbiAgICAgICAgICAgICAgb3B0cz86IFdyaXRlRmlsZU9wdHMpOiBQcm9taXNlPERvY0ZpbGVNZXRhPjtcblxuICAgIGRlbGV0ZUZpbGUoYmFja2VuZDogQmFja2VuZCwgcmVmOiBGaWxlUmVmKTogUHJvbWlzZTx2b2lkPjtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdyaXRlRmlsZU9wdHMge1xuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgd2Ugbm8gbG9uZ2VyIHN1cHBvcnQgYXJiaXRyYXJ5IGZpbGUgbWV0YWRhdGEuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbWV0YT86IEZpbGVNZXRhO1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBmaWxlIHZpc2liaWxpdHkuICBEZWZhdWx0IGlzIHByaXZhdGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmlzaWJpbGl0eT86IFZpc2liaWxpdHk7XG5cbiAgICAvKipcbiAgICAgKiBPbmx5IHVwZGF0ZSBtZXRhZGF0YS4gIERvbid0IGFjdHVhbGx5IHdyaXRlIGRhdGEuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdXBkYXRlTWV0YT86IGJvb2xlYW47XG5cbiAgICByZWFkb25seSBkYXRhc3RvcmVNdXRhdGlvbj86IERhdGFzdG9yZU11dGF0aW9uPGJvb2xlYW4+O1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBhIHByb2dyZXNzIGxpc3RlbmVyIHNvIHRoYXQgd2hlbiB5b3UncmUgd3JpdGluZyBhIGZpbGUgeW91IGNhblxuICAgICAqIGtlZXAgdHJhY2sgb2YgdGhlIHByb2dyZXNzXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvZ3Jlc3NMaXN0ZW5lcj86IFByb2dyZXNzTGlzdGVuZXI7XG5cbn1cblxuZXhwb3J0IGNsYXNzIERlZmF1bHRXcml0ZUZpbGVPcHRzIGltcGxlbWVudHMgV3JpdGVGaWxlT3B0cyB7XG4gICAgcHVibGljIHJlYWRvbmx5IG1ldGE6IEZpbGVNZXRhID0ge307XG4gICAgcHVibGljIHJlYWRvbmx5IHZpc2liaWxpdHkgPSBWaXNpYmlsaXR5LlBSSVZBVEU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV3JpdGFibGVCaW5hcnlNZXRhRGF0YXN0b3JlIHtcbiAgICAvLyB3cml0ZUZpbGVNZXRhKGJhY2tlbmQ6IEJhY2tlbmQsIHJlZjogRmlsZVJlZiwgZG9jRmlsZU1ldGE6IERvY0ZpbGVNZXRhKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBzb3VyY2VzIHtcblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRmlsZVNvdXJjZSB7XG4gICAgICAgIHJlYWRvbmx5IGZpbGU6IFBhdGhTdHI7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBCdWZmZXJTb3VyY2Uge1xuICAgICAgICByZWFkb25seSBidWZmZXI6IEJ1ZmZlcjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFN0clNvdXJjZSB7XG4gICAgICAgIHJlYWRvbmx5IHN0cjogc3RyaW5nO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQmxvYlNvdXJjZSB7XG4gICAgICAgIHJlYWRvbmx5IGJsb2I6IEJsb2I7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBTdHJlYW1Tb3VyY2Uge1xuICAgICAgICByZWFkb25seSBzdHJlYW06IE5vZGVKUy5SZWFkYWJsZVN0cmVhbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBKdXN0IGEgcG9pbnRlciB0byBhIFVSTCB0aGF0IGNhbiBiZSBmZXRjaGVkIChwb3NzaWJseSByZW1vdGVseSlcbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFVSTFNvdXJjZSB7XG4gICAgICAgIHJlYWRvbmx5IHVybDogVVJMU3RyO1xuICAgIH1cblxuICAgIGV4cG9ydCB0eXBlIERhdGFTb3VyY2VMaXRlcmFsID0gRmlsZVNvdXJjZSB8IEJ1ZmZlclNvdXJjZSB8IFN0clNvdXJjZSB8IEJsb2JTb3VyY2UgfCBTdHJlYW1Tb3VyY2UgfCBVUkxTb3VyY2U7XG5cbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdXMgdG8gcGFzcyBhIGZ1bmN0aW9uIHRoYXQgdGhlbiByZXR1cm5zIHRoZSBEYXRhU3JjIHRvIGhhbmRsZS5cbiAgICAgKi9cbiAgICBleHBvcnQgdHlwZSBEYXRhU291cmNlTGl0ZXJhbEZhY3RvcnkgPSAoKSA9PiBQcm9taXNlPERhdGFTb3VyY2VMaXRlcmFsPjtcblxuICAgIGV4cG9ydCB0eXBlIERhdGFTb3VyY2UgPSBEYXRhU291cmNlTGl0ZXJhbCB8IERhdGFTb3VyY2VMaXRlcmFsRmFjdG9yeTtcblxuICAgIGV4cG9ydCBjbGFzcyBEYXRhU291cmNlcyB7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBhc3luYyB0b0xpdGVyYWwoc291cmNlOiBEYXRhU291cmNlKTogUHJvbWlzZTxEYXRhU291cmNlTGl0ZXJhbD4ge1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gd2UncmUgYWxyZWFkeSBhIGxpdGVyYWwgbm93IHNvIGp1c3QgcmV0dXJuIHRoYXQuXG4gICAgICAgICAgICByZXR1cm4gc291cmNlO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxufVxuXG5leHBvcnQgdHlwZSBCaW5hcnlGaWxlRGF0YSA9IEZpbGVIYW5kbGUgfCBCdWZmZXIgfCBzdHJpbmcgfCBCbG9iIHwgTm9kZUpTLlJlYWRhYmxlU3RyZWFtO1xuXG5leHBvcnQgdHlwZSBCaW5hcnlGaWxlRGF0YVR5cGUgPSAnZmlsZS1oYW5kbGUnIHwgJ2J1ZmZlcicgfCAnc3RyaW5nJyB8ICdibG9iJyB8ICdyZWFkYWJsZS1zdHJlYW0nO1xuXG5leHBvcnQgY2xhc3MgQmluYXJ5RmlsZURhdGFzIHtcblxuICAgcHVibGljIHN0YXRpYyB0b1R5cGUoZGF0YTogQmluYXJ5RmlsZURhdGEpOiBCaW5hcnlGaWxlRGF0YVR5cGUge1xuXG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiAnc3RyaW5nJztcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2J1ZmZlcic7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICAgICAgICAgIHJldHVybiAnYmxvYic7XG4gICAgICAgIH0gZWxzZSBpZiAoRmlsZUhhbmRsZXMuaXNGaWxlSGFuZGxlKGRhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2ZpbGUtaGFuZGxlJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAncmVhZGFibGUtc3RyZWFtJztcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0JpbmFyeUZpbGVEYXRhKGRhdGE6IGFueSk6IGJvb2xlYW4ge1xuXG4gICAgaWYgKCEgaXNQcmVzZW50KGRhdGEpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaXNQcmVzZW50KGRhdGEucGF0aCkpIHtcbiAgICAgICAgLy8gaWYgaXQgc2VlbXMgbGlrZSBhIEZpbGVIYW5kbGUgdGhlbiB1c2UgaXQgYXMgaXQgd2lsbCBiZSBzdXBwb3J0ZWRcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFja2VuZEZpbGVSZWZEYXRhIGV4dGVuZHMgQmFja2VuZEZpbGVSZWYge1xuICAgIHJlYWRvbmx5IGRhdGE6IEJpbmFyeUZpbGVEYXRhO1xufVxuXG4vLyBub2luc3BlY3Rpb24gVHNMaW50XG4vKipcbiAqIEFyYml0cmFyeSBzZXR0aW5ncyBmb3IgZmlsZXMgc3BlY2lmaWMgdG8gZWFjaCBzdG9yYWdlIGxheWVyLiAgRmlyZWJhc2UgdXNlc1xuICogdmlzaWJpbGl0eSBhbmQgdWlkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVNZXRhIHtcblxuICAgIC8vIFRPRE86IEkgc2hvdWxkIGFsc28gaW5jbHVkZSB0aGUgU3RvcmFnZVNldHRpbmdzIGZyb20gRmlyZWJhc2UgaGVyZSB0b1xuICAgIC8vIGdpdmUgaXQgYSBzZXQgb2Ygc3RhbmRhcmRpemVkIGZpZWxkcyBsaWtlIGNvbnRlbnRUeXBlIGFzIHNjcmVlbnNob3RzXG4gICAgLy8gbmVlZHMgdG8gYmUgYWRkZWQgd2l0aCBhIGZpbGUgdHlwZS5cbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG5cbn1cblxuLyoqXG4gKlxuICogQSBkYXRhc3RvcmUgdGhhdCBwcm92aWRlcyBldmVudHMgYWJvdXQgY2hhbmdlcyBiZWluZyBtYWRlIHRvIHRoZSBkYXRhc3RvcmUuXG4gKlxuICogVGhpcyBpbmNsdWRlcyB0aGUgZ3JhbnVsYXJpdHkgd2UgbmVlZCBmb3IgcmVwbGljYXRpbmcgdGhlIGRhdGEgdG8gYSBsb2NhbFxuICogZGF0YXN0b3JlIGJ5IGZldGNoaW5nIHRoZSBkYXRhIGFuZCB3cml0aW5nIGl0IGJhY2sgb3V0IG9uIHRoZSBtdXRhdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTeW5jaHJvbml6aW5nRGF0YXN0b3JlIGV4dGVuZHMgRGF0YXN0b3JlIHtcblxuICAgIC8qKlxuICAgICAqIExpc3RlbnMgZm9yIG11dGF0aW9ucyB0byBiaW5hcmllcy5cbiAgICAgKi9cbiAgICBhZGRGaWxlU3luY2hyb25pemF0aW9uRXZlbnRMaXN0ZW5lcihmaWxlU3luY2hyb25pemF0aW9uRXZlbnRMaXN0ZW5lcjogRmlsZVN5bmNocm9uaXphdGlvbkV2ZW50TGlzdGVuZXIpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogTGlzdGVucyBvbmx5IGZvciBuZXcgc3luY2hyb25pemVkIGRvY3VtZW50cyBhbmQgaWdub3JlcyBleGlzdGluZ1xuICAgICAqIGRvY3VtZW50cy4gIFRoaXMgYWxsb3dzIHVzIHRvIGZpbmQgcmVwbGljYXRlZCBkb2N1bWVudHMgYXMgdGhleVxuICAgICAqIGNoYW5nZS5cbiAgICAgKi9cbiAgICBhZGRTeW5jaHJvbml6YXRpb25FdmVudExpc3RlbmVyKHN5bmNocm9uaXphdGlvbkV2ZW50TGlzdGVuZXI6IFN5bmNocm9uaXphdGlvbkV2ZW50TGlzdGVuZXIpOiB2b2lkO1xuXG4gICAgLy8gLyoqXG4gICAgLy8gICogTWFyayB0aGF0IHdlJ3ZlIHByb3Blcmx5IHRyYW5zZmVycmVkIHRoZSBkaXNrIGRhdGFzdG9yZSBpbnRvIHRoZSBjbG91ZFxuICAgIC8vICAqIGRhdGFzdG9yZSBhbmQgbm93IHRoZSBjbG91ZCBkYXRhc3RvcmUgaXMgdGhlIHByaW1hcnkgc291cmNlLlxuICAgIC8vICAqXG4gICAgLy8gICovXG4gICAgLy8gbWFya01lcmdlZCh0cmFuc2ZlcnJlZDogYm9vbGVhbik6IFByb21pc2U8dm9pZD47XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTeW5jaHJvbml6YXRpb25FdmVudCBleHRlbmRzIERvY01ldGFTbmFwc2hvdEV2ZW50IHtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgZGF0YSBpbiB0aGlzIHN5bmNocm9uaXphdGlvbiBldmVudC4gIFdoZW4gdGhlXG4gICAgICogZGVzdCBpcyAnbG9jYWwnIHdlJ3JlIGNvcHlpbmcgZnJvbSB0aGUgY2xvdWQgdG8gbG9jYWwgYW5kIHdoZW4gaXQnc1xuICAgICAqICdjbG91ZCcgdGhlbiB3ZSdyZSBjb3B5aW5nIGZyb20gdGhlIGxvY2FsIHRvIHRoZSBjbG91ZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0OiBEYXRhc3RvcmVJRDtcblxufVxuXG5leHBvcnQgdHlwZSBTeW5jaHJvbml6YXRpb25FdmVudExpc3RlbmVyID0gKHN5bmNocm9uaXphdGlvbkV2ZW50OiBTeW5jaHJvbml6YXRpb25FdmVudCkgPT4gdm9pZDtcblxuLyoqXG4gKiBNdXRhdGlvbnMgb24gYmluYXJ5IGZpbGVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVTeW5jaHJvbml6YXRpb25FdmVudCB7XG5cbiAgICByZWFkb25seSBiYWNrZW5kOiBCYWNrZW5kO1xuXG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG4gICAgcmVhZG9ubHkgbXV0YXRpb25UeXBlOiBNdXRhdGlvblR5cGU7XG5cbn1cblxuZXhwb3J0IHR5cGUgRmlsZVN5bmNocm9uaXphdGlvbkV2ZW50TGlzdGVuZXIgPSAoZmlsZVN5bmNocm9uaXphdGlvbkV2ZW50OiBGaWxlU3luY2hyb25pemF0aW9uRXZlbnQpID0+IHZvaWQ7XG5cbi8qKlxuICogQ2FsbCB0aGUgbGlzdGVuZXIgZm9yIGV2ZXJ5IERvY01ldGFTbmFwc2hvdEV2ZW50IGFuZCBhd2FpdCBpdHMgcmVzdWx0cy4gIEl0J3NcbiAqIFZFUlkgaW1wb3J0YW50IHRvIGF3YWl0IHRoZSByZXN1bHRzIGhlcmUhXG4gKi9cbmV4cG9ydCB0eXBlIERvY01ldGFTbmFwc2hvdEV2ZW50TGlzdGVuZXIgPSAoZG9jTWV0YVNuYXBzaG90RXZlbnQ6IERvY01ldGFTbmFwc2hvdEV2ZW50KSA9PiBQcm9taXNlPHZvaWQ+O1xuXG5leHBvcnQgdHlwZSBFcnJvckxpc3RlbmVyID0gKGVycjogRXJyb3IpID0+IHZvaWQ7XG5cbi8qKlxuICogQSBEb2NNZXRhU25hcHNob3RFdmVudCBpcyBhIHNuYXBzaG90IG9mIHRoZSBEYXRhc3RvcmUgYmFzZWQgb24gdGhlIGN1cnJlbnRcbiAqIHN0YXRlIGFzIHdlbGwgYXMgZnV0dXJlIHNuYXBzaG90cyBhcyB0aGUgcmVtb3RlIHN0b3JlIGNoYW5nZXMuICBUaGlzIGluY2x1ZGVzXG4gKiBEb2NNZXRhIG11dGF0aW9ucyB3aGljaCBhbHNvIGluY2x1ZGUgYSBNdXRhdGlvblR5cGUgZm9yIHdoZXRoZXIgdGhlIGRvY3VtZW50XG4gKiB3YXMgY3JlYXRlZCwgdXBkYXRlZCwgb3IgZGVsZXRlZC5cbiAqXG4gKiBOb3RlIHRoYXQgYSBzbmFwc2hvdCBldmVudCBjYW4gaGF2ZSB6ZXJvIG9yIG1vcmUgZG9jTWV0YU11dGF0aW9ucy4gIFdlIHdpbGxcbiAqIGdlbmVyYXRlIHplcm8gRG9jTWV0YU11dGF0aW9ucyB3aGVuIHdlJ3JlIHVwZGF0aW5nIHByb2dyZXNzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIERvY01ldGFTbmFwc2hvdEV2ZW50IHtcblxuICAgIHJlYWRvbmx5IGRhdGFzdG9yZTogRGF0YXN0b3JlSUQ7XG5cbiAgICByZWFkb25seSBwcm9ncmVzczogUmVhZG9ubHk8U25hcHNob3RQcm9ncmVzcz47XG5cbiAgICByZWFkb25seSBjb25zaXN0ZW5jeTogRGF0YXN0b3JlQ29uc2lzdGVuY3k7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBtdXRhdGlvbnMgdGhhdCBoYXZlIGJlZW4gYXBwbGllZC4gIFdlIHJldHVybiBhcyBhbiBhcnJheSB0b1xuICAgICAqIGVuYWJsZSBwZXJmb3JtYW5jZSB1cGRhdGVzIHZpYSBiYXRjaGluZy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkb2NNZXRhTXV0YXRpb25zOiBSZWFkb25seUFycmF5PERvY01ldGFNdXRhdGlvbj47XG5cbiAgICByZWFkb25seSBiYXRjaD86IERvY01ldGFTbmFwc2hvdEJhdGNoO1xuXG59XG5cbmV4cG9ydCBjbGFzcyBEb2NNZXRhU25hcHNob3RFdmVudHMge1xuXG4gICAgcHVibGljIHN0YXRpYyBmb3JtYXQoZXY6IERvY01ldGFTbmFwc2hvdEV2ZW50KSB7XG5cbiAgICAgICAgbGV0IGJhdGNoID0gXCJOTyBCQVRDSFwiO1xuXG4gICAgICAgIGlmIChldi5iYXRjaCkge1xuICAgICAgICAgICAgYmF0Y2ggPSBgKGlkOiAke2V2LmJhdGNoIS5pZH0sIHRlcm1pbmF0ZWQ6ICR7ZXYuYmF0Y2ghLnRlcm1pbmF0ZWR9KWA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcm9ncmVzcyA9IGV2LnByb2dyZXNzLnByb2dyZXNzO1xuICAgICAgICBjb25zdCBuck11dGF0aW9ucyA9IGV2LmRvY01ldGFNdXRhdGlvbnMubGVuZ3RoO1xuXG4gICAgICAgIHJldHVybiBgJHtldi5kYXRhc3RvcmV9ICR7cHJvZ3Jlc3N9JSAoY29uc2lzdGVuY3k6ICR7ZXYuY29uc2lzdGVuY3l9LCBuciBtdXRhdGlvbnM6ICR7bnJNdXRhdGlvbnN9LCBiYXRjaDogJHtiYXRjaH0pYDtcblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgdG9Eb2NJbmZvcyhkb2NNZXRhU25hcHNob3RFdmVudDogRG9jTWV0YVNuYXBzaG90RXZlbnQpOlxuICAgICAgICBQcm9taXNlPFJlYWRvbmx5QXJyYXk8SURvY0luZm8+PiB7XG5cbiAgICAgICAgcmV0dXJuIEFzeW5jV29ya1F1ZXVlc1xuICAgICAgICAgICAgLmF3YWl0QXN5bmNGdW5jdGlvbnMoZG9jTWV0YVNuYXBzaG90RXZlbnQuZG9jTWV0YU11dGF0aW9ucy5tYXAoY3VycmVudCA9PiBjdXJyZW50LmRvY0luZm9Qcm92aWRlcikpO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyB0b1N5bmNEb2NzKGRvY01ldGFTbmFwc2hvdEV2ZW50OiBEb2NNZXRhU25hcHNob3RFdmVudCk6XG4gICAgICAgIFByb21pc2U8UmVhZG9ubHlBcnJheTxTeW5jRG9jPj4ge1xuXG4gICAgICAgIGNvbnN0IHR5cGVkQXN5bmNGdW5jdGlvbnMgPSBkb2NNZXRhU25hcHNob3RFdmVudC5kb2NNZXRhTXV0YXRpb25zLm1hcChkb2NNZXRhTXV0YXRpb24gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkb2NJbmZvID0gYXdhaXQgZG9jTWV0YU11dGF0aW9uLmRvY0luZm9Qcm92aWRlcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiBTeW5jRG9jcy5mcm9tRG9jSW5mbyhkb2NJbmZvLCBkb2NNZXRhTXV0YXRpb24ubXV0YXRpb25UeXBlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBhd2FpdCBBc3luY1dvcmtRdWV1ZXMuYXdhaXRBc3luY0Z1bmN0aW9ucyh0eXBlZEFzeW5jRnVuY3Rpb25zKTtcblxuICAgIH1cblxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgZGF0YSBhcm91bmQgYSBzcGVjaWZpYyBiYXRjaCBvZiBEb2NNZXRhTXV0YXRpb25zIHNvIHRoYXQgd2Uga25vd1xuICogd2hlbiB3ZSBoYXZlIGEgZmlyc3QgY29uc2lzdGVudCBzbmFwc2hvdC4gIFRoaXMgd2F5IHdlIGNhbiBnZXQgc3RyZWFtaW5nXG4gKiBldmVudHMgYnV0IGtub3cgd2hlbiBwYXJ0IG9mIHRoZSBzdHJlYW0gaGFzIHRlcm1pbmF0ZWQuXG4gKlxuICogVGhlIGJhdGNoIGlzIG9ubHkgcHJlc2VudCAodXN1YWxseSkgb24gZmlyc3QgbGV2ZWwgZGF0YXN0b3JlcyBub3QgYWdncmVnYXRlXG4gKiBkYXRhc3RvcmVzIHdoaWNoIG1pZ2h0IGJlIG1lcmdpbmcgc3RyZWFtcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEb2NNZXRhU25hcHNob3RCYXRjaCB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhpcyBiYXRjaC4gVGhlIGZpcnN0IGJhdGNoIGF0IGEgZ2l2ZW4gY29uc2lzdGVuY3kgbGV2ZWwgaXMgYVxuICAgICAqIGNvbXBsZXRlIHNuYXBzaG90IG9mIHRoZSB1bmRlcmx5aW5nIGRhdGFzdG9yZSBhbmQgYWxsIGRvY3MuICBZb3UgTUFZIG5vdFxuICAgICAqIHJlY2VpdmUgYSBiYXRjaCB3aXRoIGNvbnNpc3RlbmN5ICd3cml0dGVuJyBhbmQgb25seSByZWNlaXZlIG9uZSBmb3JcbiAgICAgKiAnY29tbWl0dGVkJyBzbyB5b3Ugc2hvdWxkIGZvY3VzIG9uIGNvbW1pdHRlZC4gQmF0Y2hlcyBhZnRlciB0aGUgZmlyc3QgYXJlXG4gICAgICogZGlmZmVyZW50aWFsIGFuZCBvbmx5IHJlcHJlc2VudCB1cGRhdGVzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlkOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHdlJ3ZlIHJlY2VpdmVkIGFsbCB0aGUgZXZlbnRzIGluIHRoaXMgYmF0Y2ggYW5kIHRoaXMgaXMgdGhlIGxhc3RcbiAgICAgKiBldmVudCB5b3Ugd2lsbCBzZWUgd2l0aCB0aGUgc2FtZSBiYXRjaCBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSB0ZXJtaW5hdGVkOiBib29sZWFuO1xuXG59XG5cbi8qKlxuICogVGhlIGNvbnNpc3RlbmN5IG9mIHRoZSB1bmRlcmx5aW5nIGRhdGEsIHdoZXRoZXIgaXQncyB3cml0dGVuIG9yIGNvbW1pdHRlZC5cbiAqXG4gKiAnd3JpdHRlbicgbWVhbnMgdGhhdCBpdCB3YXMgd3JpdHRlbiB0byBhIFdBTCBvciBhIGxvY2FsIGNhY2hlIGJ1dCBtYXkgbm90XG4gKiBiZSBmdWxseSBjb21taXR0ZWQgdG8gYSBjbG91ZCBzdG9yZSwgdG8gYWxsIHJlcGxpY2FzIG9mIGEgZGF0YWJhc2UsIGV0Yy5cbiAqXG4gKiAnY29tbWl0dGVkJyBtZWFucyB0aGF0IGl0J3MgZnVsbHkgY29tbWl0ZWQgYW5kIGNvbnNpc3RlbnQgd2l0aCB0aGUgY3VycmVudFxuICogc3RhdGUgb2YgYSBkYXRhYmFzZSBzeXN0ZW0uICBBIHJlYWQgdGhhdCBpcyAnY29tbWl0dGVkJyBtZWFucyBpdCBpcyBmdWxseVxuICogdXAgdG8gZGF0ZS5cbiAqXG4gKi9cbmV4cG9ydCB0eXBlIERhdGFzdG9yZUNvbnNpc3RlbmN5ID0gJ3dyaXR0ZW4nIHwgJ2NvbW1pdHRlZCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU25hcHNob3RQcm9ncmVzcyBleHRlbmRzIFJlYWRvbmx5PFByb2dyZXNzPiB7XG5cbn1cblxuLyoqXG4gKiBPbmx5IHVzZSBvbmUgcHJvdmlkZXIsIGVpdGhlciBkYXRhUHJvdmlkZXIsIGRvY01ldGFQcm92aWRlciwgb3JcbiAqIGRvY0luZm9Qcm92aWRlciwgd2hpY2hldmVyIGlzIHRoZSBtb3N0IGVmZmljaWVudCBhbmQgb25seSByZWFkIG9uY2UgaWRlYWxseS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEb2NNZXRhTXV0YXRpb24ge1xuXG4gICAgcmVhZG9ubHkgZmluZ2VycHJpbnQ6IHN0cmluZztcblxuICAgIHJlYWRvbmx5IG11dGF0aW9uVHlwZTogTXV0YXRpb25UeXBlO1xuXG4gICAgcmVhZG9ubHkgZG9jTWV0YUZpbGVSZWZQcm92aWRlcjogQXN5bmNQcm92aWRlcjxEb2NNZXRhRmlsZVJlZj47XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWNjZXNzIHRvIHRoZSB1bmRlcmx5aW5nIGRhdGEgb2YgdGhlIERvY01ldGEgdG8gZW5hYmxlIHVzIHRvXG4gICAgICogcmVhZC93cml0ZSBkaXJlY3RseSB0byB0aGUgRGF0YXN0b3JlIHdpdGhvdXQgbXV0YXRpbmcgYW55dGhpbmcuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGF0YVByb3ZpZGVyOiBBc3luY1Byb3ZpZGVyPHN0cmluZyB8IG51bGw+O1xuXG4gICAgcmVhZG9ubHkgZG9jTWV0YVByb3ZpZGVyOiBBc3luY1Byb3ZpZGVyPElEb2NNZXRhPjtcblxuICAgIHJlYWRvbmx5IGRvY0luZm9Qcm92aWRlcjogQXN5bmNQcm92aWRlcjxJRG9jSW5mbz47XG5cbn1cblxuZXhwb3J0IHR5cGUgTXV0YXRpb25UeXBlID0gJ2NyZWF0ZWQnIHwgJ3VwZGF0ZWQnIHwnZGVsZXRlZCc7XG5cbi8qKlxuICogVGhlIHJlc3VsdCBvZiBhbiBpbml0IG9wZXJhdGlvbiB3aGljaCBjb3VsZCBiZSBkaWZmZXJlbnQgZm9ybSBlYWNoIGRhdGFzdG9yZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbml0UmVzdWx0IHtcblxufVxuXG5cbi8qKlxuICogVGhlIHJlc3VsdCBvZiBhIGRlbGV0ZSgpIG9wZXJhdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZWxldGVSZXN1bHQge1xuXG59XG5cbi8qKlxuICogTGlzdGVucyB0byBkb2N1bWVudHMgaW4gdGhlIGxvY2FsIHJlcG9zaXRvcnkgb24gbG9hZC4gIFdlIHJlY2VpdmUgb25lIGV2ZW50XG4gKiBwZXIgZG9jdW1lbnQgaXQgZW50ZXJzIHRoZSByZXBvc2l0b3J5LiBPbmNlIG9uIHN0YXJ0dXAgaWYgaXQncyBhbHJlYWR5XG4gKiBwcmVzZW50IGFuZCB0aGVuIGFnYWluIGlmIGl0J3MgcmVwbGljYXRlZCBmcm9tIHRoZSBjbG91ZC5cbiAqL1xuZXhwb3J0IHR5cGUgSW5pdERvY01ldGFFdmVudExpc3RlbmVyID0gKGluaXREb2NNZXRhRXZlbnQ6IEluaXREb2NNZXRhRXZlbnQpID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5pdERvY01ldGFFdmVudCB7XG4gICAgcmVhZG9ubHkgZG9jTWV0YTogSURvY01ldGE7XG59XG5cbi8qKlxuICogSWYgdGhlIGBpbml0YCBtZXRob2QgaXMgZ2l2ZW4gYW4gSW5pdExvYWRMaXN0ZW5lciB0aGUgaW5pdCBmdW5jdGlvbiBnaXZlcyB0aGVcbiAqIGNhbGxlciBhIGNvcHkgb2YgZXZlcnkgRG9jTWV0YSBpbiB0aGUgZGF0YXN0b3JlIG9uIGluaXQuICBUaGlzIGNhbiBiZSBoZWxwXG4gKiBmdWxsIGluIGdlbmVyYWwgdG8gbG9hZCBhIFVJIG9yIGRhdGEgaW50byBtZW1vcnkgYnV0IHNpbmNlIGludGVybmFsbHkgdGhlXG4gKiBkYXRhc3RvcmUgbWlnaHQgQUxTTyBiZSBsb2FkaW5nIHRoZSBkb2NNZXRhIGZvciBpbnRlcm5hbCBvcGVyYXRpb25zXG4gKiAoY29uc2lzdGVuY3ksIHNuYXBzaG90cywgZXRjKSB0aGVuIHdlIGNhbiBzdXJmYWNlIHRoaXMgZGF0YSB0byB0aGUgdXNlclxuICogd2l0aG91dCBkb2luZyBhIGRvdWJsZSBpbml0LlxuICovXG5leHBvcnQgdHlwZSBJbml0TG9hZExpc3RlbmVyID0gKGRvY01ldGE6IElEb2NNZXRhKSA9PiB2b2lkO1xuXG4vKipcbiAqIFRoZSByZXN1bHQgb2YgYSBzbmFwc2hvdCBjYWxsIHdpdGggYW4gb3B0aW9uYWwgdW5zdWJzY3JpYmUgY2FsbGJhY2suXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU25hcHNob3RSZXN1bHQge1xuXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgdW5zdWJzY3JpYmVcbiAgICAgKi9cbiAgICByZWFkb25seSB1bnN1YnNjcmliZT86IFNuYXBzaG90VW5zdWJzY3JpYmVyO1xuXG59XG5cbi8qKlxuICogQSBmdW5jdGlvbiBmb3IgdW5zdWJzY3JpYmluZyB0byBmdXR1cmUgc25hcHNob3QgZXZlbnRzLlxuICovXG5leHBvcnQgdHlwZSBTbmFwc2hvdFVuc3Vic2NyaWJlciA9ICgpID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3luY0RvY01hcCB7XG4gICAgW2ZpbmdlcnByaW50OiBzdHJpbmddOiBTeW5jRG9jO1xuXG59XG5cbmV4cG9ydCBjbGFzcyBTeW5jRG9jTWFwcyB7XG5cbiAgICBwdWJsaWMgc3RhdGljIHB1dEFsbChzeW5jRG9jTWFwOiBTeW5jRG9jTWFwLCBzeW5jRG9jczogUmVhZG9ubHlBcnJheTxTeW5jRG9jPik6IHZvaWQge1xuXG4gICAgICAgIGZvciAoY29uc3Qgc3luY0RvYyBvZiBzeW5jRG9jcykge1xuICAgICAgICAgICAgc3luY0RvY01hcFtzeW5jRG9jLmZpbmdlcnByaW50XSA9IHN5bmNEb2M7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZnJvbUFycmF5KHN5bmNEb2NzOiBSZWFkb25seUFycmF5PFN5bmNEb2M+KTogU3luY0RvY01hcCB7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0OiBTeW5jRG9jTWFwID0ge307XG5cbiAgICAgICAgZm9yIChjb25zdCBzeW5jRG9jIG9mIHN5bmNEb2NzKSB7XG4gICAgICAgICAgICByZXN1bHRbc3luY0RvYy5maW5nZXJwcmludF0gPSBzeW5jRG9jO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIH1cblxufVxuXG4vKipcbiAqIEEgbGlnaHR3ZWlnaHQgZG9jIHJlZmVyZW5jZSB0byBzeW5jIGJldHdlZW4gdHdvIGRhdGFzb3VyY2VzLiAgQSBTeW5jRG9jIGlzIGFcbiAqIGZsaWdod2VpZ2h0IGFuZCBzaG91bGQgYmUga2VwdCBtaW5pbWFsbHkgY29tcGFjdCB0byBzYXZlIHNwYWNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN5bmNEb2Mge1xuXG4gICAgcmVhZG9ubHkgZmluZ2VycHJpbnQ6IHN0cmluZztcblxuICAgIHJlYWRvbmx5IG11dGF0aW9uVHlwZTogTXV0YXRpb25UeXBlO1xuXG4gICAgLyoqXG4gICAgICogV2hpbGUgdGhlIFVVSUQgaXMgb3B0aW9uYWwgaW4gcHJhY3RpY2UgaXQncyByZXF1aXJlZCBhbmQgYWxsIGRvY3Mgc2hvdWxkXG4gICAgICogaGF2ZSBhIFVVSUQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdXVpZD86IFVVSUQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGl0bGUgb2YgdGhlIGRvYyBmcm9tIHRoZSBEb2NJbmZvIGZvciBkZWJ1ZyBwdXJwb3Nlcy5cbiAgICAgKi9cbiAgICByZWFkb25seSB0aXRsZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJpbmFyeSBmaWxlcyByZWZlcmVuY2UgYnkgdGhpcyBkb2MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZmlsZXM6IFJlYWRvbmx5QXJyYXk8U3luY0ZpbGU+O1xuXG4gICAgcmVhZG9ubHkgZG9jTWV0YUZpbGVSZWY6IERvY01ldGFGaWxlUmVmO1xufVxuXG4vKipcbiAqIEEgbGlnaHR3ZWlnaHQgcmVmZXJlbmNlIHRvIGEgYmluYXJ5IGZpbGUgYXR0YWNoZWQgdG8gYSBTeW5jRG9jLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN5bmNGaWxlIGV4dGVuZHMgQmFja2VuZEZpbGVSZWYge1xuXG59XG5cbmV4cG9ydCBjbGFzcyBTeW5jRG9jcyB7XG5cbiAgICBwdWJsaWMgc3RhdGljIGZyb21Eb2NJbmZvKGRvY0luZm86IElEb2NJbmZvLCBtdXRhdGlvblR5cGU6IE11dGF0aW9uVHlwZSk6IFN5bmNEb2Mge1xuXG4gICAgICAgIGNvbnN0IGZpbGVzID0gQmFja2VuZEZpbGVSZWZzLnRvQmFja2VuZEZpbGVSZWZzKEVpdGhlci5vZlJpZ2h0KGRvY0luZm8pKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmluZ2VycHJpbnQ6IGRvY0luZm8uZmluZ2VycHJpbnQsXG4gICAgICAgICAgICB0aXRsZTogZG9jSW5mby50aXRsZSB8fCAndW50aXRsZWQnLFxuICAgICAgICAgICAgZG9jTWV0YUZpbGVSZWY6IERvY01ldGFGaWxlUmVmcy5jcmVhdGVGcm9tRG9jSW5mbyhkb2NJbmZvKSxcbiAgICAgICAgICAgIG11dGF0aW9uVHlwZSxcbiAgICAgICAgICAgIHV1aWQ6IGRvY0luZm8udXVpZCxcbiAgICAgICAgICAgIGZpbGVzXG4gICAgICAgIH07XG5cbiAgICB9XG5cbn1cblxuZXhwb3J0IHR5cGUgRGF0YXN0b3JlSUQgPSBzdHJpbmc7XG5cblxuZXhwb3J0IGludGVyZmFjZSBEYXRhc3RvcmVJbml0T3B0cyB7XG5cbiAgICByZWFkb25seSBub0luaXRpYWxTbmFwc2hvdD86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIHN5bmMgYW5kIGp1c3Qgc3RhcnQgdGhlIGRhdGFzdG9yZSBhcyBhIGNsaWVudCBmb3IgcmVhZC93cml0ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBub1N5bmM/OiBib29sZWFuO1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJlZnNQcm92aWRlciB7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGxhdGVzdCBjb3B5IG9mIHRoZSBwcmVmcyB3ZSdyZSB1c2luZ1xuICAgICAqXG4gICAgICogQHBhcmFtIG9uVXBkYXRlZCB3aGVuIHByb3ZpZGVkLCBjYWxsZWQgd2hlbiB3ZSBoYXZlIGFuIHVwZGF0ZWQgY29weSBvZiBvdXIgcHJlZnMuXG4gICAgICovXG4gICAgZ2V0KG9uVXBkYXRlZD86ICgpID0+IHZvaWQpOiBEYXRhc3RvcmVQcmVmcztcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFzdG9yZVByZWZzIHtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhY3R1YWwgUGVyc2lzdGVudFByZWZzIG9iamVjdCB0aGF0IHdlJ3JlIHVzaW5nLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByZWZzOiBQZXJzaXN0ZW50UHJlZnM7XG5cbiAgICAvKipcbiAgICAgKiBBbiB1bnN1YnNjcmliZSBmdW5jdGlvbiB1c2VkIHdoZW4gb25VcGRhdGVkIGlzIHByb3ZpZGVkIGZvciBsaXN0ZW5pbmcgdG8gbmV3IGV2ZW50cy5cbiAgICAgKi9cbiAgICByZWFkb25seSB1bnN1YnNjcmliZTogKCkgPT4gdm9pZDtcblxufVxuXG5leHBvcnQgdHlwZSBHcm91cElEU3RyID0gc3RyaW5nO1xuXG4vKipcbiAqXG4gKlxuICogVGhlIG5ldHdvcmsgbGF5ZXIgc3BlY2lmaWVzIHRoZSBhY2Nlc3MgdG8gYSByZXNvdXJjZSBiYXNlZCBvbiB0aGUgbmV0d29ya1xuICogdHlwZS4gIEJ5IGRlZmF1bHQgZWFjaCBkYXRhc3RvcmUgZmlndXJlcyBvdXQgdGhlIGlkZWFsIG5ldHdvcmsgbGF5ZXIgdG9cbiAqIHJldHVybiBmaWxlIHJlZmVyZW5jZXMgZnJvbSBidXQgYmFzZWQgb24gdGhlIGNhcGFiaWxpdGllcyB0aGUgY2FsbGVyXG4gKiBjYW4gc3BlY2lmeSBhIHNwZWNpZmljIGxheWVyLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgdHlwZXMgYXJlIHN1cHBvcnRlZDpcbiAqXG4gKiBsb2NhbDogQWNjZXNzIHZpYSB0aGUgbG9jYWwgZGlzay5cbiAqICAgIC0gcHJvczpcbiAqICAgICAgLSBWRVJZIGZhc3RcbiAqICAgIC0gY29uczpcbiAqICAgICAgLSBOb3Qgc2hhcmFibGUgd2l0aCBvdGhlcnNcbiAqXG4gKiB3ZWI6IEFjY2VzcyBpcyBhdmFpbGFibGUgdmlhIHRoZSBwdWJsaWMgd2ViLlxuICogICAgLSBwcm9zOlxuICogICAgICAgLSBzaGFyaW5nIHdvcmtzXG4gKiAgICAgICAtIGFjY2VzcyBhY3Jvc3MgbXVsdGlwbGUgZGV2aWNlc1xuICogICAgLSBjb25zOlxuICogICAgICAgLSBtYXkgbm90IGJlIHVzYWJsZSBmb3IgY2VydGFpbiBwZW9wbGUgKGNsYXNzaWZpZWQgaW5mb3JtYXRpb24sIGV0QykuXG4gKlxuICovXG5leHBvcnQgdHlwZSBOZXR3b3JrTGF5ZXIgPSAnbG9jYWwnIHwgJ3dlYic7XG5cbmV4cG9ydCBjbGFzcyBOZXR3b3JrTGF5ZXJzIHtcblxuICAgIHB1YmxpYyBzdGF0aWMgTE9DQUwgPSBuZXcgU2V0PE5ldHdvcmtMYXllcj4oWydsb2NhbCddKTtcblxuICAgIHB1YmxpYyBzdGF0aWMgTE9DQUxfQU5EX1dFQiA9IG5ldyBTZXQ8TmV0d29ya0xheWVyPihbJ2xvY2FsJywgJ3dlYiddKTtcblxuICAgIHB1YmxpYyBzdGF0aWMgV0VCID0gbmV3IFNldDxOZXR3b3JrTGF5ZXI+KFsnd2ViJ10pO1xuXG59XG5cbiJdfQ==