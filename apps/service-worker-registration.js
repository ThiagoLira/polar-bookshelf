"use strict";
function isElectron() {
    return window && 'process' in window;
}
if ('serviceWorker' in navigator && !isElectron()) {
    window.addEventListener('load', function () {
        navigator.serviceWorker.register('/service-worker.js').then(function (reg) {
            reg.onupdatefound = function () {
                console.log("Service worker update found");
                const installingWorker = reg.installing;
                if (installingWorker) {
                    installingWorker.onstatechange = function () {
                        switch (installingWorker.state) {
                            case 'installed':
                                if (navigator.serviceWorker.controller) {
                                    console.log('New or updated content is available.');
                                }
                                else {
                                    console.log('Content is now available offline!');
                                }
                                break;
                            case 'redundant':
                                console.error('The installing service worker became redundant.');
                                break;
                        }
                    };
                }
            };
        }).catch(function (e) {
            console.error('Error during service worker registration:', e);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS13b3JrZXItcmVnaXN0cmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VydmljZS13b3JrZXItcmVnaXN0cmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxTQUFTLFVBQVU7SUFDZixPQUFPLE1BQU0sSUFBSSxTQUFTLElBQUksTUFBTSxDQUFDO0FBQ3pDLENBQUM7QUFFRCxJQUFJLGVBQWUsSUFBSSxTQUFTLElBQUksQ0FBRSxVQUFVLEVBQUUsRUFBRTtJQUloRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFO1FBSzVCLFNBQVMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsR0FBRztZQUVwRSxHQUFHLENBQUMsYUFBYSxHQUFHO2dCQUVoQixPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUM7Z0JBSTNDLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQztnQkFFeEMsSUFBSSxnQkFBZ0IsRUFBRTtvQkFFbEIsZ0JBQWdCLENBQUMsYUFBYSxHQUFHO3dCQUM3QixRQUFRLGdCQUFnQixDQUFDLEtBQUssRUFBRTs0QkFDNUIsS0FBSyxXQUFXO2dDQUNaLElBQUksU0FBUyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUU7b0NBS3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUMsQ0FBQztpQ0FDdkQ7cUNBQU07b0NBR0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO2lDQUNwRDtnQ0FDRCxNQUFNOzRCQUVWLEtBQUssV0FBVztnQ0FDWixPQUFPLENBQUMsS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7Z0NBQ2pFLE1BQU07eUJBQ2I7b0JBQ0wsQ0FBQyxDQUFDO2lCQUVMO1lBRUwsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVMsQ0FBQztZQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsMkNBQTJDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztDQUNOIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmZ1bmN0aW9uIGlzRWxlY3Ryb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdyAmJiAncHJvY2VzcycgaW4gd2luZG93O1xufVxuXG5pZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvciAmJiAhIGlzRWxlY3Ryb24oKSkge1xuICAgIC8vIERlbGF5IHJlZ2lzdHJhdGlvbiB1bnRpbCBhZnRlciB0aGUgcGFnZSBoYXMgbG9hZGVkLCB0byBlbnN1cmUgdGhhdCBvdXJcbiAgICAvLyBwcmVjYWNoaW5nIHJlcXVlc3RzIGRvbid0IGRlZ3JhZGUgdGhlIGZpcnN0IHZpc2l0IGV4cGVyaWVuY2UuXG4gICAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi9mdW5kYW1lbnRhbHMvaW5zdGFudC1hbmQtb2ZmbGluZS9zZXJ2aWNlLXdvcmtlci9yZWdpc3RyYXRpb25cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBZb3VyIHNlcnZpY2Utd29ya2VyLmpzICptdXN0KiBiZSBsb2NhdGVkIGF0IHRoZSB0b3AtbGV2ZWwgZGlyZWN0b3J5IHJlbGF0aXZlIHRvIHlvdXIgc2l0ZS5cbiAgICAgICAgLy8gSXQgd29uJ3QgYmUgYWJsZSB0byBjb250cm9sIHBhZ2VzIHVubGVzcyBpdCdzIGxvY2F0ZWQgYXQgdGhlIHNhbWUgbGV2ZWwgb3IgaGlnaGVyIHRoYW4gdGhlbS5cbiAgICAgICAgLy8gKkRvbid0KiByZWdpc3RlciBzZXJ2aWNlIHdvcmtlciBmaWxlIGluLCBlLmcuLCBhIHNjcmlwdHMvIHN1Yi1kaXJlY3RvcnkhXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vc2xpZ2h0bHlvZmYvU2VydmljZVdvcmtlci9pc3N1ZXMvNDY4XG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCcvc2VydmljZS13b3JrZXIuanMnKS50aGVuKGZ1bmN0aW9uKHJlZykge1xuICAgICAgICAgICAgLy8gdXBkYXRlZm91bmQgaXMgZmlyZWQgaWYgc2VydmljZS13b3JrZXIuanMgY2hhbmdlcy5cbiAgICAgICAgICAgIHJlZy5vbnVwZGF0ZWZvdW5kID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNlcnZpY2Ugd29ya2VyIHVwZGF0ZSBmb3VuZFwiKTtcblxuICAgICAgICAgICAgICAgIC8vIFRoZSB1cGRhdGVmb3VuZCBldmVudCBpbXBsaWVzIHRoYXQgcmVnLmluc3RhbGxpbmcgaXMgc2V0OyBzZWVcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL3czYy5naXRodWIuaW8vU2VydmljZVdvcmtlci8jc2VydmljZS13b3JrZXItcmVnaXN0cmF0aW9uLXVwZGF0ZWZvdW5kLWV2ZW50XG4gICAgICAgICAgICAgICAgY29uc3QgaW5zdGFsbGluZ1dvcmtlciA9IHJlZy5pbnN0YWxsaW5nO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbGxpbmdXb3JrZXIpIHtcblxuICAgICAgICAgICAgICAgICAgICBpbnN0YWxsaW5nV29ya2VyLm9uc3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaW5zdGFsbGluZ1dvcmtlci5zdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2luc3RhbGxlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgb2xkIGNvbnRlbnQgd2lsbCBoYXZlIGJlZW4gcHVyZ2VkIGFuZCB0aGUgZnJlc2ggY29udGVudCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoYXZlIGJlZW4gYWRkZWQgdG8gdGhlIGNhY2hlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXQncyB0aGUgcGVyZmVjdCB0aW1lIHRvIGRpc3BsYXkgYSBcIk5ldyBjb250ZW50IGlzIGF2YWlsYWJsZTsgcGxlYXNlIHJlZnJlc2guXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1lc3NhZ2UgaW4gdGhlIHBhZ2UncyBpbnRlcmZhY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTmV3IG9yIHVwZGF0ZWQgY29udGVudCBpcyBhdmFpbGFibGUuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCBldmVyeXRoaW5nIGhhcyBiZWVuIHByZWNhY2hlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEl0J3MgdGhlIHBlcmZlY3QgdGltZSB0byBkaXNwbGF5IGEgXCJDb250ZW50IGlzIGNhY2hlZCBmb3Igb2ZmbGluZSB1c2UuXCIgbWVzc2FnZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb250ZW50IGlzIG5vdyBhdmFpbGFibGUgb2ZmbGluZSEnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JlZHVuZGFudCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoZSBpbnN0YWxsaW5nIHNlcnZpY2Ugd29ya2VyIGJlY2FtZSByZWR1bmRhbnQuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkdXJpbmcgc2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uOicsIGUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbiJdfQ==