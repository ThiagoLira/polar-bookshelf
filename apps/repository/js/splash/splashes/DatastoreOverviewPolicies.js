"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TimeDurations_1 = require("polar-shared/src/util/TimeDurations");
const ISODateTimeStrings_1 = require("polar-shared/src/metadata/ISODateTimeStrings");
const Logger_1 = require("polar-shared/src/logger/Logger");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const log = Logger_1.Logger.create();
class DatastoreOverviewPolicies {
    static isLevel(level, datastoreOverview) {
        Preconditions_1.Preconditions.assertPresent(datastoreOverview, 'datastoreOverview');
        switch (level) {
            case 'active':
                return this.isActive(datastoreOverview);
            case 'premium':
                return this.isPremium(datastoreOverview);
            case '24h':
                return this.is24H(datastoreOverview);
        }
    }
    static is24H(datastoreOverview) {
        if (!datastoreOverview.created) {
            return false;
        }
        const since = ISODateTimeStrings_1.ISODateTimeStrings.parse(datastoreOverview.created);
        return TimeDurations_1.TimeDurations.hasElapsed(since, '1d');
    }
    static isActive(datastoreOverview) {
        if (!datastoreOverview.created) {
            return false;
        }
        const since = ISODateTimeStrings_1.ISODateTimeStrings.parse(datastoreOverview.created);
        return TimeDurations_1.TimeDurations.hasElapsed(since, '1w') && datastoreOverview.nrDocs > 5;
    }
    static isPremium(datastoreOverview) {
        if (!datastoreOverview.created) {
            log.debug("No created time in datastore so unable to determine premium level");
            return false;
        }
        const since = ISODateTimeStrings_1.ISODateTimeStrings.parse(datastoreOverview.created);
        const elapsed = TimeDurations_1.TimeDurations.hasElapsed(since, '2w');
        const hasMinDocs = datastoreOverview.nrDocs > 15;
        const result = elapsed && hasMinDocs;
        log.info(`since: ${since}, expired: ${elapsed}, hasMinDocs: ${hasMinDocs}, result: ${result}`);
        return result;
    }
}
exports.DatastoreOverviewPolicies = DatastoreOverviewPolicies;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YXN0b3JlT3ZlcnZpZXdQb2xpY2llcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkRhdGFzdG9yZU92ZXJ2aWV3UG9saWNpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx1RUFBa0U7QUFDbEUscUZBQWdGO0FBQ2hGLDJEQUFzRDtBQUN0RCxrRUFBNkQ7QUFFN0QsTUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBSTVCLE1BQWEseUJBQXlCO0lBRTNCLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBZ0IsRUFBRSxpQkFBb0M7UUFFeEUsNkJBQWEsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUVwRSxRQUFRLEtBQUssRUFBRTtZQUVYLEtBQUssUUFBUTtnQkFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUU1QyxLQUFLLFNBQVM7Z0JBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFFN0MsS0FBSyxLQUFLO2dCQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBRTVDO0lBRUwsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUJBQW9DO1FBRXBELElBQUksQ0FBRSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUU7WUFDN0IsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxNQUFNLEtBQUssR0FBRyx1Q0FBa0IsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEUsT0FBTyw2QkFBYSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFakQsQ0FBQztJQUtNLE1BQU0sQ0FBQyxRQUFRLENBQUMsaUJBQW9DO1FBRXZELElBQUksQ0FBRSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUU7WUFDN0IsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxNQUFNLEtBQUssR0FBRyx1Q0FBa0IsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEUsT0FBTyw2QkFBYSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksaUJBQWlCLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUVqRixDQUFDO0lBTU0sTUFBTSxDQUFDLFNBQVMsQ0FBQyxpQkFBb0M7UUFFeEQsSUFBSSxDQUFFLGlCQUFpQixDQUFDLE9BQU8sRUFBRTtZQUM3QixHQUFHLENBQUMsS0FBSyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7WUFDL0UsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxNQUFNLEtBQUssR0FBRyx1Q0FBa0IsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEUsTUFBTSxPQUFPLEdBQUcsNkJBQWEsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RELE1BQU0sVUFBVSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFakQsTUFBTSxNQUFNLEdBQUcsT0FBTyxJQUFJLFVBQVUsQ0FBQztRQUVyQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxjQUFjLE9BQU8saUJBQWlCLFVBQVUsYUFBYSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBRS9GLE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7Q0FFSjtBQXJFRCw4REFxRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RhdGFzdG9yZU92ZXJ2aWV3fSBmcm9tICcuLi8uLi8uLi8uLi8uLi93ZWIvanMvZGF0YXN0b3JlL0RhdGFzdG9yZSc7XG5pbXBvcnQge1RpbWVEdXJhdGlvbnN9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvdXRpbC9UaW1lRHVyYXRpb25zJztcbmltcG9ydCB7SVNPRGF0ZVRpbWVTdHJpbmdzfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL21ldGFkYXRhL0lTT0RhdGVUaW1lU3RyaW5ncyc7XG5pbXBvcnQge0xvZ2dlcn0gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9sb2dnZXIvTG9nZ2VyJztcbmltcG9ydCB7UHJlY29uZGl0aW9uc30gZnJvbSAncG9sYXItc2hhcmVkL3NyYy9QcmVjb25kaXRpb25zJztcblxuY29uc3QgbG9nID0gTG9nZ2VyLmNyZWF0ZSgpO1xuXG4vLyBUT0RPOiB3ZSBuZWVkIGV2ZW50cyBmb3IgdGhlc2Ugb24gc3RhcnR1cC4uLiBpdCB3b3VsZCBiZSBuaWNlIHRvIHNlZSBob3cgbWFueVxuLy8gdXNlcnMgd2VyZSBvbmJvYXJkZWRcbmV4cG9ydCBjbGFzcyBEYXRhc3RvcmVPdmVydmlld1BvbGljaWVzIHtcblxuICAgIHB1YmxpYyBzdGF0aWMgaXNMZXZlbChsZXZlbDogVXNlckxldmVsLCBkYXRhc3RvcmVPdmVydmlldzogRGF0YXN0b3JlT3ZlcnZpZXcpIHtcblxuICAgICAgICBQcmVjb25kaXRpb25zLmFzc2VydFByZXNlbnQoZGF0YXN0b3JlT3ZlcnZpZXcsICdkYXRhc3RvcmVPdmVydmlldycpO1xuXG4gICAgICAgIHN3aXRjaCAobGV2ZWwpIHtcblxuICAgICAgICAgICAgY2FzZSAnYWN0aXZlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc0FjdGl2ZShkYXRhc3RvcmVPdmVydmlldyk7XG5cbiAgICAgICAgICAgIGNhc2UgJ3ByZW1pdW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzUHJlbWl1bShkYXRhc3RvcmVPdmVydmlldyk7XG5cbiAgICAgICAgICAgIGNhc2UgJzI0aCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXMyNEgoZGF0YXN0b3JlT3ZlcnZpZXcpO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgaXMyNEgoZGF0YXN0b3JlT3ZlcnZpZXc6IERhdGFzdG9yZU92ZXJ2aWV3KSB7XG5cbiAgICAgICAgaWYgKCEgZGF0YXN0b3JlT3ZlcnZpZXcuY3JlYXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2luY2UgPSBJU09EYXRlVGltZVN0cmluZ3MucGFyc2UoZGF0YXN0b3JlT3ZlcnZpZXcuY3JlYXRlZCk7XG4gICAgICAgIHJldHVybiBUaW1lRHVyYXRpb25zLmhhc0VsYXBzZWQoc2luY2UsICcxZCcpO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHVzZXIgaGFzIG9uYm9hcmRlZCBhbmQgaGFzIGJlZW4gdXNpbmcgdGhlIGFwcCBmb3IgYSB3aGlsZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGlzQWN0aXZlKGRhdGFzdG9yZU92ZXJ2aWV3OiBEYXRhc3RvcmVPdmVydmlldykge1xuXG4gICAgICAgIGlmICghIGRhdGFzdG9yZU92ZXJ2aWV3LmNyZWF0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNpbmNlID0gSVNPRGF0ZVRpbWVTdHJpbmdzLnBhcnNlKGRhdGFzdG9yZU92ZXJ2aWV3LmNyZWF0ZWQpO1xuICAgICAgICByZXR1cm4gVGltZUR1cmF0aW9ucy5oYXNFbGFwc2VkKHNpbmNlLCAnMXcnKSAmJiBkYXRhc3RvcmVPdmVydmlldy5uckRvY3MgPiA1O1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHVzZXIgaXMgYXQgYSBwcmVtaXVtIGxldmVsIGJ1dCBtYXkgb3IgbWF5IG5vdCBoYXZlIGNvbnZlcnRlZCB0b1xuICAgICAqIHByZW1pdW0uXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBpc1ByZW1pdW0oZGF0YXN0b3JlT3ZlcnZpZXc6IERhdGFzdG9yZU92ZXJ2aWV3KSB7XG5cbiAgICAgICAgaWYgKCEgZGF0YXN0b3JlT3ZlcnZpZXcuY3JlYXRlZCkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKFwiTm8gY3JlYXRlZCB0aW1lIGluIGRhdGFzdG9yZSBzbyB1bmFibGUgdG8gZGV0ZXJtaW5lIHByZW1pdW0gbGV2ZWxcIik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzaW5jZSA9IElTT0RhdGVUaW1lU3RyaW5ncy5wYXJzZShkYXRhc3RvcmVPdmVydmlldy5jcmVhdGVkKTtcbiAgICAgICAgY29uc3QgZWxhcHNlZCA9IFRpbWVEdXJhdGlvbnMuaGFzRWxhcHNlZChzaW5jZSwgJzJ3Jyk7XG4gICAgICAgIGNvbnN0IGhhc01pbkRvY3MgPSBkYXRhc3RvcmVPdmVydmlldy5uckRvY3MgPiAxNTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBlbGFwc2VkICYmIGhhc01pbkRvY3M7XG5cbiAgICAgICAgbG9nLmluZm8oYHNpbmNlOiAke3NpbmNlfSwgZXhwaXJlZDogJHtlbGFwc2VkfSwgaGFzTWluRG9jczogJHtoYXNNaW5Eb2NzfSwgcmVzdWx0OiAke3Jlc3VsdH1gKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgfVxuXG59XG5cbmV4cG9ydCB0eXBlIFVzZXJMZXZlbCA9ICcyNGgnIHwgJ2FjdGl2ZScgfCAncHJlbWl1bSc7XG4iXX0=