"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const reactstrap_1 = require("reactstrap");
const DocDropdownItems_1 = require("./DocDropdownItems");
class DocDropdown extends React.Component {
    constructor(props, context) {
        super(props, context);
    }
    render() {
        return (React.createElement("div", { className: "doc-dropdown-parent" },
            React.createElement(reactstrap_1.UncontrolledDropdown, { id: this.props.id, size: "sm" },
                React.createElement(reactstrap_1.DropdownToggle, { color: "link", className: "doc-dropdown-button btn text-muted pl-1 pr-1", id: this.props.id + '-dropdown-toggle' },
                    React.createElement("i", { className: "fas fa-ellipsis-h" })),
                React.createElement(reactstrap_1.DropdownMenu, { className: "shadow", right: true },
                    React.createElement(DocDropdownItems_1.DocDropdownItems, { toggle: true, filters: this.props.filters, getSelected: this.props.getSelected, onDelete: this.props.onDelete, onSetTitle: this.props.onSetTitle, onDocumentLoadRequested: this.props.onDocumentLoadRequested, onRemoveFromFolder: this.props.onRemoveFromFolder })))));
    }
}
exports.DocDropdown = DocDropdown;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jRHJvcGRvd24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEb2NEcm9wZG93bi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsNkNBQStCO0FBRS9CLDJDQUE4RTtBQUM5RSx5REFBZ0Y7QUFHaEYsTUFBYSxXQUFZLFNBQVEsS0FBSyxDQUFDLFNBQXlCO0lBRTVELFlBQVksS0FBYSxFQUFFLE9BQVk7UUFDbkMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU0sTUFBTTtRQUVULE9BQU8sQ0FFSCw2QkFBSyxTQUFTLEVBQUMscUJBQXFCO1lBRWhDLG9CQUFDLGlDQUFvQixJQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFDakIsSUFBSSxFQUFDLElBQUk7Z0JBRTNCLG9CQUFDLDJCQUFjLElBQUMsS0FBSyxFQUFDLE1BQU0sRUFDWixTQUFTLEVBQUMsOENBQThDLEVBQ3hELEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxrQkFBa0I7b0JBRWxELDJCQUFHLFNBQVMsRUFBQyxtQkFBbUIsR0FBRSxDQUVyQjtnQkFFakIsb0JBQUMseUJBQVksSUFBQyxTQUFTLEVBQUMsUUFBUSxFQUFDLEtBQUs7b0JBQ2xDLG9CQUFDLG1DQUFnQixJQUFDLE1BQU0sRUFBRSxJQUFJLEVBQ1osT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUMzQixXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQ25DLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFDN0IsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUNqQyx1QkFBdUIsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUMzRCxrQkFBa0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixHQUFHLENBQzNELENBRUksQ0FFckIsQ0FDVCxDQUFDO0lBRU4sQ0FBQztDQUVKO0FBeENELGtDQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7UmVwb0RvY0luZm99IGZyb20gJy4vUmVwb0RvY0luZm8nO1xuaW1wb3J0IHtEcm9wZG93bk1lbnUsIERyb3Bkb3duVG9nZ2xlLCBVbmNvbnRyb2xsZWREcm9wZG93bn0gZnJvbSAncmVhY3RzdHJhcCc7XG5pbXBvcnQge0RvY0Ryb3Bkb3duSXRlbXMsIE9uUmVtb3ZlRnJvbUZvbGRlckNhbGxiYWNrfSBmcm9tICcuL0RvY0Ryb3Bkb3duSXRlbXMnO1xuaW1wb3J0IHtGaWx0ZXJzfSBmcm9tIFwiLi9kb2NfcmVwby9Eb2NSZXBvRmlsdGVyc1wiO1xuXG5leHBvcnQgY2xhc3MgRG9jRHJvcGRvd24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMsIGNvbnRleHQ6IGFueSkge1xuICAgICAgICBzdXBlcihwcm9wcywgY29udGV4dCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpIHtcblxuICAgICAgICByZXR1cm4gKFxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRvYy1kcm9wZG93bi1wYXJlbnRcIj5cblxuICAgICAgICAgICAgICAgIDxVbmNvbnRyb2xsZWREcm9wZG93biBpZD17dGhpcy5wcm9wcy5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duVG9nZ2xlIGNvbG9yPVwibGlua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkb2MtZHJvcGRvd24tYnV0dG9uIGJ0biB0ZXh0LW11dGVkIHBsLTEgcHItMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5pZCArICctZHJvcGRvd24tdG9nZ2xlJ30+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhcyBmYS1lbGxpcHNpcy1oXCIvPlxuXG4gICAgICAgICAgICAgICAgICAgIDwvRHJvcGRvd25Ub2dnbGU+XG5cbiAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duTWVudSBjbGFzc05hbWU9XCJzaGFkb3dcIiByaWdodD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxEb2NEcm9wZG93bkl0ZW1zIHRvZ2dsZT17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnM9e3RoaXMucHJvcHMuZmlsdGVyc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFNlbGVjdGVkPXt0aGlzLnByb3BzLmdldFNlbGVjdGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EZWxldGU9e3RoaXMucHJvcHMub25EZWxldGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblNldFRpdGxlPXt0aGlzLnByb3BzLm9uU2V0VGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRvY3VtZW50TG9hZFJlcXVlc3RlZD17dGhpcy5wcm9wcy5vbkRvY3VtZW50TG9hZFJlcXVlc3RlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVtb3ZlRnJvbUZvbGRlcj17dGhpcy5wcm9wcy5vblJlbW92ZUZyb21Gb2xkZXJ9Lz5cbiAgICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bk1lbnU+XG5cbiAgICAgICAgICAgICAgICA8L1VuY29udHJvbGxlZERyb3Bkb3duPlxuXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcblxuICAgIH1cblxufVxuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICByZWFkb25seSBpZDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGZpbHRlcnM6IEZpbHRlcnM7XG4gICAgcmVhZG9ubHkgZ2V0U2VsZWN0ZWQ6ICgpID0+IFJlYWRvbmx5QXJyYXk8UmVwb0RvY0luZm8+O1xuICAgIHJlYWRvbmx5IG9uRGVsZXRlOiAocmVwb0RvY0luZm9zOiBSZWFkb25seUFycmF5PFJlcG9Eb2NJbmZvPikgPT4gdm9pZDtcbiAgICByZWFkb25seSBvblNldFRpdGxlOiAocmVwb0RvY0luZm86IFJlcG9Eb2NJbmZvLCB0aXRsZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgIHJlYWRvbmx5IG9uRG9jdW1lbnRMb2FkUmVxdWVzdGVkOiAocmVwb0RvY0luZm86IFJlcG9Eb2NJbmZvKSA9PiB2b2lkO1xuICAgIHJlYWRvbmx5IG9uUmVtb3ZlRnJvbUZvbGRlcjogT25SZW1vdmVGcm9tRm9sZGVyQ2FsbGJhY2s7XG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuXG5cbn1cbiJdfQ==