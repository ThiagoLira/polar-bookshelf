"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("polar-shared/src/logger/Logger");
const Card_1 = __importDefault(require("reactstrap/lib/Card"));
const CardHeader_1 = __importDefault(require("reactstrap/lib/CardHeader"));
const CardBody_1 = __importDefault(require("reactstrap/lib/CardBody"));
const log = Logger_1.Logger.create();
class MailingListCard extends React.Component {
    constructor(props, context) {
        super(props, context);
    }
    render() {
        return (React.createElement(Card_1.default, null,
            React.createElement(CardHeader_1.default, null,
                React.createElement("b", null, "Mailing List")),
            React.createElement(CardBody_1.default, null,
                React.createElement("div", { className: "text-center" },
                    React.createElement("form", { action: "https://spinn3r.us10.list-manage.com/subscribe/post?u=0b1739813ebf118e92faf8fc3&id=ad3d53e837", method: "post", id: "mc-embedded-subscribe-form", name: "mc-embedded-subscribe-form", className: "validate", target: "_blank", noValidate: true },
                        React.createElement("div", { id: "mc_embed_signup", className: "input-group mt-4 mb-4" },
                            React.createElement("input", { name: "EMAIL", type: "text", className: "required email form-control mce_inline_error", placeholder: "Enter your email address", "aria-required": "true", "aria-invalid": "true" }),
                            React.createElement("div", { style: { position: 'absolute', left: '-5000px' }, "aria-hidden": "true" },
                                React.createElement("input", { type: "text", name: "b_0b1739813ebf118e92faf8fc3_ad3d53e837", tabIndex: -1, value: "" })),
                            React.createElement("span", { className: "input-group-btn" },
                                React.createElement("button", { name: "subscribe", type: "submit", id: "mc-embedded-subscribe", className: "btn" }, "Join Newsletter"))),
                        React.createElement("p", { id: "mce-responses", className: "clear" }),
                        React.createElement("div", { className: "response", id: "mce-error-response", style: { display: 'none' } }),
                        React.createElement("div", { className: "response", id: "mce-success-response", style: { display: 'none' } }),
                        React.createElement("p", null),
                        React.createElement("p", { className: "text-h5 text-muted" },
                            React.createElement("em", null, "* Your email address is safe with us. We never share your email address.")))))));
    }
}
exports.default = MailingListCard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbGluZ0xpc3RDYXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTWFpbGluZ0xpc3RDYXJkLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBK0I7QUFDL0IsMkRBQXNEO0FBQ3RELCtEQUF1QztBQUN2QywyRUFBbUQ7QUFDbkQsdUVBQStDO0FBRS9DLE1BQU0sR0FBRyxHQUFHLGVBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUU1QixNQUFxQixlQUFnQixTQUFRLEtBQUssQ0FBQyxTQUFtQjtJQUVsRSxZQUFZLEtBQVUsRUFBRSxPQUFZO1FBQ2hDLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFMUIsQ0FBQztJQUVNLE1BQU07UUFFVCxPQUFPLENBRUgsb0JBQUMsY0FBSTtZQUNELG9CQUFDLG9CQUFVO2dCQUFDLDhDQUFtQixDQUFhO1lBQzVDLG9CQUFDLGtCQUFRO2dCQUVMLDZCQUFLLFNBQVMsRUFBQyxhQUFhO29CQUV4Qiw4QkFBTSxNQUFNLEVBQUMsK0ZBQW1HLEVBQUMsTUFBTSxFQUFDLE1BQU0sRUFDeEgsRUFBRSxFQUFDLDRCQUE0QixFQUMvQixJQUFJLEVBQUMsNEJBQTRCLEVBQ2pDLFNBQVMsRUFBQyxVQUFVLEVBQ3BCLE1BQU0sRUFBQyxRQUFRLEVBQ2YsVUFBVTt3QkFFWiw2QkFBSyxFQUFFLEVBQUMsaUJBQWlCLEVBQUMsU0FBUyxFQUFDLHVCQUF1Qjs0QkFFbkQsK0JBQU8sSUFBSSxFQUFDLE9BQU8sRUFDWixJQUFJLEVBQUMsTUFBTSxFQUNYLFNBQVMsRUFBQyw4Q0FBOEMsRUFDeEQsV0FBVyxFQUFDLDBCQUEwQixtQkFDeEIsTUFBTSxrQkFBYyxNQUFNLEdBQUU7NEJBRWpELDZCQUFLLEtBQUssRUFBRSxFQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBQyxpQkFBYyxNQUFNO2dDQUNuRSwrQkFBTyxJQUFJLEVBQUMsTUFBTSxFQUNYLElBQUksRUFBQyx3Q0FBd0MsRUFDN0MsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBQyxFQUFFLEdBQUUsQ0FDN0I7NEJBRU4sOEJBQU0sU0FBUyxFQUFDLGlCQUFpQjtnQ0FDN0IsZ0NBQVEsSUFBSSxFQUFDLFdBQVcsRUFDaEIsSUFBSSxFQUFDLFFBQVEsRUFDYixFQUFFLEVBQUMsdUJBQXVCLEVBQzFCLFNBQVMsRUFBQyxLQUFLLHNCQUF5QixDQUM3QyxDQUVUO3dCQUVOLDJCQUFHLEVBQUUsRUFBQyxlQUFlLEVBQUMsU0FBUyxFQUFDLE9BQU8sR0FDbkM7d0JBRUosNkJBQUssU0FBUyxFQUFDLFVBQVUsRUFBQyxFQUFFLEVBQUMsb0JBQW9CLEVBQUMsS0FBSyxFQUFFLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBQyxHQUFRO3dCQUNsRiw2QkFBSyxTQUFTLEVBQUMsVUFBVSxFQUFDLEVBQUUsRUFBQyxzQkFBc0IsRUFBQyxLQUFLLEVBQUUsRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFDLEdBQVE7d0JBQ3BGLDhCQUFPO3dCQUVQLDJCQUFHLFNBQVMsRUFBQyxvQkFBb0I7NEJBQzdCLDJHQUVLLENBQ0wsQ0FFRCxDQUNMLENBRUMsQ0FDUixDQUVWLENBQUM7SUFDTixDQUFDO0NBRUo7QUFyRUQsa0NBcUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvbG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQgQ2FyZCBmcm9tICdyZWFjdHN0cmFwL2xpYi9DYXJkJztcbmltcG9ydCBDYXJkSGVhZGVyIGZyb20gJ3JlYWN0c3RyYXAvbGliL0NhcmRIZWFkZXInO1xuaW1wb3J0IENhcmRCb2R5IGZyb20gJ3JlYWN0c3RyYXAvbGliL0NhcmRCb2R5JztcblxuY29uc3QgbG9nID0gTG9nZ2VyLmNyZWF0ZSgpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWlsaW5nTGlzdENhcmQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55LCBhbnk+IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBhbnksIGNvbnRleHQ6IGFueSkge1xuICAgICAgICBzdXBlcihwcm9wcywgY29udGV4dCk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuXG4gICAgICAgIHJldHVybiAoXG5cbiAgICAgICAgICAgIDxDYXJkPlxuICAgICAgICAgICAgICAgIDxDYXJkSGVhZGVyPjxiPk1haWxpbmcgTGlzdDwvYj48L0NhcmRIZWFkZXI+XG4gICAgICAgICAgICAgICAgPENhcmRCb2R5PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPVwiaHR0cHM6Ly9zcGlubjNyLnVzMTAubGlzdC1tYW5hZ2UuY29tL3N1YnNjcmliZS9wb3N0P3U9MGIxNzM5ODEzZWJmMTE4ZTkyZmFmOGZjMyZhbXA7aWQ9YWQzZDUzZTgzN1wiIG1ldGhvZD1cInBvc3RcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJtYy1lbWJlZGRlZC1zdWJzY3JpYmUtZm9ybVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwibWMtZW1iZWRkZWQtc3Vic2NyaWJlLWZvcm1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidmFsaWRhdGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vVmFsaWRhdGU+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwibWNfZW1iZWRfc2lnbnVwXCIgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAgbXQtNCBtYi00XCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwiRU1BSUxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZXF1aXJlZCBlbWFpbCBmb3JtLWNvbnRyb2wgbWNlX2lubGluZV9lcnJvclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciB5b3VyIGVtYWlsIGFkZHJlc3NcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtcmVxdWlyZWQ9XCJ0cnVlXCIgYXJpYS1pbnZhbGlkPVwidHJ1ZVwiLz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e3Bvc2l0aW9uOiAnYWJzb2x1dGUnLCBsZWZ0OiAnLTUwMDBweCd9fSBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwiYl8wYjE3Mzk4MTNlYmYxMThlOTJmYWY4ZmMzX2FkM2Q1M2U4MzdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD17LTF9IHZhbHVlPVwiXCIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImlucHV0LWdyb3VwLWJ0blwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gbmFtZT1cInN1YnNjcmliZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwibWMtZW1iZWRkZWQtc3Vic2NyaWJlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0blwiPkpvaW4gTmV3c2xldHRlcjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBpZD1cIm1jZS1yZXNwb25zZXNcIiBjbGFzc05hbWU9XCJjbGVhclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVzcG9uc2VcIiBpZD1cIm1jZS1lcnJvci1yZXNwb25zZVwiIHN0eWxlPXt7ZGlzcGxheTogJ25vbmUnfX0+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZXNwb25zZVwiIGlkPVwibWNlLXN1Y2Nlc3MtcmVzcG9uc2VcIiBzdHlsZT17e2Rpc3BsYXk6ICdub25lJ319PjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjwvcD5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtaDUgdGV4dC1tdXRlZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFlvdXIgZW1haWwgYWRkcmVzcyBpcyBzYWZlIHdpdGggdXMuIFdlIG5ldmVyIHNoYXJlIHlvdXIgZW1haWwgYWRkcmVzcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9lbT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgICAgPC9DYXJkPlxuXG4gICAgICAgICk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb3BzIHtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTdGF0ZSB7XG5cbn1cblxuXG4iXX0=