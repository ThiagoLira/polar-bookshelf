"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const Engine_1 = require("./Engine");
const Functions_1 = require("polar-shared/src/util/Functions");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const TestingTime_1 = require("polar-shared/src/test/TestingTime");
const Assertions_1 = require("../../../../../web/js/test/Assertions");
describe('Engine', function () {
    beforeEach(function () {
        TestingTime_1.TestingTime.freeze();
    });
    afterEach(function () {
        TestingTime_1.TestingTime.unfreeze();
    });
    describe('EventHandlers', function () {
        it('basic', function () {
            const myEventHandlers = {
                onFoo: Functions_1.NULL_FUNCTION
            };
            const myEventMap = Engine_1.EventMaps.create(myEventHandlers, {});
            chai_1.assert.isTrue(Preconditions_1.isPresent(myEventMap.onFoo));
            chai_1.assert.isTrue(Preconditions_1.isPresent(myEventMap.onFoo.handler));
            chai_1.assert.isTrue(myEventMap.onFoo.lastExecuted === undefined);
            myEventMap.onFoo.handler();
            chai_1.assert.isTrue(myEventMap.onFoo.lastExecuted !== undefined);
            chai_1.assert.equal(myEventMap.onFoo.lastExecuted, "2012-03-02T11:38:49.321Z");
        });
        it('withExistingTime', function () {
            const myEventHandlers = {
                onFoo: Functions_1.NULL_FUNCTION
            };
            const myEventMap = Engine_1.EventMaps.create(myEventHandlers, { onFoo: "2012-03-01T00:00:00.000Z" });
            chai_1.assert.isTrue(Preconditions_1.isPresent(myEventMap.onFoo));
            chai_1.assert.isTrue(Preconditions_1.isPresent(myEventMap.onFoo.handler));
            chai_1.assert.isTrue(myEventMap.onFoo.lastExecuted !== undefined);
            chai_1.assert.equal(myEventMap.onFoo.lastExecuted, "2012-03-01T00:00:00.000Z");
            myEventMap.onFoo.handler();
            chai_1.assert.isTrue(myEventMap.onFoo.lastExecuted !== undefined);
            chai_1.assert.equal(myEventMap.onFoo.lastExecuted, "2012-03-02T11:38:49.321Z");
            Assertions_1.assertJSON(Engine_1.EventMaps.toEventTimes(myEventMap), {
                "onFoo": "2012-03-02T11:38:49.321Z"
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW5naW5lVGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkVuZ2luZVRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBNEI7QUFFNUIscUNBQW1DO0FBRW5DLCtEQUE4RDtBQUM5RCxrRUFBeUQ7QUFDekQsbUVBQThEO0FBQzlELHNFQUFpRTtBQUVqRSxRQUFRLENBQUMsUUFBUSxFQUFFO0lBRWYsVUFBVSxDQUFDO1FBQ1AseUJBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQztRQUNOLHlCQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsZUFBZSxFQUFFO1FBRXRCLEVBQUUsQ0FBQyxPQUFPLEVBQUU7WUFFUixNQUFNLGVBQWUsR0FBRztnQkFDcEIsS0FBSyxFQUFFLHlCQUFhO2FBQ3ZCLENBQUM7WUFFRixNQUFNLFVBQVUsR0FBRyxrQkFBUyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFFekQsYUFBTSxDQUFDLE1BQU0sQ0FBQyx5QkFBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzNDLGFBQU0sQ0FBQyxNQUFNLENBQUMseUJBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDbkQsYUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFlBQVksS0FBSyxTQUFTLENBQUMsQ0FBQztZQUMzRCxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzNCLGFBQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxZQUFZLEtBQUssU0FBUyxDQUFDLENBQUM7WUFFM0QsYUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO1FBRTVFLENBQUMsQ0FBQyxDQUFDO1FBR0gsRUFBRSxDQUFDLGtCQUFrQixFQUFFO1lBRW5CLE1BQU0sZUFBZSxHQUFHO2dCQUNwQixLQUFLLEVBQUUseUJBQWE7YUFDdkIsQ0FBQztZQUVGLE1BQU0sVUFBVSxHQUFHLGtCQUFTLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFDLEtBQUssRUFBRSwwQkFBMEIsRUFBQyxDQUFDLENBQUM7WUFFMUYsYUFBTSxDQUFDLE1BQU0sQ0FBQyx5QkFBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzNDLGFBQU0sQ0FBQyxNQUFNLENBQUMseUJBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDbkQsYUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFlBQVksS0FBSyxTQUFTLENBQUMsQ0FBQztZQUMzRCxhQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLDBCQUEwQixDQUFDLENBQUM7WUFDeEUsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUMzQixhQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsWUFBWSxLQUFLLFNBQVMsQ0FBQyxDQUFDO1lBQzNELGFBQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztZQUV4RSx1QkFBVSxDQUFDLGtCQUFTLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUMzQyxPQUFPLEVBQUUsMEJBQTBCO2FBQ3RDLENBQUMsQ0FBQztRQUdQLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQyxDQUFDLENBQUM7QUFFUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXNzZXJ0fSBmcm9tICdjaGFpJztcbmltcG9ydCB7RW5naW5lfSBmcm9tICcuL0VuZ2luZSc7XG5pbXBvcnQge0V2ZW50TWFwc30gZnJvbSAnLi9FbmdpbmUnO1xuaW1wb3J0IHtFdmVudEhhbmRsZXJzfSBmcm9tICcuL0VuZ2luZSc7XG5pbXBvcnQge05VTExfRlVOQ1RJT059IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvdXRpbC9GdW5jdGlvbnMnO1xuaW1wb3J0IHtpc1ByZXNlbnR9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvUHJlY29uZGl0aW9ucyc7XG5pbXBvcnQge1Rlc3RpbmdUaW1lfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3Rlc3QvVGVzdGluZ1RpbWUnO1xuaW1wb3J0IHthc3NlcnRKU09OfSBmcm9tICcuLi8uLi8uLi8uLi8uLi93ZWIvanMvdGVzdC9Bc3NlcnRpb25zJztcblxuZGVzY3JpYmUoJ0VuZ2luZScsIGZ1bmN0aW9uKCkge1xuXG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgVGVzdGluZ1RpbWUuZnJlZXplKCk7XG4gICAgfSk7XG5cbiAgICBhZnRlckVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIFRlc3RpbmdUaW1lLnVuZnJlZXplKCk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnRXZlbnRIYW5kbGVycycsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGl0KCdiYXNpYycsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBjb25zdCBteUV2ZW50SGFuZGxlcnMgPSB7XG4gICAgICAgICAgICAgICAgb25Gb286IE5VTExfRlVOQ1RJT05cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IG15RXZlbnRNYXAgPSBFdmVudE1hcHMuY3JlYXRlKG15RXZlbnRIYW5kbGVycywge30pO1xuXG4gICAgICAgICAgICBhc3NlcnQuaXNUcnVlKGlzUHJlc2VudChteUV2ZW50TWFwLm9uRm9vKSk7XG4gICAgICAgICAgICBhc3NlcnQuaXNUcnVlKGlzUHJlc2VudChteUV2ZW50TWFwLm9uRm9vLmhhbmRsZXIpKTtcbiAgICAgICAgICAgIGFzc2VydC5pc1RydWUobXlFdmVudE1hcC5vbkZvby5sYXN0RXhlY3V0ZWQgPT09IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBteUV2ZW50TWFwLm9uRm9vLmhhbmRsZXIoKTtcbiAgICAgICAgICAgIGFzc2VydC5pc1RydWUobXlFdmVudE1hcC5vbkZvby5sYXN0RXhlY3V0ZWQgIT09IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChteUV2ZW50TWFwLm9uRm9vLmxhc3RFeGVjdXRlZCwgXCIyMDEyLTAzLTAyVDExOjM4OjQ5LjMyMVpcIik7XG5cbiAgICAgICAgfSk7XG5cblxuICAgICAgICBpdCgnd2l0aEV4aXN0aW5nVGltZScsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICBjb25zdCBteUV2ZW50SGFuZGxlcnMgPSB7XG4gICAgICAgICAgICAgICAgb25Gb286IE5VTExfRlVOQ1RJT05cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IG15RXZlbnRNYXAgPSBFdmVudE1hcHMuY3JlYXRlKG15RXZlbnRIYW5kbGVycywge29uRm9vOiBcIjIwMTItMDMtMDFUMDA6MDA6MDAuMDAwWlwifSk7XG5cbiAgICAgICAgICAgIGFzc2VydC5pc1RydWUoaXNQcmVzZW50KG15RXZlbnRNYXAub25Gb28pKTtcbiAgICAgICAgICAgIGFzc2VydC5pc1RydWUoaXNQcmVzZW50KG15RXZlbnRNYXAub25Gb28uaGFuZGxlcikpO1xuICAgICAgICAgICAgYXNzZXJ0LmlzVHJ1ZShteUV2ZW50TWFwLm9uRm9vLmxhc3RFeGVjdXRlZCAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChteUV2ZW50TWFwLm9uRm9vLmxhc3RFeGVjdXRlZCwgXCIyMDEyLTAzLTAxVDAwOjAwOjAwLjAwMFpcIik7XG4gICAgICAgICAgICBteUV2ZW50TWFwLm9uRm9vLmhhbmRsZXIoKTtcbiAgICAgICAgICAgIGFzc2VydC5pc1RydWUobXlFdmVudE1hcC5vbkZvby5sYXN0RXhlY3V0ZWQgIT09IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwobXlFdmVudE1hcC5vbkZvby5sYXN0RXhlY3V0ZWQsIFwiMjAxMi0wMy0wMlQxMTozODo0OS4zMjFaXCIpO1xuXG4gICAgICAgICAgICBhc3NlcnRKU09OKEV2ZW50TWFwcy50b0V2ZW50VGltZXMobXlFdmVudE1hcCksIHtcbiAgICAgICAgICAgICAgICBcIm9uRm9vXCI6IFwiMjAxMi0wMy0wMlQxMTozODo0OS4zMjFaXCJcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxufSk7XG4iXX0=