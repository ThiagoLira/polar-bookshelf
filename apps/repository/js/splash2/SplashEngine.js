"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Engine_1 = require("./rules_engine/Engine");
const Engine_2 = require("./rules_engine/Engine");
const ISODateTimeStrings_1 = require("polar-shared/src/metadata/ISODateTimeStrings");
const TimeDurations_1 = require("polar-shared/src/util/TimeDurations");
const LifecycleEvents_1 = require("../../../../web/js/ui/util/LifecycleEvents");
const LifecycleToggle_1 = require("../../../../web/js/ui/util/LifecycleToggle");
const RendererAnalytics_1 = require("../../../../web/js/ga/RendererAnalytics");
const Platforms_1 = require("polar-shared/src/util/Platforms");
const semver = __importStar(require("semver"));
class SplashEngine {
    constructor(facts, eventHandlers, externalEngineState) {
        this.facts = facts;
        this.eventHandlers = eventHandlers;
        this.externalEngineState = externalEngineState;
        const rules = {
            whatsNew: new WhatsNewRule(),
            netPromoter: new NetPromoterRule(),
            suggestions: new SuggestionsRule(),
        };
        this.engine = new Engine_2.Engine(facts, rules, eventHandlers, externalEngineState);
    }
    run() {
        this.engine.run();
    }
    toExternalEngineState() {
        return this.engine.toExternalEngineState();
    }
}
exports.SplashEngine = SplashEngine;
class DefaultSplashEngine extends SplashEngine {
    constructor(facts, eventHandlers) {
        super(facts, eventHandlers, LocalStorageExternalState.get());
    }
    run() {
        super.run();
        const externalState = this.toExternalEngineState();
        LocalStorageExternalState.set(externalState);
    }
}
exports.DefaultSplashEngine = DefaultSplashEngine;
class LocalStorageExternalState {
    static get() {
        const value = localStorage.getItem(this.KEY);
        if (value) {
            return JSON.parse(value);
        }
        else {
            return undefined;
        }
    }
    static set(state) {
        localStorage.setItem(this.KEY, JSON.stringify(state));
    }
}
LocalStorageExternalState.KEY = 'splash-engine-state';
class SuggestionsRule {
    run(facts, eventMap, state) {
        if (!state) {
            state = {};
        }
        const canShow = () => canFireMajorRule(facts, eventMap, eventMap.onSuggestions, 'splash-suggestions-skipped');
        if (canShow()) {
            eventMap.onSuggestions.handler();
        }
        return [facts, state];
    }
}
class NetPromoterRule {
    run(facts, eventMap, state) {
        if (!state) {
            state = {};
        }
        const canShow = () => canFireMajorRule(facts, eventMap, eventMap.onNetPromoter, 'splash-nps-skipped');
        if (canShow()) {
            eventMap.onNetPromoter.handler();
        }
        return [facts, state];
    }
}
class WhatsNewRule {
    run(facts, eventMap, state) {
        const updated = state && semver.lt(state.version, facts.version);
        if (updated) {
            if (Platforms_1.Platforms.isDesktop()) {
                eventMap.onWhatsNew.handler();
            }
        }
        state = { version: facts.version };
        return [facts, state];
    }
}
function canFireMajorRule(facts, eventMap, event, analyticsKey) {
    const hasExistingAgedDatastore = () => {
        return UserFactsUtils.hasExistingAgedDatastore(facts, '3d');
    };
    const hasMinimumTimeSinceLastEvent = () => {
        const lastEventExecution = Engine_1.EventMaps.latestExecution(eventMap);
        return hasMinimumTimeSince(lastEventExecution, '15m');
    };
    const hasMinimumTimeSinceLastRuleFired = () => {
        const epoch = event.lastExecuted;
        return hasMinimumTimeSince(epoch, '7d');
    };
    if (!hasExistingAgedDatastore()) {
        RendererAnalytics_1.RendererAnalytics.event({ category: analyticsKey, action: 'reason-has-existing-aged-datastore' });
        return false;
    }
    if (!hasMinimumTimeSinceLastMajorPrompt(eventMap)) {
        RendererAnalytics_1.RendererAnalytics.event({ category: analyticsKey, action: 'reason-has-minimum-time-since-last-major-prompt' });
        return false;
    }
    if (!hasMinimumTimeSinceLastEvent()) {
        RendererAnalytics_1.RendererAnalytics.event({ category: analyticsKey, action: 'reason-has-minimum-time-since-last-event' });
        return false;
    }
    if (!hasMinimumTimeSinceLastRuleFired()) {
        RendererAnalytics_1.RendererAnalytics.event({ category: analyticsKey, action: 'reason-has-minimum-time-since-last-rule-fired' });
        return false;
    }
    if (!hasTourTerminated()) {
        RendererAnalytics_1.RendererAnalytics.event({ category: analyticsKey, action: 'reason-has-tour-terminated' });
        return false;
    }
    return true;
}
function hasMinimumTimeSinceLastMajorPrompt(eventMap) {
    const events = [eventMap.onNetPromoter, eventMap.onSuggestions];
    for (const event of events) {
        if (!hasMinimumTimeSince(event.lastExecuted, '1d')) {
            return false;
        }
    }
    return true;
}
function hasMinimumTimeSince(epoch, duration, defaultValue = true) {
    if (epoch) {
        const since = ISODateTimeStrings_1.ISODateTimeStrings.parse(epoch);
        return TimeDurations_1.TimeDurations.hasElapsed(since, duration);
    }
    else {
        return defaultValue;
    }
}
function hasTourTerminated() {
    return LifecycleToggle_1.LifecycleToggle.isMarked(LifecycleEvents_1.LifecycleEvents.TOUR_TERMINATED);
}
class UserFactsUtils {
    static hasExistingAgedDatastore(facts, duration) {
        if (facts.datastoreCreated) {
            const since = ISODateTimeStrings_1.ISODateTimeStrings.parse(facts.datastoreCreated);
            if (TimeDurations_1.TimeDurations.hasElapsed(since, duration)) {
                return true;
            }
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,