"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const reactstrap_1 = require("reactstrap");
const HelpDropdownItem_1 = require("./HelpDropdownItem");
const DropdownItem_1 = __importDefault(require("reactstrap/lib/DropdownItem"));
const AppRuntime_1 = require("../../../../web/js/AppRuntime");
const TrackedDropdownItem_1 = require("./TrackedDropdownItem");
const electron_1 = require("electron");
const AppUpdates_1 = require("../../../../web/js/updates/AppUpdates");
const DistConfig_1 = require("../../../../web/js/dist_config/DistConfig");
const Platforms_1 = require("polar-shared/src/util/Platforms");
const Devices_1 = require("../../../../web/js/util/Devices");
const Version_1 = require("polar-shared/src/util/Version");
const Dialogs_1 = require("../../../../web/js/ui/dialogs/Dialogs");
const Functions_1 = require("polar-shared/src/util/Functions");
class HelpDropdown extends React.PureComponent {
    constructor(props, context) {
        super(props, context);
        this.onAbout = this.onAbout.bind(this);
    }
    render() {
        const updatesEnabled = AppRuntime_1.AppRuntime.isElectron() && AppUpdates_1.AppUpdates.platformSupportsUpdates();
        const isPhone = Devices_1.Devices.isPhone();
        return (React.createElement(reactstrap_1.UncontrolledDropdown, { className: "ml-1", size: "md", id: "help-dropdown" },
            React.createElement(reactstrap_1.DropdownToggle, { className: "text-muted border", color: "light", caret: true },
                React.createElement("i", { className: "fas fa-question", style: { fontSize: '17px' } })),
            React.createElement(reactstrap_1.DropdownMenu, { className: "shadow", right: true },
                React.createElement(TrackedDropdownItem_1.TrackedDropdownItem, { id: "about-link", title: "About", tooltip: "About Polar", onClick: () => this.onAbout() }),
                React.createElement(HelpDropdownItem_1.HelpDropdownItem, { id: "documentation-link", title: "Documentation", tooltip: "Documentation on Polar", link: "https://getpolarized.io/docs/", icon: "fas fa-book" }),
                React.createElement(HelpDropdownItem_1.HelpDropdownItem, { id: "support-link", title: "Support", tooltip: "Get support on Polar", link: "#support", icon: "fas fa-hands-helping" }),
                React.createElement(HelpDropdownItem_1.HelpDropdownItem, { id: "chat-link", hidden: Platforms_1.Platforms.isMobile(), title: "Chat", tooltip: "Chat with other Polar users live via chat (Discord)", link: "https://discord.gg/GT8MhA6", icon: "fab fa-discord" }),
                React.createElement(HelpDropdownItem_1.HelpDropdownItem, { id: "create-issue-link", hidden: Platforms_1.Platforms.isMobile(), title: "Create Issue", tooltip: "Create an issue (bug or feature) for the developer to investigate.", link: "https://github.com/burtonator/polar-bookshelf/issues/new/choose", icon: "fas fa-bug" }),
                React.createElement(DropdownItem_1.default, { divider: true, hidden: !DistConfig_1.DistConfig.ENABLE_PURCHASES }),
                React.createElement(HelpDropdownItem_1.HelpDropdownItem, { hidden: !DistConfig_1.DistConfig.ENABLE_PURCHASES, id: "upgrade-to-premium-link", title: "Upgrade to Premium", tooltip: "Upgrade to Polar Premium and get the best Polar experience possible.", link: "#plans", icon: "fas fa-certificate" }),
                React.createElement(DropdownItem_1.default, { divider: true, hidden: !DistConfig_1.DistConfig.ENABLE_PURCHASES }),
                React.createElement(HelpDropdownItem_1.HelpDropdownItem, { hidden: !DistConfig_1.DistConfig.ENABLE_PURCHASES || Platforms_1.Platforms.isMobile(), id: "donate-link", title: "Donate", tooltip: "Donate to Polar to support development.", link: "https://opencollective.com/polar-bookshelf", icon: "fas fa-donate" }),
                React.createElement(DropdownItem_1.default, { divider: true, hidden: !updatesEnabled }),
                React.createElement(TrackedDropdownItem_1.TrackedDropdownItem, { id: "electron-check-for-update", title: "Check For App Update", tooltip: "Check for a new update of the Polar Desktop app.", icon: "fas fa-file-download", trackingCategory: "help-check-for-update", hidden: !updatesEnabled, onClick: () => electron_1.ipcRenderer.send('app-update:check-for-update') }),
                React.createElement(DropdownItem_1.default, { divider: true, hidden: isPhone }),
                React.createElement(TrackedDropdownItem_1.TrackedDropdownItem, { id: "sidebar-item-logs", hidden: isPhone, title: "Logs", tooltip: "Show logs on internal activity during background operations like cloud activity and sync.", icon: "fas fa-info-circle", onClick: () => document.location.href = '/#logs', trackingCategory: "help-logs" }))));
    }
    onAbout() {
        const version = Version_1.Version.get();
        const body = React.createElement("div", null,
            React.createElement("b", null, "Version: "),
            " ",
            version);
        Dialogs_1.Dialogs.alert({
            title: 'About',
            body,
            type: 'success',
            onConfirm: Functions_1.NULL_FUNCTION
        });
    }
}
exports.HelpDropdown = HelpDropdown;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGVscERyb3Bkb3duLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiSGVscERyb3Bkb3duLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBK0I7QUFDL0IsMkNBQThFO0FBQzlFLHlEQUFvRDtBQUNwRCwrRUFBdUQ7QUFDdkQsOERBQXlEO0FBQ3pELCtEQUEwRDtBQUMxRCx1Q0FBcUM7QUFDckMsc0VBQWlFO0FBQ2pFLDBFQUFxRTtBQUNyRSwrREFBMEQ7QUFDMUQsNkRBQXdEO0FBQ3hELDJEQUFzRDtBQUN0RCxtRUFBOEQ7QUFDOUQsK0RBQThEO0FBRzlELE1BQWEsWUFBYSxTQUFRLEtBQUssQ0FBQyxhQUE2QjtJQUVqRSxZQUFZLEtBQWEsRUFBRSxPQUFZO1FBQ25DLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUzQyxDQUFDO0lBRU0sTUFBTTtRQUVULE1BQU0sY0FBYyxHQUFHLHVCQUFVLENBQUMsVUFBVSxFQUFFLElBQUksdUJBQVUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1FBRXZGLE1BQU0sT0FBTyxHQUFHLGlCQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFbEMsT0FBTyxDQUNILG9CQUFDLGlDQUFvQixJQUFDLFNBQVMsRUFBQyxNQUFNLEVBQ2hCLElBQUksRUFBQyxJQUFJLEVBQ1QsRUFBRSxFQUFDLGVBQWU7WUFFcEMsb0JBQUMsMkJBQWMsSUFBQyxTQUFTLEVBQUMsbUJBQW1CLEVBQzdCLEtBQUssRUFBQyxPQUFPLEVBQ2IsS0FBSztnQkFFakIsMkJBQUcsU0FBUyxFQUFDLGlCQUFpQixFQUFDLEtBQUssRUFBRSxFQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUMsR0FBRyxDQUU5QztZQUVqQixvQkFBQyx5QkFBWSxJQUFDLFNBQVMsRUFBQyxRQUFRLEVB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RyxRQUFRLEVBQ2hELGdCQUFnQixFQUFDLFdBQVcsR0FBRSxDQUV4QyxDQUVJLENBQzFCLENBQUM7SUFFTixDQUFDO0lBRU8sT0FBTztRQUVYLE1BQU0sT0FBTyxHQUFHLGlCQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFOUIsTUFBTSxJQUFJLEdBQUc7WUFFVCwyQ0FBZ0I7O1lBQUUsT0FBTyxDQUV2QixDQUFDO1FBRVAsaUJBQU8sQ0FBQyxLQUFLLENBQUM7WUFDVixLQUFLLEVBQUUsT0FBTztZQUNkLElBQUk7WUFDSixJQUFJLEVBQUUsU0FBUztZQUNmLFNBQVMsRUFBRSx5QkFBYTtTQUMzQixDQUFDLENBQUE7SUFFTixDQUFDO0NBRUo7QUFoSUQsb0NBZ0lDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtEcm9wZG93bk1lbnUsIERyb3Bkb3duVG9nZ2xlLCBVbmNvbnRyb2xsZWREcm9wZG93bn0gZnJvbSAncmVhY3RzdHJhcCc7XG5pbXBvcnQge0hlbHBEcm9wZG93bkl0ZW19IGZyb20gJy4vSGVscERyb3Bkb3duSXRlbSc7XG5pbXBvcnQgRHJvcGRvd25JdGVtIGZyb20gJ3JlYWN0c3RyYXAvbGliL0Ryb3Bkb3duSXRlbSc7XG5pbXBvcnQge0FwcFJ1bnRpbWV9IGZyb20gJy4uLy4uLy4uLy4uL3dlYi9qcy9BcHBSdW50aW1lJztcbmltcG9ydCB7VHJhY2tlZERyb3Bkb3duSXRlbX0gZnJvbSAnLi9UcmFja2VkRHJvcGRvd25JdGVtJztcbmltcG9ydCB7aXBjUmVuZGVyZXJ9IGZyb20gJ2VsZWN0cm9uJztcbmltcG9ydCB7QXBwVXBkYXRlc30gZnJvbSAnLi4vLi4vLi4vLi4vd2ViL2pzL3VwZGF0ZXMvQXBwVXBkYXRlcyc7XG5pbXBvcnQge0Rpc3RDb25maWd9IGZyb20gJy4uLy4uLy4uLy4uL3dlYi9qcy9kaXN0X2NvbmZpZy9EaXN0Q29uZmlnJztcbmltcG9ydCB7UGxhdGZvcm1zfSBmcm9tIFwicG9sYXItc2hhcmVkL3NyYy91dGlsL1BsYXRmb3Jtc1wiO1xuaW1wb3J0IHtEZXZpY2VzfSBmcm9tIFwiLi4vLi4vLi4vLi4vd2ViL2pzL3V0aWwvRGV2aWNlc1wiO1xuaW1wb3J0IHtWZXJzaW9ufSBmcm9tIFwicG9sYXItc2hhcmVkL3NyYy91dGlsL1ZlcnNpb25cIjtcbmltcG9ydCB7RGlhbG9nc30gZnJvbSBcIi4uLy4uLy4uLy4uL3dlYi9qcy91aS9kaWFsb2dzL0RpYWxvZ3NcIjtcbmltcG9ydCB7TlVMTF9GVU5DVElPTn0gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvdXRpbC9GdW5jdGlvbnNcIjtcbmltcG9ydCB7TnVsbENvbGxhcHNlfSBmcm9tIFwiLi4vLi4vLi4vLi4vd2ViL2pzL3VpL251bGxfY29sbGFwc2UvTnVsbENvbGxhcHNlXCI7XG5cbmV4cG9ydCBjbGFzcyBIZWxwRHJvcGRvd24gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzLCBjb250ZXh0OiBhbnkpIHtcbiAgICAgICAgc3VwZXIocHJvcHMsIGNvbnRleHQpO1xuXG4gICAgICAgIHRoaXMub25BYm91dCA9IHRoaXMub25BYm91dC5iaW5kKHRoaXMpO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpIHtcblxuICAgICAgICBjb25zdCB1cGRhdGVzRW5hYmxlZCA9IEFwcFJ1bnRpbWUuaXNFbGVjdHJvbigpICYmIEFwcFVwZGF0ZXMucGxhdGZvcm1TdXBwb3J0c1VwZGF0ZXMoKTtcblxuICAgICAgICBjb25zdCBpc1Bob25lID0gRGV2aWNlcy5pc1Bob25lKCk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxVbmNvbnRyb2xsZWREcm9wZG93biBjbGFzc05hbWU9XCJtbC0xXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwibWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiaGVscC1kcm9wZG93blwiPlxuXG4gICAgICAgICAgICAgICAgPERyb3Bkb3duVG9nZ2xlIGNsYXNzTmFtZT1cInRleHQtbXV0ZWQgYm9yZGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJsaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0PlxuXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhcyBmYS1xdWVzdGlvblwiIHN0eWxlPXt7Zm9udFNpemU6ICcxN3B4J319Lz5cblxuICAgICAgICAgICAgICAgIDwvRHJvcGRvd25Ub2dnbGU+XG5cbiAgICAgICAgICAgICAgICA8RHJvcGRvd25NZW51IGNsYXNzTmFtZT1cInNoYWRvd1wiIHJpZ2h0PlxuXG4gICAgICAgICAgICAgICAgICAgIHsvKjxEcm9wZG93bkl0ZW0gaGVhZGVyPkV4dGVuc2lvbnMgYW5kIEFkZG9uczwvRHJvcGRvd25JdGVtPiovfVxuXG4gICAgICAgICAgICAgICAgICAgIDxUcmFja2VkRHJvcGRvd25JdGVtIGlkPVwiYWJvdXQtbGlua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiQWJvdXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwPVwiQWJvdXQgUG9sYXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLm9uQWJvdXQoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICAgICAgICA8SGVscERyb3Bkb3duSXRlbSBpZD1cImRvY3VtZW50YXRpb24tbGlua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiRG9jdW1lbnRhdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9XCJEb2N1bWVudGF0aW9uIG9uIFBvbGFyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1cImh0dHBzOi8vZ2V0cG9sYXJpemVkLmlvL2RvY3MvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj1cImZhcyBmYS1ib29rXCIvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxIZWxwRHJvcGRvd25JdGVtIGlkPVwic3VwcG9ydC1saW5rXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJTdXBwb3J0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcD1cIkdldCBzdXBwb3J0IG9uIFBvbGFyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1cIiNzdXBwb3J0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj1cImZhcyBmYS1oYW5kcy1oZWxwaW5nXCIvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxIZWxwRHJvcGRvd25JdGVtIGlkPVwiY2hhdC1saW5rXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuPXtQbGF0Zm9ybXMuaXNNb2JpbGUoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJDaGF0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcD1cIkNoYXQgd2l0aCBvdGhlciBQb2xhciB1c2VycyBsaXZlIHZpYSBjaGF0IChEaXNjb3JkKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms9XCJodHRwczovL2Rpc2NvcmQuZ2cvR1Q4TWhBNlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249XCJmYWIgZmEtZGlzY29yZFwiLz5cblxuICAgICAgICAgICAgICAgICAgICA8SGVscERyb3Bkb3duSXRlbSBpZD1cImNyZWF0ZS1pc3N1ZS1saW5rXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuPXtQbGF0Zm9ybXMuaXNNb2JpbGUoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJDcmVhdGUgSXNzdWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwPVwiQ3JlYXRlIGFuIGlzc3VlIChidWcgb3IgZmVhdHVyZSkgZm9yIHRoZSBkZXZlbG9wZXIgdG8gaW52ZXN0aWdhdGUuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1cImh0dHBzOi8vZ2l0aHViLmNvbS9idXJ0b25hdG9yL3BvbGFyLWJvb2tzaGVsZi9pc3N1ZXMvbmV3L2Nob29zZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249XCJmYXMgZmEtYnVnXCIvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW0gZGl2aWRlciBoaWRkZW49eyEgRGlzdENvbmZpZy5FTkFCTEVfUFVSQ0hBU0VTfSAvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxIZWxwRHJvcGRvd25JdGVtIGhpZGRlbj17ISBEaXN0Q29uZmlnLkVOQUJMRV9QVVJDSEFTRVN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwidXBncmFkZS10by1wcmVtaXVtLWxpbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIlVwZ3JhZGUgdG8gUHJlbWl1bVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9XCJVcGdyYWRlIHRvIFBvbGFyIFByZW1pdW0gYW5kIGdldCB0aGUgYmVzdCBQb2xhciBleHBlcmllbmNlIHBvc3NpYmxlLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms9XCIjcGxhbnNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPVwiZmFzIGZhLWNlcnRpZmljYXRlXCIvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW0gZGl2aWRlciBoaWRkZW49eyEgRGlzdENvbmZpZy5FTkFCTEVfUFVSQ0hBU0VTfSAvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxIZWxwRHJvcGRvd25JdGVtIGhpZGRlbj17ISBEaXN0Q29uZmlnLkVOQUJMRV9QVVJDSEFTRVMgfHwgUGxhdGZvcm1zLmlzTW9iaWxlKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZG9uYXRlLWxpbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkRvbmF0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9XCJEb25hdGUgdG8gUG9sYXIgdG8gc3VwcG9ydCBkZXZlbG9wbWVudC5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rPVwiaHR0cHM6Ly9vcGVuY29sbGVjdGl2ZS5jb20vcG9sYXItYm9va3NoZWxmXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj1cImZhcyBmYS1kb25hdGVcIi8+XG5cbiAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbSBkaXZpZGVyIGhpZGRlbj17IXVwZGF0ZXNFbmFibGVkfS8+XG5cbiAgICAgICAgICAgICAgICAgICAgPFRyYWNrZWREcm9wZG93bkl0ZW0gaWQ9XCJlbGVjdHJvbi1jaGVjay1mb3ItdXBkYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJDaGVjayBGb3IgQXBwIFVwZGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9XCJDaGVjayBmb3IgYSBuZXcgdXBkYXRlIG9mIHRoZSBQb2xhciBEZXNrdG9wIGFwcC5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPVwiZmFzIGZhLWZpbGUtZG93bmxvYWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja2luZ0NhdGVnb3J5PVwiaGVscC1jaGVjay1mb3ItdXBkYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuPXshdXBkYXRlc0VuYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGlwY1JlbmRlcmVyLnNlbmQoJ2FwcC11cGRhdGU6Y2hlY2stZm9yLXVwZGF0ZScpfS8+XG5cbiAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbSBkaXZpZGVyIGhpZGRlbj17aXNQaG9uZX0vPlxuXG4gICAgICAgICAgICAgICAgICAgIDxUcmFja2VkRHJvcGRvd25JdGVtIGlkPVwic2lkZWJhci1pdGVtLWxvZ3NcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW49e2lzUGhvbmV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiTG9nc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9XCJTaG93IGxvZ3Mgb24gaW50ZXJuYWwgYWN0aXZpdHkgZHVyaW5nIGJhY2tncm91bmQgb3BlcmF0aW9ucyBsaWtlIGNsb3VkIGFjdGl2aXR5IGFuZCBzeW5jLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249XCJmYXMgZmEtaW5mby1jaXJjbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gJy8jbG9ncyd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNraW5nQ2F0ZWdvcnk9XCJoZWxwLWxvZ3NcIi8+XG5cbiAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duTWVudT5cblxuICAgICAgICAgICAgPC9VbmNvbnRyb2xsZWREcm9wZG93bj5cbiAgICAgICAgKTtcblxuICAgIH1cblxuICAgIHByaXZhdGUgb25BYm91dCgpIHtcblxuICAgICAgICBjb25zdCB2ZXJzaW9uID0gVmVyc2lvbi5nZXQoKTtcblxuICAgICAgICBjb25zdCBib2R5ID0gPGRpdj5cblxuICAgICAgICAgICAgPGI+VmVyc2lvbjogPC9iPiB7dmVyc2lvbn1cblxuICAgICAgICA8L2Rpdj47XG5cbiAgICAgICAgRGlhbG9ncy5hbGVydCh7XG4gICAgICAgICAgICB0aXRsZTogJ0Fib3V0JyxcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICAgICAgICBvbkNvbmZpcm06IE5VTExfRlVOQ1RJT05cbiAgICAgICAgfSlcblxuICAgIH1cblxufVxuXG5pbnRlcmZhY2UgSVByb3BzIHtcbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG5cbn1cbiJdfQ==