"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const reactstrap_1 = require("reactstrap");
const LinkDropdownItem_1 = require("./LinkDropdownItem");
const AppRuntime_1 = require("../../../../web/js/AppRuntime");
const Platforms_1 = require("polar-shared/src/util/Platforms");
class LinkDropdown extends React.PureComponent {
    constructor(props, context) {
        super(props, context);
    }
    render() {
        return (React.createElement(reactstrap_1.UncontrolledDropdown, { className: "ml-1", size: "md", hidden: this.props.hidden, id: "links-dropdown" },
            React.createElement(reactstrap_1.DropdownToggle, { className: "text-muted border", color: "light", caret: true },
                React.createElement("i", { className: "fas fa-link", style: { fontSize: '17px' } })),
            React.createElement(reactstrap_1.DropdownMenu, { className: "shadow", right: true },
                React.createElement(reactstrap_1.DropdownItem, { header: true }, "Extensions and Addons"),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "chrome-extension", title: "Chrome Extension", tooltip: "Install the Polar Chrome extension for capturing web content directly in Chrome.", link: "https://chrome.google.com/webstore/detail/save-to-polar/jkfdkjomocoaljglgddnmhcbolldcafd/", icon: "fab fa-chrome" }),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "polar-connect", hidden: AppRuntime_1.AppRuntime.isBrowser(), title: "Polar Connect for Anki Sync", tooltip: "Install the Polar Connect Anki add-on for syncing flashcards to Anki.", link: "https://ankiweb.net/shared/info/734898866", icon: "fas fa-bolt" }),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "download-desktop", hidden: !(AppRuntime_1.AppRuntime.isBrowser() && Platforms_1.Platforms.type() === 'desktop'), title: "Download Polar Desktop", tooltip: "Download Polar for the Desktop", link: "https://getpolarized.io/download.html", icon: "fas fa-file-download" }),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "link-use-webapp", hidden: !AppRuntime_1.AppRuntime.isElectron(), title: "Use Polar Webapp", tooltip: "Load the Polar webapp", link: "https://app.getpolarized.io/", icon: "fab fa-html5" }),
                React.createElement(reactstrap_1.DropdownItem, { header: true }, "Social Media"),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "discord-link", title: "Discord", tooltip: "Chat with other Polar users live on Discord.", link: "https://discord.gg/GT8MhA6", icon: "fab fa-discord" }),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "reddit-link", title: "Reddit", tooltip: "Discuss Polar on the in the PolarBookshelf subreddit.", link: "https://www.reddit.com/r/PolarBookshelf/", icon: "fab fa-reddit" }),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "twitter-link", title: "Twitter", tooltip: "View the Polar Twitter account", link: "https://twitter.com/getpolarized", icon: "fab fa-twitter" }),
                React.createElement(LinkDropdownItem_1.LinkDropdownItem, { id: "github-link", title: "Github", tooltip: "View the Polar Github project. Create issues, view source code, etc.", link: "https://github.com/burtonator/polar-bookshelf", icon: "fab fa-github" }))));
    }
}
exports.LinkDropdown = LinkDropdown;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlua0Ryb3Bkb3duLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTGlua0Ryb3Bkb3duLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSw2Q0FBK0I7QUFDL0IsMkNBQTRGO0FBQzVGLHlEQUFvRDtBQUNwRCw4REFBeUQ7QUFDekQsK0RBQTBEO0FBRTFELE1BQWEsWUFBYSxTQUFRLEtBQUssQ0FBQyxhQUE2QjtJQUVqRSxZQUFZLEtBQWEsRUFBRSxPQUFZO1FBQ25DLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVNLE1BQU07UUFFVCxPQUFPLENBRUgsb0JBQUMsaUNBQW9CLElBQUMsU0FBUyxFQUFDLE1BQU0sRUFDaEIsSUFBSSxFQUFDLElBQUksRUFDVCxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQ3pCLEVBQUUsRUFBQyxnQkFBZ0I7WUFFckMsb0JBQUMsMkJBQWMsSUFBQyxTQUFTLEVBQUMsbUJBQW1CLEVBQzdCLEtBQUssRUFBQyxPQUFPLEVBQ2IsS0FBSztnQkFFakIsMkJBQUcsU0FBUyxFQUFDLGFBQWEsRUFBQyxLQUFLLEVBQUUsRUFBQyxRQUFRLEVBQUUsTUFBTSxFQUFDLEdBQUcsQ0FFMUM7WUFFakIsb0JBQUMseUJBQVksSUFBQyxTQUFTLEVBQUMsUUFBUSxFQUFDLEtBQUs7Z0JBRWxDLG9CQUFDLHlCQUFZLElBQUMsTUFBTSxrQ0FBcUM7Z0JBRXpELG9CQUFDLG1DQUFnQixJQUFDLEVBQUUsRUFBQyxrQkFBa0IsRUFDckIsS0FBSyxFQUFDLGtCQUFrQixFQUN4QixPQUFPLEVBQUMsa0ZBQWtGLEVBQzFGLElBQUksRUFBQywyRkFBMkYsRUFDaEcsSUFBSSxFQUFDLGVBQWUsR0FBRTtnQkFFeEMsb0JBQUMsbUNBQWdCLElBQUMsRUFBRSxFQUFDLGVBQWUsRUFDbEIsTUFBTSxFQUFFLHVCQUFVLENBQUMsU0FBUyxFQUFFLEVBQzlCLEtBQUssRUFBQyw2QkFBNkIsRUFDbkMsT0FBTyxFQUFDLHVFQUF1RSxFQUMvRSxJQUFJLEVBQUMsMkNBQTJDLEVBQ2hELElBQUksRUFBQyxhQUFhLEdBQUU7Z0JBRXRDLG9CQUFDLG1DQUFnQixJQUFDLEVBQUUsRUFBQyxrQkFBa0IsRUFDckIsTUFBTSxFQUFFLENBQUUsQ0FBQyx1QkFBVSxDQUFDLFNBQVMsRUFBRSxJQUFJLHFCQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssU0FBUyxDQUFDLEVBQ3BFLEtBQUssRUFBQyx3QkFBd0IsRUFDOUIsT0FBTyxFQUFDLGdDQUFnQyxFQUN4QyxJQUFJLEVBQUMsdUNBQXVDLEVBQzVDLElBQUksRUFBQyxzQkFBc0IsR0FBRTtnQkFFL0Msb0JBQUMsbUNBQWdCLElBQUMsRUFBRSxFQUFDLGlCQUFpQixFQUNwQixNQUFNLEVBQUUsQ0FBRSx1QkFBVSxDQUFDLFVBQVUsRUFBRSxFQUNqQyxLQUFLLEVBQUMsa0JBQWtCLEVBQ3hCLE9BQU8sRUFBQyx1QkFBdUIsRUFDL0IsSUFBSSxFQUFDLDhCQUE4QixFQUNuQyxJQUFJLEVBQUMsY0FBYyxHQUFFO2dCQVF2QyxvQkFBQyx5QkFBWSxJQUFDLE1BQU0seUJBQTRCO2dCQUVoRCxvQkFBQyxtQ0FBZ0IsSUFBQyxFQUFFLEVBQUMsY0FBYyxFQUNqQixLQUFLLEVBQUMsU0FBUyxFQUNmLE9BQU8sRUFBQyw4Q0FBOEMsRUFDdEQsSUFBSSxFQUFDLDRCQUE0QixFQUNqQyxJQUFJLEVBQUMsZ0JBQWdCLEdBQUU7Z0JBRXpDLG9CQUFDLG1DQUFnQixJQUFDLEVBQUUsRUFBQyxhQUFhLEVBQ2hCLEtBQUssRUFBQyxRQUFRLEVBQ2QsT0FBTyxFQUFDLHVEQUF1RCxFQUMvRCxJQUFJLEVBQUMsMENBQTBDLEVBQy9DLElBQUksRUFBQyxlQUFlLEdBQUU7Z0JBRXhDLG9CQUFDLG1DQUFnQixJQUFDLEVBQUUsRUFBQyxjQUFjLEVBQ2pCLEtBQUssRUFBQyxTQUFTLEVBQ2YsT0FBTyxFQUFDLGdDQUFnQyxFQUN4QyxJQUFJLEVBQUMsa0NBQWtDLEVBQ3ZDLElBQUksRUFBQyxnQkFBZ0IsR0FBRTtnQkFFekMsb0JBQUMsbUNBQWdCLElBQUMsRUFBRSxFQUFDLGFBQWEsRUFDaEIsS0FBSyxFQUFDLFFBQVEsRUFDZCxPQUFPLEVBQUMsc0VBQXNFLEVBQzlFLElBQUksRUFBQywrQ0FBK0MsRUFDcEQsSUFBSSxFQUFDLGVBQWUsR0FBRSxDQVU3QixDQVdJLENBQzFCLENBQUM7SUFFTixDQUFDO0NBR0o7QUEvR0Qsb0NBK0dDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtEcm9wZG93bk1lbnUsIERyb3Bkb3duVG9nZ2xlLCBVbmNvbnRyb2xsZWREcm9wZG93biwgRHJvcGRvd25JdGVtfSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCB7TGlua0Ryb3Bkb3duSXRlbX0gZnJvbSAnLi9MaW5rRHJvcGRvd25JdGVtJztcbmltcG9ydCB7QXBwUnVudGltZX0gZnJvbSAnLi4vLi4vLi4vLi4vd2ViL2pzL0FwcFJ1bnRpbWUnO1xuaW1wb3J0IHtQbGF0Zm9ybXN9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvdXRpbC9QbGF0Zm9ybXMnO1xuXG5leHBvcnQgY2xhc3MgTGlua0Ryb3Bkb3duIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IElQcm9wcywgY29udGV4dDogYW55KSB7XG4gICAgICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuXG4gICAgICAgIHJldHVybiAoXG5cbiAgICAgICAgICAgIDxVbmNvbnRyb2xsZWREcm9wZG93biBjbGFzc05hbWU9XCJtbC0xXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwibWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbj17dGhpcy5wcm9wcy5oaWRkZW59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJsaW5rcy1kcm9wZG93blwiPlxuXG4gICAgICAgICAgICAgICAgPERyb3Bkb3duVG9nZ2xlIGNsYXNzTmFtZT1cInRleHQtbXV0ZWQgYm9yZGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJsaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0PlxuXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhcyBmYS1saW5rXCIgc3R5bGU9e3tmb250U2l6ZTogJzE3cHgnfX0vPlxuXG4gICAgICAgICAgICAgICAgPC9Ecm9wZG93blRvZ2dsZT5cblxuICAgICAgICAgICAgICAgIDxEcm9wZG93bk1lbnUgY2xhc3NOYW1lPVwic2hhZG93XCIgcmlnaHQ+XG5cbiAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbSBoZWFkZXI+RXh0ZW5zaW9ucyBhbmQgQWRkb25zPC9Ecm9wZG93bkl0ZW0+XG5cbiAgICAgICAgICAgICAgICAgICAgPExpbmtEcm9wZG93bkl0ZW0gaWQ9XCJjaHJvbWUtZXh0ZW5zaW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJDaHJvbWUgRXh0ZW5zaW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcD1cIkluc3RhbGwgdGhlIFBvbGFyIENocm9tZSBleHRlbnNpb24gZm9yIGNhcHR1cmluZyB3ZWIgY29udGVudCBkaXJlY3RseSBpbiBDaHJvbWUuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1cImh0dHBzOi8vY2hyb21lLmdvb2dsZS5jb20vd2Vic3RvcmUvZGV0YWlsL3NhdmUtdG8tcG9sYXIvamtmZGtqb21vY29hbGpnbGdkZG5taGNib2xsZGNhZmQvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj1cImZhYiBmYS1jaHJvbWVcIi8+XG5cbiAgICAgICAgICAgICAgICAgICAgPExpbmtEcm9wZG93bkl0ZW0gaWQ9XCJwb2xhci1jb25uZWN0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuPXtBcHBSdW50aW1lLmlzQnJvd3NlcigpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIlBvbGFyIENvbm5lY3QgZm9yIEFua2kgU3luY1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9XCJJbnN0YWxsIHRoZSBQb2xhciBDb25uZWN0IEFua2kgYWRkLW9uIGZvciBzeW5jaW5nIGZsYXNoY2FyZHMgdG8gQW5raS5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rPVwiaHR0cHM6Ly9hbmtpd2ViLm5ldC9zaGFyZWQvaW5mby83MzQ4OTg4NjZcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPVwiZmFzIGZhLWJvbHRcIi8+XG5cbiAgICAgICAgICAgICAgICAgICAgPExpbmtEcm9wZG93bkl0ZW0gaWQ9XCJkb3dubG9hZC1kZXNrdG9wXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuPXshIChBcHBSdW50aW1lLmlzQnJvd3NlcigpICYmIFBsYXRmb3Jtcy50eXBlKCkgPT09ICdkZXNrdG9wJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiRG93bmxvYWQgUG9sYXIgRGVza3RvcFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9XCJEb3dubG9hZCBQb2xhciBmb3IgdGhlIERlc2t0b3BcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rPVwiaHR0cHM6Ly9nZXRwb2xhcml6ZWQuaW8vZG93bmxvYWQuaHRtbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249XCJmYXMgZmEtZmlsZS1kb3dubG9hZFwiLz5cblxuICAgICAgICAgICAgICAgICAgICA8TGlua0Ryb3Bkb3duSXRlbSBpZD1cImxpbmstdXNlLXdlYmFwcFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbj17ISBBcHBSdW50aW1lLmlzRWxlY3Ryb24oKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJVc2UgUG9sYXIgV2ViYXBwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcD1cIkxvYWQgdGhlIFBvbGFyIHdlYmFwcFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms9XCJodHRwczovL2FwcC5nZXRwb2xhcml6ZWQuaW8vXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj1cImZhYiBmYS1odG1sNVwiLz5cblxuICAgICAgICAgICAgICAgICAgICB7Lyo8TGlua0Ryb3Bkb3duSXRlbSBpZD1cInJlZGRpdC1saW5rXCIqL31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qdGl0bGU9XCJSZWRkaXRcIiovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Lyp0b29sdGlwPVwiRGlzY3VzcyBQb2xhciBvbiB0aGUgaW4gdGhlIFBvbGFyQm9va3NoZWxmIHN1YnJlZGRpdC5cIiovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LypsaW5rPVwiaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL1BvbGFyQm9va3NoZWxmL1wiKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKmljb249XCJmYWIgZmEtcmVkZGl0XCIvPiovfVxuXG4gICAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW0gaGVhZGVyPlNvY2lhbCBNZWRpYTwvRHJvcGRvd25JdGVtPlxuXG4gICAgICAgICAgICAgICAgICAgIDxMaW5rRHJvcGRvd25JdGVtIGlkPVwiZGlzY29yZC1saW5rXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJEaXNjb3JkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcD1cIkNoYXQgd2l0aCBvdGhlciBQb2xhciB1c2VycyBsaXZlIG9uIERpc2NvcmQuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1cImh0dHBzOi8vZGlzY29yZC5nZy9HVDhNaEE2XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj1cImZhYiBmYS1kaXNjb3JkXCIvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxMaW5rRHJvcGRvd25JdGVtIGlkPVwicmVkZGl0LWxpbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIlJlZGRpdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9XCJEaXNjdXNzIFBvbGFyIG9uIHRoZSBpbiB0aGUgUG9sYXJCb29rc2hlbGYgc3VicmVkZGl0LlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms9XCJodHRwczovL3d3dy5yZWRkaXQuY29tL3IvUG9sYXJCb29rc2hlbGYvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj1cImZhYiBmYS1yZWRkaXRcIi8+XG5cbiAgICAgICAgICAgICAgICAgICAgPExpbmtEcm9wZG93bkl0ZW0gaWQ9XCJ0d2l0dGVyLWxpbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIlR3aXR0ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwPVwiVmlldyB0aGUgUG9sYXIgVHdpdHRlciBhY2NvdW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluaz1cImh0dHBzOi8vdHdpdHRlci5jb20vZ2V0cG9sYXJpemVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj1cImZhYiBmYS10d2l0dGVyXCIvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxMaW5rRHJvcGRvd25JdGVtIGlkPVwiZ2l0aHViLWxpbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIkdpdGh1YlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9XCJWaWV3IHRoZSBQb2xhciBHaXRodWIgcHJvamVjdC4gQ3JlYXRlIGlzc3VlcywgdmlldyBzb3VyY2UgY29kZSwgZXRjLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms9XCJodHRwczovL2dpdGh1Yi5jb20vYnVydG9uYXRvci9wb2xhci1ib29rc2hlbGZcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPVwiZmFiIGZhLWdpdGh1YlwiLz5cblxuICAgICAgICAgICAgICAgICAgICB7Lyo8RHJvcGRvd25JdGVtIGhlYWRlcj5QbGVhc2UgUmV2aWV3IFBvbGFyPC9Ecm9wZG93bkl0ZW0+Ki99XG5cbiAgICAgICAgICAgICAgICAgICAgey8qPExpbmtEcm9wZG93bkl0ZW0gaWQ9XCJkaXNjb3JkLWxpbmtcIiovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Lyp0aXRsZT1cIkRpc2NvcmRcIiovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Lyp0b29sdGlwPVwiQ2hhdCB3aXRoIG90aGVyIFBvbGFyIHVzZXJzIGxpdmUgb24gRGlzY29yZC5cIiovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LypsaW5rPVwiaHR0cHM6Ly9kaXNjb3JkLmdnL0dUOE1oQTZcIiovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyppY29uPVwiZmFiIGZhLWRpc2NvcmRcIi8+Ki99XG5cbiAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duTWVudT5cblxuICAgICAgICAgICAgICAgIHsvKlRPRE86IHVzZSB0aGUgZHJvcGRvd24gdG9vbHRpcCBjb2RlKi99XG5cbiAgICAgICAgICAgICAgICB7Lyo8U2ltcGxlVG9vbHRpcCB0YXJnZXQ9XCJsaW5rcy1kcm9wZG93blwiKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qcGxhY2VtZW50PVwiYm90dG9tXCI+Ki99XG5cbiAgICAgICAgICAgICAgICAgICAgey8qRXh0ZXJuYWwgbGlua3MgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgUG9sYXIuKi99XG5cbiAgICAgICAgICAgICAgICB7Lyo8L1NpbXBsZVRvb2x0aXA+Ki99XG5cbiAgICAgICAgICAgIDwvVW5jb250cm9sbGVkRHJvcGRvd24+XG4gICAgICAgICk7XG5cbiAgICB9XG5cblxufVxuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgICByZWFkb25seSBoaWRkZW4/OiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcblxufVxuIl19