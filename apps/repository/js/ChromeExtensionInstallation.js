"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AppRuntime_1 = require("../../../web/js/AppRuntime");
const RendererAnalytics_1 = require("../../../web/js/ga/RendererAnalytics");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const EXTENSION_URL = "https://chrome.google.com/webstore/detail/jkfdkjomocoaljglgddnmhcbolldcafd";
class ChromeExtensionInstallation {
    static isChromeOrChromium() {
        return navigator.userAgent.includes("Chrome") || navigator.userAgent.includes("Chromium");
    }
    static isSupported() {
        return AppRuntime_1.AppRuntime.isBrowser() && this.isChromeOrChromium();
    }
    static requiresInstall() {
        return this.isSupported() && !localStorage.getItem("skip-extension");
    }
    static isInstalled() {
        const anyChrome = chrome;
        if (!anyChrome) {
            return false;
        }
        const app = anyChrome.app;
        if (!app) {
            return false;
        }
        return Preconditions_1.isPresent(app.isInstalled) && app.isInstalled;
    }
    static doInstall(successCallback, failureCallback) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'chrome-extension', action: 'inline-installation-triggered' });
        const handleSuccess = () => {
            RendererAnalytics_1.RendererAnalytics.event({ category: 'chrome-extension-install-result', action: 'install-successful' });
            successCallback();
        };
        const handleFailure = (error, errorCode) => {
            RendererAnalytics_1.RendererAnalytics.event({ category: 'chrome-extension-install-result', action: 'install-failed' });
            if (errorCode) {
                RendererAnalytics_1.RendererAnalytics.event({ category: 'chrome-extension-failures', action: errorCode });
            }
            failureCallback(error, errorCode);
        };
        chrome.webstore.install(EXTENSION_URL, handleSuccess, handleFailure);
    }
}
exports.ChromeExtensionInstallation = ChromeExtensionInstallation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hyb21lRXh0ZW5zaW9uSW5zdGFsbGF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQ2hyb21lRXh0ZW5zaW9uSW5zdGFsbGF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkRBQXNEO0FBQ3RELDRFQUF1RTtBQUN2RSxrRUFBeUQ7QUFFekQsTUFBTSxhQUFhLEdBQUcsNEVBQTRFLENBQUM7QUFRbkcsTUFBYSwyQkFBMkI7SUFFN0IsTUFBTSxDQUFDLGtCQUFrQjtRQUM1QixPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFFTSxNQUFNLENBQUMsV0FBVztRQUNyQixPQUFPLHVCQUFVLENBQUMsU0FBUyxFQUFFLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDL0QsQ0FBQztJQUVNLE1BQU0sQ0FBQyxlQUFlO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFTSxNQUFNLENBQUMsV0FBVztRQUdyQixNQUFNLFNBQVMsR0FBUSxNQUFNLENBQUM7UUFFOUIsSUFBSSxDQUFFLFNBQVMsRUFBRTtZQUNiLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBR0QsTUFBTSxHQUFHLEdBQVEsU0FBUyxDQUFDLEdBQUcsQ0FBQztRQUUvQixJQUFJLENBQUUsR0FBRyxFQUFFO1lBQ1AsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxPQUFPLHlCQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUM7SUFDekQsQ0FBQztJQU1NLE1BQU0sQ0FBQyxTQUFTLENBQUMsZUFBMkIsRUFDM0IsZUFBNEQ7UUFFaEYscUNBQWlCLENBQUMsS0FBSyxDQUFDLEVBQUMsUUFBUSxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRSwrQkFBK0IsRUFBQyxDQUFDLENBQUM7UUFFakcsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO1lBQ3ZCLHFDQUFpQixDQUFDLEtBQUssQ0FBQyxFQUFDLFFBQVEsRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLEVBQUUsb0JBQW9CLEVBQUMsQ0FBQyxDQUFDO1lBQ3JHLGVBQWUsRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQztRQUVGLE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBYSxFQUFFLFNBQWtCLEVBQUUsRUFBRTtZQUV4RCxxQ0FBaUIsQ0FBQyxLQUFLLENBQUMsRUFBQyxRQUFRLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixFQUFDLENBQUMsQ0FBQztZQUVqRyxJQUFJLFNBQVMsRUFBRTtnQkFDWCxxQ0FBaUIsQ0FBQyxLQUFLLENBQUMsRUFBQyxRQUFRLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7YUFDdkY7WUFFRCxlQUFlLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQztRQUVGLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFekUsQ0FBQztDQUVKO0FBOURELGtFQThEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXBwUnVudGltZX0gZnJvbSAnLi4vLi4vLi4vd2ViL2pzL0FwcFJ1bnRpbWUnO1xuaW1wb3J0IHtSZW5kZXJlckFuYWx5dGljc30gZnJvbSAnLi4vLi4vLi4vd2ViL2pzL2dhL1JlbmRlcmVyQW5hbHl0aWNzJztcbmltcG9ydCB7aXNQcmVzZW50fSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL1ByZWNvbmRpdGlvbnMnO1xuXG5jb25zdCBFWFRFTlNJT05fVVJMID0gXCJodHRwczovL2Nocm9tZS5nb29nbGUuY29tL3dlYnN0b3JlL2RldGFpbC9qa2Zka2pvbW9jb2FsamdsZ2Rkbm1oY2JvbGxkY2FmZFwiO1xuXG4vLyBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL3dlYnN0b3JlL2lubGluZV9pbnN0YWxsYXRpb25cbi8qKlxuICogQERlcHJlY2F0ZWQgY2hyb21lIGlubGluZSBpbnN0YWxsYXRpb24gbm8gbG9uZ2VyIHdvcmtzIHNvIEkgdGhpbmsgbW9zdCBvZlxuICogdGhpcyBjb2RlIGlzIHBvaW50bGVzcyBidXQgd2UgbWlnaHQgYmUgYWJsZSB0byB1c2UgdGhlIGlzSW5zdGFsbGVkIGZlYXR1cmVcbiAqIHRvIGRldGVjdCBpZiB0aGUgZXh0ZW5zaW9uIGlzIGFscmVhZHkgaW5zdGFsbGVkLlxuICovXG5leHBvcnQgY2xhc3MgQ2hyb21lRXh0ZW5zaW9uSW5zdGFsbGF0aW9uIHtcblxuICAgIHB1YmxpYyBzdGF0aWMgaXNDaHJvbWVPckNocm9taXVtKCkge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyhcIkNocm9tZVwiKSB8fCBuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKFwiQ2hyb21pdW1cIik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpc1N1cHBvcnRlZCgpIHtcbiAgICAgICAgcmV0dXJuIEFwcFJ1bnRpbWUuaXNCcm93c2VyKCkgJiYgdGhpcy5pc0Nocm9tZU9yQ2hyb21pdW0oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlcXVpcmVzSW5zdGFsbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTdXBwb3J0ZWQoKSAmJiAhIGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwic2tpcC1leHRlbnNpb25cIik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpc0luc3RhbGxlZCgpIHtcblxuICAgICAgICAvLyB3ZSBkb24ndCBoYXZlIGEgdHlwZSBmb3IgdGhpcyB5ZXQuXG4gICAgICAgIGNvbnN0IGFueUNocm9tZTogYW55ID0gY2hyb21lO1xuXG4gICAgICAgIGlmICghIGFueUNocm9tZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm8gdHlwZXNjcmlwdCBiaW5kaW5ncy4uLlxuICAgICAgICBjb25zdCBhcHA6IGFueSA9IGFueUNocm9tZS5hcHA7XG5cbiAgICAgICAgaWYgKCEgYXBwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNQcmVzZW50KGFwcC5pc0luc3RhbGxlZCkgJiYgYXBwLmlzSW5zdGFsbGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVHJpZ2dlciB0aGUgb25saW5lIGluc3RhbGxhdGlvbiBvZiB0aGUgZXh0ZW5zaW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZG9JbnN0YWxsKHN1Y2Nlc3NDYWxsYmFjazogKCkgPT4gdm9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsdXJlQ2FsbGJhY2s6IChlcnJvcjogc3RyaW5nLCBlcnJvckNvZGU/OiBzdHJpbmcpID0+IHZvaWQpIHtcblxuICAgICAgICBSZW5kZXJlckFuYWx5dGljcy5ldmVudCh7Y2F0ZWdvcnk6ICdjaHJvbWUtZXh0ZW5zaW9uJywgYWN0aW9uOiAnaW5saW5lLWluc3RhbGxhdGlvbi10cmlnZ2VyZWQnfSk7XG5cbiAgICAgICAgY29uc3QgaGFuZGxlU3VjY2VzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIFJlbmRlcmVyQW5hbHl0aWNzLmV2ZW50KHtjYXRlZ29yeTogJ2Nocm9tZS1leHRlbnNpb24taW5zdGFsbC1yZXN1bHQnLCBhY3Rpb246ICdpbnN0YWxsLXN1Y2Nlc3NmdWwnfSk7XG4gICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBoYW5kbGVGYWlsdXJlID0gKGVycm9yOiBzdHJpbmcsIGVycm9yQ29kZT86IHN0cmluZykgPT4ge1xuXG4gICAgICAgICAgICBSZW5kZXJlckFuYWx5dGljcy5ldmVudCh7Y2F0ZWdvcnk6ICdjaHJvbWUtZXh0ZW5zaW9uLWluc3RhbGwtcmVzdWx0JywgYWN0aW9uOiAnaW5zdGFsbC1mYWlsZWQnfSk7XG5cbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUpIHtcbiAgICAgICAgICAgICAgICBSZW5kZXJlckFuYWx5dGljcy5ldmVudCh7Y2F0ZWdvcnk6ICdjaHJvbWUtZXh0ZW5zaW9uLWZhaWx1cmVzJywgYWN0aW9uOiBlcnJvckNvZGV9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmFpbHVyZUNhbGxiYWNrKGVycm9yLCBlcnJvckNvZGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNocm9tZS53ZWJzdG9yZS5pbnN0YWxsKEVYVEVOU0lPTl9VUkwsIGhhbmRsZVN1Y2Nlc3MsIGhhbmRsZUZhaWx1cmUpO1xuXG4gICAgfVxuXG59XG4iXX0=