"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const reactstrap_1 = require("reactstrap");
const Percentages_1 = require("polar-shared/src/util/Percentages");
const Platforms_1 = require("polar-shared/src/util/Platforms");
const Row_1 = require("../../../../web/js/ui/layout/Row");
const FlashcardCard_1 = require("./cards/FlashcardCard");
const ReadingCard_1 = require("./cards/ReadingCard");
class Reviewer extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.onRating = this.onRating.bind(this);
        this.doNext = this.doNext.bind(this);
        this.onSuspended = this.onSuspended.bind(this);
        const pending = [...this.props.taskReps];
        const total = this.props.taskReps.length;
        const taskRep = pending.shift();
        this.state = {
            taskRep, pending, total, finished: 0
        };
    }
    render() {
        const taskRep = this.state.taskRep;
        if (!taskRep) {
            console.log("No tasks were given");
            return React.createElement("div", null);
        }
        const { id, action, created, color } = taskRep;
        const perc = Math.floor(Percentages_1.Percentages.calculate(this.state.finished, this.state.total));
        const createProgressText = () => {
            if (this.state.finished === 0) {
                return "";
            }
            return `${this.state.finished + 1} of ${this.state.total}`;
        };
        const style = {
            display: 'flex',
            flexDirection: 'column',
            background: 'var(--white)'
        };
        if (Platforms_1.Platforms.isMobile()) {
            style.width = '100%';
            style.height = '100%';
        }
        else {
            style.maxHeight = '1000px';
            style.width = '800px';
            style.maxWidth = '800px';
        }
        const DoReadingCard = () => {
            const readingTaskRep = taskRep;
            return React.createElement(ReadingCard_1.ReadingCard, { taskRep: readingTaskRep, onRating: (_, rating) => this.onRating(taskRep, rating) });
        };
        const DoFlashcardCard = () => {
            const flashcardTaskRep = taskRep;
            const flashcardTaskAction = flashcardTaskRep.action;
            const front = flashcardTaskAction.front;
            const back = flashcardTaskAction.back;
            return React.createElement(FlashcardCard_1.FlashcardCard, { taskRep: flashcardTaskRep, front: front, back: back, onRating: (_, rating) => this.onRating(taskRep, rating) });
        };
        const Card = () => {
            if (typeof action === 'string') {
                return React.createElement(DoReadingCard, null);
            }
            else {
                return React.createElement(DoFlashcardCard, null);
            }
        };
        return (React.createElement("div", { style: style, className: "ml-auto mr-auto h-100 border p-1" },
            React.createElement(Row_1.Row, null,
                React.createElement(Row_1.Row.Main, null,
                    React.createElement("b", null, "Review")),
                React.createElement(Row_1.Row.Right, null,
                    React.createElement(reactstrap_1.Button, { size: "md", color: "light", className: "text-muted mr-1", onClick: () => this.onSuspended(taskRep) },
                        React.createElement("i", { className: "fas fa-pause" }),
                        " suspend"),
                    React.createElement(reactstrap_1.Button, { size: "md", color: "light", className: "text-muted", onClick: () => this.props.onFinished(true) },
                        React.createElement("i", { className: "far fa-times-circle" })))),
            React.createElement("div", { className: "pt-1 pb-1" },
                React.createElement(reactstrap_1.Progress, { value: perc }, createProgressText())),
            React.createElement(Card, null)));
    }
    onSuspended(taskRep) {
        this.props.onSuspended(taskRep);
        this.doNext();
    }
    onRating(taskRep, rating) {
        this.props.onRating(taskRep, rating);
        this.doNext();
    }
    doNext() {
        const taskRep = this.state.pending.shift();
        if (!taskRep) {
            this.props.onFinished();
        }
        this.setState(Object.assign(Object.assign({}, this.state), { taskRep, finished: this.state.finished + 1 }));
    }
}
exports.Reviewer = Reviewer;
//# sourceMappingURL=data:application/json;base64,