"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Creatable_1 = __importDefault(require("react-select/lib/Creatable"));
const TagOptions_1 = require("./TagOptions");
const Tags_1 = require("polar-shared/src/tags/Tags");
const Logger_1 = require("polar-shared/src/logger/Logger");
const Button_1 = __importDefault(require("reactstrap/lib/Button"));
const Popover_1 = __importDefault(require("reactstrap/lib/Popover"));
const PopoverBody_1 = __importDefault(require("reactstrap/lib/PopoverBody"));
const Toaster_1 = require("../../../web/js/ui/toaster/Toaster");
const IDs_1 = require("../../../web/js/util/IDs");
const Functions_1 = require("polar-shared/src/util/Functions");
const PremiumFeature_1 = require("../../../web/js/ui/premium_feature/PremiumFeature");
const BlackoutBox_1 = require("../../../web/js/ui/util/BlackoutBox");
const log = Logger_1.Logger.create();
const Styles = {
    popover: {
        backgroundColor: 'var(--white)',
        width: '500px !important',
        maxWidth: '9999px !important'
    },
    label: {
        fontWeight: 'bold'
    },
    relatedTags: {
        display: 'flex',
    },
    relatedTagsLabel: {
        marginTop: 'auto',
        marginBottom: 'auto'
    },
    relatedTag: {
        display: 'inline-block',
        backgroundColor: 'var(--grey100)',
        color: 'hsl(0,0%,20%)',
        fontSize: '12px',
        padding: '3px',
        marginTop: 'auto',
        marginBottom: 'auto'
    }
};
class TagInput extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.id = IDs_1.IDs.create("popover-");
        this.select = null;
        this.activate = this.activate.bind(this);
        this.deactivate = this.deactivate.bind(this);
        this.onCancel = this.onCancel.bind(this);
        this.onDone = this.onDone.bind(this);
        this.handleChange = this.handleChange.bind(this);
        this.state = {
            open: false,
            pendingTags: []
        };
    }
    activate() {
        const pendingTags = this.props.existingTags ? this.props.existingTags() : [];
        this.setState({ open: true, pendingTags });
    }
    deactivate() {
        this.setState({ open: false });
    }
    render() {
        const availableTagOptions = TagOptions_1.TagOptions.fromTags(this.props.availableTags);
        const pendingTags = TagOptions_1.TagOptions.fromTags(this.state.pendingTags);
        const computeRelatedTags = () => {
            const input = [...this.state.pendingTags]
                .map(current => current.label);
            return this.props.relatedTags.compute(input).map(current => current.tag);
        };
        const relatedTags = computeRelatedTags();
        const RelatedTagsItems = () => {
            return React.createElement("span", null, relatedTags.map(item => React.createElement(Button_1.default, { className: "mr-1", key: item, style: Styles.relatedTag, color: "light", size: "sm", onClick: () => this.addRelatedTag(item) }, item)));
        };
        const RelatedTagsWidget = () => {
            if (relatedTags.length === 0) {
                return null;
            }
            return React.createElement("div", { style: Styles.relatedTags },
                React.createElement("div", { className: "mr-1", style: Styles.relatedTagsLabel },
                    React.createElement("strong", null, "Related tags: ")),
                React.createElement(RelatedTagsItems, null));
        };
        return (React.createElement("div", { className: "mt-auto mb-auto" },
            React.createElement("i", { id: this.id, onClick: () => this.activate(), className: "fa fa-tag doc-button doc-button-inactive" }),
            React.createElement(Popover_1.default, { placement: "auto", isOpen: this.state.open, target: this.id, fade: false, delay: 0, toggle: () => this.deactivate(), className: "tag-input-popover shadow" },
                React.createElement(PopoverBody_1.default, { style: Styles.popover, className: "shadow rounded" },
                    React.createElement(BlackoutBox_1.BlackoutBox, null,
                        React.createElement("div", { className: "bg-white" },
                            React.createElement("div", { className: "pt-1 pb-1" },
                                React.createElement("strong", null, "Assign tags to document:")),
                            React.createElement(Creatable_1.default, { isMulti: true, isClearable: true, autoFocus: true, onKeyDown: event => this.onKeyDown(event), className: "basic-multi-select", classNamePrefix: "select", onChange: (selectedOptions) => this.handleChange(selectedOptions), value: pendingTags, defaultValue: pendingTags, placeholder: "Create or select tags ...", options: availableTagOptions, ref: ref => this.select = ref }),
                            React.createElement("div", { className: "pt-1" },
                                React.createElement(PremiumFeature_1.PremiumFeature, { required: 'bronze', size: 'sm', feature: "related tags" },
                                    React.createElement(RelatedTagsWidget, null))),
                            React.createElement("div", { className: "mt-1" },
                                React.createElement("div", { style: { display: 'flex' } },
                                    React.createElement("div", { className: "ml-auto" }),
                                    React.createElement(Button_1.default, { color: "secondary", size: "sm", onClick: () => this.onCancel() }, "Cancel"),
                                    React.createElement("div", { className: "ml-1" }),
                                    React.createElement(Button_1.default, { color: "primary", size: "sm", onClick: () => this.onDone() }, "Done")))))))));
    }
    addRelatedTag(label) {
        const tag = {
            id: label,
            label
        };
        const tags = [tag, ...this.state.pendingTags];
        this.handleChange(TagOptions_1.TagOptions.fromTags(tags));
        this.select.focus();
    }
    onCancel() {
        this.setState(Object.assign(Object.assign({}, this.state), { open: false }));
    }
    onDone() {
        this.setState(Object.assign(Object.assign({}, this.state), { open: false }));
        const onChange = this.props.onChange || Functions_1.NULL_FUNCTION;
        onChange(this.state.pendingTags);
    }
    onKeyDown(event) {
        if (event.key === "Escape") {
            this.onCancel();
        }
        if (event.getModifierState("Control") && event.key === "Enter") {
            this.onDone();
        }
    }
    handleChange(selectedOptions) {
        const tags = TagOptions_1.TagOptions.toTags(selectedOptions);
        const validTags = Tags_1.Tags.findValidTags(...tags);
        const invalidTags = Tags_1.Tags.findInvalidTags(...tags);
        if (invalidTags.length !== 0) {
            const invalidTagsStr = invalidTags.map(current => current.label)
                .join(", ");
            Toaster_1.Toaster.warning("Some tags were excluded - spaces and other control characters not supported: " + invalidTagsStr, "Invalid tags");
            log.warn("Some tags were invalid", invalidTags);
        }
        this.setState(Object.assign(Object.assign({}, this.state), { pendingTags: validTags }));
    }
}
exports.TagInput = TagInput;
//# sourceMappingURL=data:application/json;base64,