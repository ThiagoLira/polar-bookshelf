"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Blackout_1 = require("../../../web/js/ui/blackout/Blackout");
const NavLogo_1 = require("./nav/NavLogo");
const RepoSidebarItem_1 = require("./sidebar/RepoSidebarItem");
const GDPRNotice_1 = require("../../../web/js/ui/gdpr/GDPRNotice");
const Button_1 = __importDefault(require("reactstrap/lib/Button"));
const ListGroup_1 = __importDefault(require("reactstrap/lib/ListGroup"));
const SimpleTooltipEx_1 = require("../../../web/js/ui/tooltip/SimpleTooltipEx");
const SimpleTabs_1 = require("../../../web/js/ui/simple_tab/SimpleTabs");
const Platforms_1 = require("polar-shared/src/util/Platforms");
const NullCollapse_1 = require("../../../web/js/ui/null_collapse/NullCollapse");
const Styles = {
    sidebar: {
        position: 'absolute',
        top: 0,
        left: 0,
        backgroundColor: '#fff',
        zIndex: 99999,
        height: 'calc(100%)',
        width: '200px',
    },
    subheader: {
        display: 'table'
    },
    subheaderItem: {}
};
class RepoSidebar extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.state = {
            expanded: false
        };
        window.addEventListener('keyup', event => {
            if (event.key === "Escape") {
                if (this.state.expanded) {
                    this.setState({ expanded: false });
                }
            }
        });
    }
    componentDidUpdate(prevProps, prevState, snapshot) {
        if (prevState.expanded !== this.state.expanded) {
            Blackout_1.Blackout.toggle(this.state.expanded);
        }
    }
    render() {
        const display = this.state.expanded ? 'block' : 'none';
        const sidebarStyle = Object.assign({}, Styles.sidebar, { display });
        const NavButtons = () => (React.createElement("div", { style: { display: 'flex' } },
            React.createElement("div", { className: "mt-auto mb-auto" },
                React.createElement(NullCollapse_1.NullCollapse, { open: !isMobile },
                    React.createElement(SimpleTooltipEx_1.SimpleTooltipEx, { text: "Toggle showing the sidebar" },
                        React.createElement("div", { id: "toggle-sidebar", className: "mr-1" },
                            React.createElement(Button_1.default, { color: 'light', onClick: () => this.toggle() },
                                React.createElement("i", { className: "fas fa-bars" })))))),
            React.createElement("div", { className: "mt-auto mb-auto" },
                React.createElement(NavLogo_1.NavLogo, null)),
            React.createElement("div", { className: "mt-auto mb-auto d-none-mobile" },
                React.createElement("div", { className: "ml-4" },
                    React.createElement(SimpleTabs_1.SimpleTabs, null)))));
        const isMobile = Platforms_1.Platforms.isMobile();
        return (React.createElement("div", { className: "repo-sidebar" },
            React.createElement(GDPRNotice_1.GDPRNotice, null),
            React.createElement("div", null,
                React.createElement(NavButtons, null)),
            React.createElement("section", { className: "sidebar", style: sidebarStyle, "data-expanded": this.state.expanded, onKeyUp: event => this.onKeyUp(event) },
                React.createElement("div", { className: "subheader", style: Styles.subheader },
                    React.createElement(NavButtons, null)),
                React.createElement(NullCollapse_1.NullCollapse, { open: !isMobile },
                    React.createElement(ListGroup_1.default, { flush: true },
                        React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-documents", tooltip: "Manage all documents you're reading including filtering and sorting.", target: { pathname: "/" }, onClick: () => this.toggle(), iconClassName: "fas fa-archive", text: "Documents" }),
                        React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-annotations", tooltip: "Manage all annotations of all your documents in one central view.", target: { pathname: "/", hash: "annotations" }, onClick: () => this.toggle(), iconClassName: "fas fa-layer-group", text: "Annotations" }),
                        React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-groups", tooltip: "Show public groups", target: { pathname: "/groups" }, onClick: () => this.toggle(), iconClassName: "fas fa-user-friends", text: "Groups" }),
                        React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-stats", tooltip: "Show stats on your usage of Polar including stats on tags, rate of document addition, etc.", target: { pathname: "/", hash: "stats" }, onClick: () => this.toggle(), iconClassName: "fas fa-chart-line", text: "Statistics" }),
                        React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-logs", tooltip: "Show logs on internal activity during background operations like cloud activity and sync.", target: { pathname: "/", hash: "logs" }, onClick: () => this.toggle(), iconClassName: "fas fa-info-circle", text: "Logs" }),
                        React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-support", tooltip: "Get support for Polar.", target: { pathname: "/", hash: "support" }, onClick: () => this.toggle(), iconClassName: "fas fa-hands-helping", text: "Support" }),
                        React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-upgrade-to-premium", tooltip: "Upgrade to Polar Premium and get the best Polar experience possible.", target: { pathname: "/", hash: "plans" }, onClick: () => this.toggle(), iconClassName: "fas fa-certificate", text: "Upgrade to Premium" }),
                        React.createElement(RepoSidebarItem_1.RepoSidebarItem, { id: "sidebar-item-whatsnew", tooltip: "Find out what's new with each Polar release.", target: { pathname: "/", hash: "whats-new" }, onClick: () => this.toggle(), iconClassName: "fas fa-bullhorn", text: "Whats New" }))))));
    }
    onKeyUp(event) {
    }
    toggle() {
        const expanded = !this.state.expanded;
        Blackout_1.Blackout.toggle(expanded);
        this.setState({
            expanded
        });
    }
}
exports.RepoSidebar = RepoSidebar;
//# sourceMappingURL=data:application/json;base64,