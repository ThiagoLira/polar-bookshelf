"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Sets_1 = require("polar-shared/src/util/Sets");
class TagMembers {
    constructor(tag) {
        this.tag = tag;
        this.keys = new Set();
    }
    add(key) {
        this.keys.add(key);
    }
    remove(key) {
        this.keys.delete(key);
    }
    count() {
        return this.keys.size;
    }
    toArray() {
        return Sets_1.Sets.toArray(this.keys);
    }
}
class TagIndex {
    constructor() {
        this.backing = {};
    }
    add(key, tag) {
        if (!this.backing[tag.id]) {
            this.backing[tag.id] = new TagMembers(tag);
        }
        this.backing[tag.id].add(key);
    }
    remove(key, tag) {
        if (this.backing[tag.id]) {
            const tagSet = this.backing[tag.id];
            tagSet.remove(key);
            if (tagSet.count() === 0) {
                delete this.backing[tag.id];
            }
        }
    }
    toTagDescriptors() {
        return Object.values(this.backing).map(current => {
            return Object.assign(Object.assign({}, current.tag), { count: current.count(), members: current.toArray() });
        });
    }
}
class DataObjectIndex {
    constructor(toTags) {
        this.toTags = toTags;
        this.index = {};
        this.tags = new TagIndex();
    }
    add(key, data) {
        this.index[key] = data;
        for (const tag of this.toTags(data)) {
            this.tags.add(key, tag);
        }
    }
    remove(key) {
        const value = this.index[key];
        delete this.index[key];
        for (const tag of this.toTags(value)) {
            this.tags.remove(key, tag);
        }
    }
    values() {
        return Object.values(this.index);
    }
    size() {
        return Object.keys(this.index).length;
    }
    toTagDescriptors() {
        return this.tags.toTagDescriptors();
    }
}
exports.DataObjectIndex = DataObjectIndex;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YU9iamVjdEluZGV4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRGF0YU9iamVjdEluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEscURBQWdEO0FBT2hELE1BQU0sVUFBVTtJQUlaLFlBQW1DLEdBQVE7UUFBUixRQUFHLEdBQUgsR0FBRyxDQUFLO1FBRm5DLFNBQUksR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO0lBSWpDLENBQUM7SUFFTSxHQUFHLENBQUMsR0FBVztRQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0sTUFBTSxDQUFDLEdBQVc7UUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVNLEtBQUs7UUFDUixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzFCLENBQUM7SUFFTSxPQUFPO1FBQ1YsT0FBTyxXQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0NBRUo7QUFFRCxNQUFNLFFBQVE7SUFBZDtRQUVZLFlBQU8sR0FBK0IsRUFBRSxDQUFDO0lBc0NyRCxDQUFDO0lBcENVLEdBQUcsQ0FBQyxHQUFXLEVBQUUsR0FBUTtRQUU1QixJQUFJLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDOUM7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxHQUFXLEVBQUUsR0FBUTtRQUUvQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3RCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFbkIsSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUN0QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQy9CO1NBRUo7SUFFTCxDQUFDO0lBRU0sZ0JBQWdCO1FBRW5CLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzdDLHVDQUNPLE9BQU8sQ0FBQyxHQUFHLEtBQ2QsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFDdEIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFDNUI7UUFFTixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FFSjtBQU1ELE1BQWEsZUFBZTtJQU14QixZQUFvQyxNQUF5QztRQUF6QyxXQUFNLEdBQU4sTUFBTSxDQUFtQztRQUpyRSxVQUFLLEdBQXNCLEVBQUUsQ0FBQztRQUU5QixTQUFJLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUk5QixDQUFDO0lBRU0sR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFPO1FBQzNCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRXZCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDM0I7SUFFTCxDQUFDO0lBRU0sTUFBTSxDQUFDLEdBQVc7UUFDckIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdkIsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUM5QjtJQUVMLENBQUM7SUFFTSxNQUFNO1FBQ1QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sSUFBSTtRQUNQLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQzFDLENBQUM7SUFFTSxnQkFBZ0I7UUFDbkIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDeEMsQ0FBQztDQUVKO0FBekNELDBDQXlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGFnfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL3RhZ3MvVGFncyc7XG5pbXBvcnQge1RhZ0Rlc2NyaXB0b3J9IGZyb20gJy4uLy4uLy4uL3dlYi9qcy90YWdzL1RhZ05vZGUnO1xuaW1wb3J0IHtTZXRzfSBmcm9tIFwicG9sYXItc2hhcmVkL3NyYy91dGlsL1NldHNcIjtcblxuXG4vKipcbiAqIEtlZXBzIGFuIGluZGV4IG9mIG91ciB0YWcgYW5kIHRoZSBrZXlzIHdpdGhpbiB0aGlzIHRhZyBzbyB0aGF0IGFkZC9yZW1vdmVcbiAqIGlzIGlkZW1wb3RlbnQuXG4gKi9cbmNsYXNzIFRhZ01lbWJlcnMge1xuXG4gICAgcHJpdmF0ZSBrZXlzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHRhZzogVGFnKSB7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkKGtleTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMua2V5cy5hZGQoa2V5KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlKGtleTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMua2V5cy5kZWxldGUoa2V5KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleXMuc2l6ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9BcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIFNldHMudG9BcnJheSh0aGlzLmtleXMpO1xuICAgIH1cblxufVxuXG5jbGFzcyBUYWdJbmRleCB7XG5cbiAgICBwcml2YXRlIGJhY2tpbmc6IHtbaWQ6IHN0cmluZ106IFRhZ01lbWJlcnN9ID0ge307XG5cbiAgICBwdWJsaWMgYWRkKGtleTogc3RyaW5nLCB0YWc6IFRhZykge1xuXG4gICAgICAgIGlmICghIHRoaXMuYmFja2luZ1t0YWcuaWRdKSB7XG4gICAgICAgICAgICB0aGlzLmJhY2tpbmdbdGFnLmlkXSA9IG5ldyBUYWdNZW1iZXJzKHRhZyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJhY2tpbmdbdGFnLmlkXS5hZGQoa2V5KTtcblxuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmUoa2V5OiBzdHJpbmcsIHRhZzogVGFnKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuYmFja2luZ1t0YWcuaWRdKSB7XG4gICAgICAgICAgICBjb25zdCB0YWdTZXQgPSB0aGlzLmJhY2tpbmdbdGFnLmlkXTtcbiAgICAgICAgICAgIHRhZ1NldC5yZW1vdmUoa2V5KTtcblxuICAgICAgICAgICAgaWYgKHRhZ1NldC5jb3VudCgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYmFja2luZ1t0YWcuaWRdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyB0b1RhZ0Rlc2NyaXB0b3JzKCk6IFJlYWRvbmx5QXJyYXk8VGFnRGVzY3JpcHRvcj4ge1xuXG4gICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuYmFja2luZykubWFwKGN1cnJlbnQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5jdXJyZW50LnRhZyxcbiAgICAgICAgICAgICAgICBjb3VudDogY3VycmVudC5jb3VudCgpLFxuICAgICAgICAgICAgICAgIG1lbWJlcnM6IGN1cnJlbnQudG9BcnJheSgpXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH0pO1xuICAgIH1cblxufVxuXG4vKipcbiAqIFN0b3JlcyBnZW5lcmljIGRhdGEgb2JqZWN0cyBsaWtlIFJlcG9Eb2NJbmZvIG9yIFJlcG9Bbm5vdGF0aW9uIGFuZCBwcm92aWRlc1xuICogZ2VuZXJpYyB0YWcgc3RydWN0dXJlIG1ldGFkYXRhIHRvby5cbiAqL1xuZXhwb3J0IGNsYXNzIERhdGFPYmplY3RJbmRleDxEPiB7XG5cbiAgICBwcml2YXRlIGluZGV4OiB7W2lkOiBzdHJpbmddOiBEfSA9IHt9O1xuXG4gICAgcHJpdmF0ZSB0YWdzID0gbmV3IFRhZ0luZGV4KCk7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSB0b1RhZ3M6IChpbnB1dD86IEQpID0+IFJlYWRvbmx5QXJyYXk8VGFnPikge1xuXG4gICAgfVxuXG4gICAgcHVibGljIGFkZChrZXk6IHN0cmluZywgZGF0YTogRCkge1xuICAgICAgICB0aGlzLmluZGV4W2tleV0gPSBkYXRhO1xuXG4gICAgICAgIGZvciAoY29uc3QgdGFnIG9mIHRoaXMudG9UYWdzKGRhdGEpKSB7XG4gICAgICAgICAgICB0aGlzLnRhZ3MuYWRkKGtleSwgdGFnKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZShrZXk6IHN0cmluZykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaW5kZXhba2V5XTtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW5kZXhba2V5XTtcblxuICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiB0aGlzLnRvVGFncyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMudGFncy5yZW1vdmUoa2V5LCB0YWcpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgdmFsdWVzKCk6IFJlYWRvbmx5QXJyYXk8RD4ge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLmluZGV4KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2l6ZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5pbmRleCkubGVuZ3RoO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b1RhZ0Rlc2NyaXB0b3JzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWdzLnRvVGFnRGVzY3JpcHRvcnMoKTtcbiAgICB9XG5cbn1cbiJdfQ==