"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
class AnnotationRepoFilterBar extends React.PureComponent {
    constructor(props, context) {
        super(props, context);
    }
    render() {
        const Right = () => {
            if (this.props.right) {
                return this.props.right;
            }
            else {
                return React.createElement("div", null);
            }
        };
        return (React.createElement("div", { id: "filter-bar", className: "pr-1", style: {
                display: 'flex',
            } }));
    }
}
exports.AnnotationRepoFilterBar = AnnotationRepoFilterBar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW5ub3RhdGlvblJlcG9GaWx0ZXJCYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBbm5vdGF0aW9uUmVwb0ZpbHRlckJhci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsNkNBQStCO0FBTS9CLE1BQWEsdUJBQXdCLFNBQVEsS0FBSyxDQUFDLGFBQTZCO0lBRTVFLFlBQVksS0FBYSxFQUFFLE9BQVk7UUFDbkMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU0sTUFBTTtRQUVULE1BQU0sS0FBSyxHQUFHLEdBQUcsRUFBRTtZQUVmLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUU7Z0JBQ2xCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7YUFDM0I7aUJBQU07Z0JBQ0gsT0FBTyxnQ0FBTSxDQUFDO2FBQ2pCO1FBRUwsQ0FBQyxDQUFDO1FBRUYsT0FBTyxDQUVILDZCQUFLLEVBQUUsRUFBQyxZQUFZLEVBQ2YsU0FBUyxFQUFDLE1BQU0sRUFDaEIsS0FBSyxFQUFFO2dCQUNILE9BQU8sRUFBRSxNQUFNO2FBQ2xCLEdBd0JBLENBRVQsQ0FBQztJQUVOLENBQUM7Q0FFSjtBQXRERCwwREFzREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1RhZ3NEQn0gZnJvbSAnLi4vLi4vVGFnc0RCJztcbmltcG9ydCB7VXBkYXRlRmlsdGVyc0NhbGxiYWNrfSBmcm9tICcuLi9Bbm5vdGF0aW9uUmVwb0ZpbHRlcnNIYW5kbGVyJztcbmltcG9ydCB7UGxhY2VtZW50fSBmcm9tICdwb3BwZXIuanMnO1xuaW1wb3J0IHtJRG9jQW5ub3RhdGlvbn0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3dlYi9qcy9hbm5vdGF0aW9uX3NpZGViYXIvRG9jQW5ub3RhdGlvblwiO1xuXG5leHBvcnQgY2xhc3MgQW5ub3RhdGlvblJlcG9GaWx0ZXJCYXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzLCBjb250ZXh0OiBhbnkpIHtcbiAgICAgICAgc3VwZXIocHJvcHMsIGNvbnRleHQpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG5cbiAgICAgICAgY29uc3QgUmlnaHQgPSAoKSA9PiB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMucmlnaHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2Lz47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gKFxuXG4gICAgICAgICAgICA8ZGl2IGlkPVwiZmlsdGVyLWJhclwiXG4gICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInByLTFcIlxuICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgICB9fT5cblxuICAgICAgICAgICAgICAgIHsvKjxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyLWZpbHRlci1ib3ggbXItMSBwbC0xXCIqL31cbiAgICAgICAgICAgICAgICB7LyogICAgIHN0eWxlPXt7Ki99XG4gICAgICAgICAgICAgICAgey8qICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsKi99XG4gICAgICAgICAgICAgICAgey8qICAgICAgICAgbWFyZ2luVG9wOiAnYXV0bycsKi99XG4gICAgICAgICAgICAgICAgey8qICAgICAgICAgbWFyZ2luQm90dG9tOiAnYXV0bycsKi99XG4gICAgICAgICAgICAgICAgey8qICAgICAgICAgZmxleEdyb3c6IDEqL31cbiAgICAgICAgICAgICAgICB7LyogICAgIH19PiovfVxuXG4gICAgICAgICAgICAgICAgey8qICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyLWZpbHRlci1ib3ggbS0wXCI+Ki99XG5cbiAgICAgICAgICAgICAgICB7LyogICAgICAgIDxUZXh0RmlsdGVyIHVwZGF0ZUZpbHRlcnM9e3RoaXMucHJvcHMudXBkYXRlRmlsdGVyc30vPiovfVxuXG4gICAgICAgICAgICAgICAgey8qICAgIDwvZGl2PiovfVxuXG4gICAgICAgICAgICAgICAgey8qPC9kaXY+Ki99XG5cbiAgICAgICAgICAgICAgICB7LyovISo8SGlnaGxpZ2h0Q29sb3JGaWx0ZXJCdXR0b24gb25TZWxlY3RlZD17Y29sb3IgPT4gdGhpcy5wcm9wcy51cGRhdGVGaWx0ZXJzKHtjb2xvcn0pfS8+KiEvKi99XG5cbiAgICAgICAgICAgICAgICB7Lyo8U3RhcnRSZXZpZXdCdXR0b24gb25DbGljaz17KCkgPT4gUmV2aWV3ZXJzLnN0YXJ0KHRoaXMucHJvcHMucmVwb0Fubm90YXRpb25zLCAxMCl9Lz4qL31cblxuICAgICAgICAgICAgICAgIHsvKjxSaWdodC8+Ki99XG5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICk7XG5cbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHJvcHMge1xuXG4gICAgcmVhZG9ubHkgcmVwb0Fubm90YXRpb25zOiBSZWFkb25seUFycmF5PElEb2NBbm5vdGF0aW9uPjtcblxuICAgIC8qKlxuICAgICAqIEFuIGluZGV4IG9mIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIHRhZ3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFnc0RCUHJvdmlkZXI6ICgpID0+IFRhZ3NEQjtcblxuICAgIHJlYWRvbmx5IHVwZGF0ZUZpbHRlcnM6IFVwZGF0ZUZpbHRlcnNDYWxsYmFjaztcblxuICAgIC8qKlxuICAgICAqIFdoZW4gZGVmaW5lZCwgYSBKU1ggZWxlbWVudCB0byBkaXNwbGF5IG9uIHRoZSByaWdodCBvZiB0aGVcbiAgICAgKiBGaWx0ZXJCYXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmlnaHQ/OiBKU1guRWxlbWVudDtcblxuICAgIHJlYWRvbmx5IHRhZ1BvcG92ZXJQbGFjZW1lbnQ/OiBQbGFjZW1lbnQ7XG5cblxufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcblxufVxuIl19