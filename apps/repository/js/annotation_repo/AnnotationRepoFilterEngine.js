"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RendererAnalytics_1 = require("../../../../web/js/ga/RendererAnalytics");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const RepoDocAnnotations_1 = require("../RepoDocAnnotations");
const AnnotationRepoFiltersHandler_1 = require("./AnnotationRepoFiltersHandler");
const TagMatcher_1 = require("../../../../web/js/tags/TagMatcher");
const Strings_1 = require("polar-shared/src/util/Strings");
const HighlightColor_1 = require("polar-shared/src/metadata/HighlightColor");
class AnnotationRepoFilterEngine {
    constructor(repoAnnotationsProvider, onUpdated) {
        this.repoAnnotationsProvider = repoAnnotationsProvider;
        this.onUpdated = onUpdated;
        this.filters = new AnnotationRepoFiltersHandler_1.DefaultAnnotationRepoFilters();
    }
    onFiltered(filters) {
        this.filters = filters;
        this.doUpdate();
    }
    onProviderUpdated() {
        this.doUpdate();
    }
    doUpdate() {
        const repoAnnotations = this.repoAnnotationsProvider();
        this.onUpdated(this.filter(repoAnnotations));
    }
    filter(repoAnnotations) {
        repoAnnotations = this.doFilterValid(repoAnnotations);
        repoAnnotations = this.doFilterByText(repoAnnotations);
        repoAnnotations = this.doFilterByTags(repoAnnotations);
        repoAnnotations = this.doFilterByColor(repoAnnotations);
        repoAnnotations = this.doFilterByAnnotationTypes(repoAnnotations);
        return repoAnnotations;
    }
    doFilterByColor(repoAnnotations) {
        if (this.filters.colors.length > 0) {
            return repoAnnotations.filter(current => {
                const color = HighlightColor_1.HighlightColors.withDefaultColor(current.color);
                return this.filters.colors.includes(color);
            });
        }
        return repoAnnotations;
    }
    doFilterByAnnotationTypes(repoAnnotations) {
        if (this.filters.annotationTypes.length > 0) {
            return repoAnnotations.filter(current => this.filters.annotationTypes.includes(current.annotationType));
        }
        return repoAnnotations;
    }
    doFilterValid(repoAnnotations) {
        return repoAnnotations.filter(current => RepoDocAnnotations_1.RepoDocAnnotations.isValid(current));
    }
    doFilterByText(repoAnnotations) {
        if (!Strings_1.Strings.empty(this.filters.text)) {
            RendererAnalytics_1.RendererAnalytics.event({ category: 'annotation-view', action: 'filter-by-text' });
            return repoAnnotations
                .filter(current => Preconditions_1.isPresent(current.text))
                .filter(current => current.text.toLowerCase().indexOf(this.filters.text.toLowerCase()) >= 0);
        }
        return repoAnnotations;
    }
    doFilterFlagged(repoAnnotations) {
        if (this.filters.flagged) {
            return repoAnnotations.filter(current => current.docInfo.flagged);
        }
        return repoAnnotations;
    }
    doFilterArchived(repoAnnotations) {
        if (!this.filters.archived) {
            return repoAnnotations.filter(current => !current.docInfo.archived);
        }
        return repoAnnotations;
    }
    doFilterByTags(repoAnnotations) {
        const tags = this.filters.filteredTags.get()
            .filter(current => current.id !== '/');
        const tagMatcherFactory = new TagMatcher_1.TagMatcherFactory(tags);
        if (tags.length === 0) {
            return repoAnnotations;
        }
        return tagMatcherFactory.filter(repoAnnotations, current => Object.values(current.docInfo.tags || {}));
    }
}
exports.AnnotationRepoFilterEngine = AnnotationRepoFilterEngine;
//# sourceMappingURL=data:application/json;base64,