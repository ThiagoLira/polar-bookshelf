"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const AnnotationRepoTable_1 = __importDefault(require("./AnnotationRepoTable"));
const RepoAnnotationMetaView_1 = require("./RepoAnnotationMetaView");
const Dock_1 = require("../../../../web/js/ui/dock/Dock");
const Functions_1 = require("polar-shared/src/util/Functions");
const Devices_1 = require("../../../../web/js/util/Devices");
class PreviewAndMainViewDock extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.state = {};
    }
    render() {
        const onSelected = (repoAnnotation) => this.onRepoAnnotationSelected(repoAnnotation);
        if (Devices_1.Devices.get() === 'phone') {
            return React.createElement(PreviewAndMainViewDock.Phone, Object.assign({}, this.props, { repoAnnotation: this.state.repoAnnotation, onSelected: onSelected }));
        }
        else {
            return React.createElement(PreviewAndMainViewDock.Default, Object.assign({}, this.props, { repoAnnotation: this.state.repoAnnotation, onSelected: onSelected }));
        }
    }
    onRepoAnnotationSelected(repoAnnotation) {
        this.setState({ repoAnnotation });
    }
}
exports.default = PreviewAndMainViewDock;
PreviewAndMainViewDock.Main = class extends PreviewAndMainViewDock {
    render() {
        return (React.createElement("div", { style: {
                display: 'flex',
                flexDirection: 'column',
                height: '100%'
            } },
            React.createElement("div", { style: { overflowY: 'auto' } },
                React.createElement(AnnotationRepoTable_1.default, { persistenceLayerManager: this.props.persistenceLayerManager, updatedDocInfoEventDispatcher: this.props.updatedDocInfoEventDispatcher, repoDocMetaManager: this.props.repoDocMetaManager, repoDocMetaLoader: this.props.repoDocMetaLoader, data: this.props.data, onSelected: this.props.onSelected || Functions_1.NULL_FUNCTION }))));
    }
};
PreviewAndMainViewDock.Default = class extends PreviewAndMainViewDock {
    render() {
        return (React.createElement(Dock_1.Dock, { componentClassNames: {}, left: React.createElement(PreviewAndMainViewDock.Main, Object.assign({}, this.props)), right: React.createElement("div", { className: "mt-2 pl-1 pr-1" },
                React.createElement(RepoAnnotationMetaView_1.RepoAnnotationMetaView, { persistenceLayerManager: this.props.persistenceLayerManager, repoAnnotation: this.props.repoAnnotation })), side: 'left', initialWidth: 450 }));
    }
};
PreviewAndMainViewDock.Phone = class extends PreviewAndMainViewDock {
    render() {
        return (React.createElement(PreviewAndMainViewDock.Main, Object.assign({}, this.props)));
    }
};
//# sourceMappingURL=data:application/json;base64,