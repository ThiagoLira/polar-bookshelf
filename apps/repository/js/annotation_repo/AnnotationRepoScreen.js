"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const RepoHeader_1 = require("../repo_header/RepoHeader");
const MessageBanner_1 = require("../MessageBanner");
const FixedNav_1 = require("../FixedNav");
const PreviewAndMainViewDock_1 = __importDefault(require("./PreviewAndMainViewDock"));
const Dock_1 = require("../../../../web/js/ui/dock/Dock");
const TagTree_1 = require("../../../../web/js/ui/tree/TagTree");
const AnnotationRepoFilterEngine_1 = require("./AnnotationRepoFilterEngine");
const PersistenceLayerManagers_1 = require("../../../../web/js/datastore/PersistenceLayerManagers");
const RepoDocMetaLoaders_1 = require("../RepoDocMetaLoaders");
const AnnotationRepoFiltersHandler_1 = require("./AnnotationRepoFiltersHandler");
const ReleasingReactComponent_1 = __importDefault(require("../framework/ReleasingReactComponent"));
const Tags_1 = require("polar-shared/src/tags/Tags");
const FilteredTags_1 = require("../FilteredTags");
const TreeState_1 = require("../../../../web/js/ui/tree/TreeState");
const Row_1 = require("../../../../web/js/ui/layout/Row");
const Reviewers_1 = require("../reviewer/Reviewers");
const TextFilter_1 = require("./filter_bar/TextFilter");
const HighlightColorFilterButton_1 = require("./filter_bar/controls/color/HighlightColorFilterButton");
const AnnotationTypeSelector_1 = require("./filter_bar/controls/annotation_type/AnnotationTypeSelector");
const StartReviewDropdown_1 = require("./filter_bar/StartReviewDropdown");
const RepoFooter_1 = require("../repo_footer/RepoFooter");
class AnnotationRepoScreen extends ReleasingReactComponent_1.default {
    constructor(props, context) {
        super(props, context);
        this.selectedTags = [];
        this.selectedFolders = [];
        this.onSelectedFolders = this.onSelectedFolders.bind(this);
        this.onUpdatedTags = this.onUpdatedTags.bind(this);
        this.startReview = this.startReview.bind(this);
        this.state = {
            data: [],
            tags: [],
        };
        const onSelected = (values) => this.onSelectedFolders(values);
        this.treeState = new TreeState_1.TreeState(onSelected);
        const setStateInBackground = (state) => {
            setTimeout(() => {
                this.setState(state);
            }, 1);
        };
        const onUpdated = repoAnnotations => {
            const tags = this.props.repoDocMetaManager.repoDocAnnotationIndex.toTagDescriptors();
            const state = Object.assign(Object.assign({}, this.state), { data: repoAnnotations, tags });
            setStateInBackground(state);
        };
        const repoAnnotationsProvider = () => this.props.repoDocMetaManager.repoDocAnnotationIndex.values();
        const filterEngine = new AnnotationRepoFilterEngine_1.AnnotationRepoFilterEngine(repoAnnotationsProvider, onUpdated);
        this.filtersHandler = new AnnotationRepoFiltersHandler_1.AnnotationRepoFiltersHandler(filters => filterEngine.onFiltered(filters));
        const doRefresh = () => filterEngine.onProviderUpdated();
        PersistenceLayerManagers_1.PersistenceLayerManagers.onPersistenceManager(this.props.persistenceLayerManager, (persistenceLayer) => {
            this.releaser.register(persistenceLayer.addEventListener(() => doRefresh()));
        });
        this.releaser.register(RepoDocMetaLoaders_1.RepoDocMetaLoaders.addThrottlingEventListener(this.props.repoDocMetaLoader, () => doRefresh()));
        doRefresh();
    }
    render() {
        return (React.createElement(FixedNav_1.FixedNav, { id: "doc-repository", className: "annotations-view" },
            React.createElement("header", null,
                React.createElement(RepoHeader_1.RepoHeader, { persistenceLayerManager: this.props.persistenceLayerManager }),
                React.createElement(Row_1.Row, { id: "header-filter", className: "border-bottom p-1" },
                    React.createElement(Row_1.Row.Main, null,
                        React.createElement(StartReviewDropdown_1.StartReviewDropdown, { onFlashcards: () => this.startReview('flashcard'), onReading: () => this.startReview('reading') })),
                    React.createElement(Row_1.Row.Right, null,
                        React.createElement("div", { style: { display: 'flex' } },
                            React.createElement("div", { className: "mr-1" },
                                React.createElement(AnnotationTypeSelector_1.AnnotationTypeSelector, { selected: this.filtersHandler.filters.annotationTypes || [], onSelected: annotationTypes => this.filtersHandler.update({ annotationTypes }) })),
                            React.createElement("div", { className: "mr-1" },
                                React.createElement(HighlightColorFilterButton_1.HighlightColorFilterButton, { selected: this.filtersHandler.filters.colors, onSelected: selected => this.filtersHandler.update({ colors: selected }) })),
                            React.createElement("div", { className: "d-none-mobile" },
                                React.createElement(TextFilter_1.TextFilter, { updateFilters: filters => this.filtersHandler.update(filters) }))))),
                React.createElement(MessageBanner_1.MessageBanner, null)),
            React.createElement(Dock_1.Dock, { componentClassNames: {
                    left: 'd-none-mobile',
                    splitter: 'd-none-mobile'
                }, left: React.createElement("div", { style: {
                        display: 'flex',
                        flexDirection: 'column',
                        height: '100%',
                        overflow: 'auto',
                    } },
                    React.createElement("div", { className: "m-1" },
                        React.createElement(TagTree_1.TagTree, { tags: this.state.tags, treeState: this.treeState, rootTitle: "Folders", tagType: 'folder', noCreate: true }),
                        React.createElement(TagTree_1.TagTree, { tags: this.state.tags, treeState: this.treeState, rootTitle: "Tags", tagType: 'regular', filterDisabled: true, noCreate: true }))), right: React.createElement(PreviewAndMainViewDock_1.default, Object.assign({ data: this.state.data, updateFilters: filters => this.filtersHandler.update(filters) }, this.props)), side: 'left', initialWidth: 300 }),
            React.createElement(RepoFooter_1.RepoFooter, null)));
    }
    onSelectedFolders(selected) {
        this.selectedFolders = selected.map(current => Tags_1.Tags.create(current));
        this.onUpdatedTags();
    }
    onUpdatedTags() {
        const tags = [...this.selectedTags, ...this.selectedFolders];
        const filteredTags = new FilteredTags_1.FilteredTags();
        filteredTags.set(tags);
        this.filtersHandler.update({ filteredTags });
    }
    startReview(mode = 'reading') {
        const persistenceLayer = this.props.persistenceLayerManager.get();
        const datastoreCapabilities = persistenceLayer.capabilities();
        const prefs = persistenceLayer.datastore.getPrefs();
        Reviewers_1.Reviewers.start(datastoreCapabilities, prefs.get().prefs, this.state.data, mode, 10);
    }
}
exports.default = AnnotationRepoScreen;
//# sourceMappingURL=data:application/json;base64,