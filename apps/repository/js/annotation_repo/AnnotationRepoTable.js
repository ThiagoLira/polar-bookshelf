"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_table_1 = __importDefault(require("react-table"));
const ExtendedReactTable_1 = require("../util/ExtendedReactTable");
const AnnotationPreview_1 = require("./AnnotationPreview");
class AnnotationRepoTable extends ExtendedReactTable_1.ExtendedReactTable {
    constructor(props, context) {
        super(props, context);
        this.persistenceLayerManager = this.props.persistenceLayerManager;
        this.state = {};
    }
    onSelected(selected, repoAnnotation) {
        this.setState(Object.assign(Object.assign({}, this.state), { selected, repoAnnotation }));
        this.props.onSelected(repoAnnotation);
    }
    render() {
        const { data } = this.props;
        return (React.createElement("div", { id: "doc-repo-table" },
            React.createElement("div", { id: "doc-table" },
                React.createElement(react_table_1.default, { data: [...data], columns: [
                        {
                            Header: '',
                            accessor: 'title',
                            headerStyle: { display: 'none' },
                            style: { whiteSpace: 'normal' },
                            Cell: (row) => {
                                const id = 'annotation-title' + row.index;
                                const annotation = row.original;
                                return (React.createElement(AnnotationPreview_1.AnnotationPreview, { id: id, text: annotation.text, img: annotation.img, color: annotation.color, created: annotation.created }));
                            }
                        },
                        {
                            Header: 'Created',
                            accessor: 'created',
                            show: false,
                        },
                    ], defaultPageSize: 50, style: { height: '100%' }, showPageSizeOptions: false, noDataText: "No annotations available.", className: "-striped -highlight", defaultSorted: [
                        {
                            id: "created",
                            desc: true
                        }
                    ], getTrProps: (state, rowInfo) => {
                        const doSelect = () => {
                            if (rowInfo && rowInfo.original) {
                                const repoAnnotation = rowInfo.original;
                                this.onSelected(rowInfo.viewIndex, repoAnnotation);
                            }
                            else {
                            }
                        };
                        return {
                            onClick: (e) => {
                                doSelect();
                            },
                            onFocus: () => {
                                doSelect();
                            },
                            tabIndex: rowInfo ? rowInfo.viewIndex + 1 : undefined,
                            onKeyDown: (e) => {
                            },
                            style: {
                                borderWidth: '1px',
                                borderStyle: 'solid',
                                borderColor: rowInfo && rowInfo.viewIndex === this.state.selected ? '#00afec' : 'white',
                            }
                        };
                    }, getTdProps: (state, rowInfo, column, instance) => {
                        const singleClickColumns = [];
                        if (!singleClickColumns.includes(column.id)) {
                            return {
                                onDoubleClick: (e) => {
                                }
                            };
                        }
                        if (singleClickColumns.includes(column.id)) {
                            return {
                                onClick: ((e, handleOriginal) => {
                                    if (handleOriginal) {
                                        handleOriginal();
                                    }
                                })
                            };
                        }
                        return {};
                    } }))));
    }
}
exports.default = AnnotationRepoTable;
//# sourceMappingURL=data:application/json;base64,