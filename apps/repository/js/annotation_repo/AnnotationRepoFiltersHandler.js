"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FilteredTags_1 = require("../FilteredTags");
const SetArrays_1 = require("polar-shared/src/util/SetArrays");
class AnnotationRepoFiltersHandler {
    constructor(onFiltered) {
        this.onFiltered = onFiltered;
        this.filters = new DefaultAnnotationRepoFilters();
    }
    onToggleFlaggedOnly(value) {
        this.filters.flagged = value;
        this.dispatch();
    }
    onToggleFilterArchived(value) {
        this.filters.archived = value;
        this.dispatch();
    }
    onFilterByText(text) {
        this.filters.text = text;
        this.dispatch();
    }
    onFilterByTags(filteredTags) {
        this.filters.filteredTags = filteredTags;
        this.dispatch();
    }
    update(filters) {
        let modified = false;
        if (filters.flagged !== undefined) {
            this.filters.flagged = filters.flagged;
            modified = true;
        }
        if (filters.archived !== undefined) {
            this.filters.archived = filters.archived;
            modified = true;
        }
        if (filters.text !== undefined) {
            this.filters.text = filters.text;
            modified = true;
        }
        if (filters.filteredTags !== undefined) {
            this.filters.filteredTags = filters.filteredTags;
            modified = true;
        }
        if (filters.colors !== undefined &&
            !SetArrays_1.SetArrays.equal(this.filters.colors, filters.colors)) {
            this.filters.colors = filters.colors;
            modified = true;
        }
        if (filters.annotationTypes !== undefined &&
            !SetArrays_1.SetArrays.equal(this.filters.annotationTypes, filters.annotationTypes)) {
            this.filters.annotationTypes = filters.annotationTypes;
            modified = true;
        }
        if (modified) {
            this.dispatch();
        }
    }
    dispatch() {
        this.onFiltered(this.filters);
    }
}
exports.AnnotationRepoFiltersHandler = AnnotationRepoFiltersHandler;
class DefaultAnnotationRepoFilters {
    constructor() {
        this.archived = true;
        this.filteredTags = new FilteredTags_1.FilteredTags();
        this.flagged = false;
        this.text = "";
        this.annotationTypes = [];
        this.colors = [];
    }
}
exports.DefaultAnnotationRepoFilters = DefaultAnnotationRepoFilters;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW5ub3RhdGlvblJlcG9GaWx0ZXJzSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkFubm90YXRpb25SZXBvRmlsdGVyc0hhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrREFBNkM7QUFHN0MsK0RBQTBEO0FBTTFELE1BQWEsNEJBQTRCO0lBSXJDLFlBQW9CLFVBQTRCO1FBQTVCLGVBQVUsR0FBVixVQUFVLENBQWtCO1FBQzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSw0QkFBNEIsRUFBRSxDQUFDO0lBQ3RELENBQUM7SUFFTSxtQkFBbUIsQ0FBQyxLQUFjO1FBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVNLHNCQUFzQixDQUFDLEtBQWM7UUFDeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRU0sY0FBYyxDQUFDLElBQVk7UUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRU0sY0FBYyxDQUFDLFlBQTBCO1FBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUN6QyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQVFNLE1BQU0sQ0FBQyxPQUFxQztRQUUvQyxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFFckIsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1lBQ3ZDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDbkI7UUFFRCxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDekMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUNuQjtRQUVELElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztZQUNqQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1NBQ25CO1FBRUQsSUFBSSxPQUFPLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDO1lBQ2pELFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDbkI7UUFFRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssU0FBUztZQUM1QixDQUFFLHFCQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN4RCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQ3JDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDbkI7UUFFRCxJQUFJLE9BQU8sQ0FBQyxlQUFlLEtBQUssU0FBUztZQUNyQyxDQUFFLHFCQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUUxRSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDO1lBQ3ZELFFBQVEsR0FBRyxJQUFJLENBQUM7U0FFbkI7UUFFRCxJQUFJLFFBQVEsRUFBRTtZQUNWLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNuQjtJQUVMLENBQUM7SUFFTyxRQUFRO1FBQ1osSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUVKO0FBbEZELG9FQWtGQztBQW1DRCxNQUFhLDRCQUE0QjtJQUF6QztRQUVvQixhQUFRLEdBQVksSUFBSSxDQUFDO1FBRXpCLGlCQUFZLEdBQWlCLElBQUksMkJBQVksRUFBRSxDQUFDO1FBRWhELFlBQU8sR0FBWSxLQUFLLENBQUM7UUFFekIsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUVsQixvQkFBZSxHQUFrQyxFQUFFLENBQUM7UUFFcEQsV0FBTSxHQUFrQyxFQUFFLENBQUM7SUFFL0QsQ0FBQztDQUFBO0FBZEQsb0VBY0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ZpbHRlcmVkVGFnc30gZnJvbSAnLi4vRmlsdGVyZWRUYWdzJztcbmltcG9ydCB7SGlnaGxpZ2h0Q29sb3J9IGZyb20gXCJwb2xhci1zaGFyZWQvc3JjL21ldGFkYXRhL0lCYXNlSGlnaGxpZ2h0XCI7XG5pbXBvcnQge0Fubm90YXRpb25UeXBlfSBmcm9tIFwicG9sYXItc2hhcmVkL3NyYy9tZXRhZGF0YS9Bbm5vdGF0aW9uVHlwZVwiO1xuaW1wb3J0IHtTZXRBcnJheXN9IGZyb20gXCJwb2xhci1zaGFyZWQvc3JjL3V0aWwvU2V0QXJyYXlzXCI7XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGZpbHRlcnMgc28gdGhhdCB3ZSBjYW4ganVzdCBjYWxsIGEgZnVuY3Rpb24gdXBkYXRpbmdcbiAqIHVzIHdpdGggYWxsIHRoZSBmaWx0ZXJzIGF0IG9uY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBBbm5vdGF0aW9uUmVwb0ZpbHRlcnNIYW5kbGVyIHtcblxuICAgIHB1YmxpYyByZWFkb25seSBmaWx0ZXJzOiBNdXRhYmxlQW5ub3RhdGlvblJlcG9GaWx0ZXJzO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBvbkZpbHRlcmVkOiBGaWx0ZXJlZENhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuZmlsdGVycyA9IG5ldyBEZWZhdWx0QW5ub3RhdGlvblJlcG9GaWx0ZXJzKCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uVG9nZ2xlRmxhZ2dlZE9ubHkodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5maWx0ZXJzLmZsYWdnZWQgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvblRvZ2dsZUZpbHRlckFyY2hpdmVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuZmlsdGVycy5hcmNoaXZlZCA9IHZhbHVlO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uRmlsdGVyQnlUZXh0KHRleHQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmZpbHRlcnMudGV4dCA9IHRleHQ7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25GaWx0ZXJCeVRhZ3MoZmlsdGVyZWRUYWdzOiBGaWx0ZXJlZFRhZ3MpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJzLmZpbHRlcmVkVGFncyA9IGZpbHRlcmVkVGFncztcbiAgICAgICAgdGhpcy5kaXNwYXRjaCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgZmlsdGVycyB3aXRoIGEgZ2l2ZW4gc2V0IG9mIHBhcnRpYWwgZmlsdGVycyBhbmQgZGlzcGF0Y2hcbiAgICAgKiB3aGVuIG5lY2Vzc2FyeS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaWx0ZXJzXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZShmaWx0ZXJzOiBQYXJ0aWFsQW5ub3RhdGlvblJlcG9GaWx0ZXJzKSB7XG5cbiAgICAgICAgbGV0IG1vZGlmaWVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGZpbHRlcnMuZmxhZ2dlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmZpbHRlcnMuZmxhZ2dlZCA9IGZpbHRlcnMuZmxhZ2dlZDtcbiAgICAgICAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWx0ZXJzLmFyY2hpdmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVycy5hcmNoaXZlZCA9IGZpbHRlcnMuYXJjaGl2ZWQ7XG4gICAgICAgICAgICBtb2RpZmllZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlsdGVycy50ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVycy50ZXh0ID0gZmlsdGVycy50ZXh0O1xuICAgICAgICAgICAgbW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpbHRlcnMuZmlsdGVyZWRUYWdzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVycy5maWx0ZXJlZFRhZ3MgPSBmaWx0ZXJzLmZpbHRlcmVkVGFncztcbiAgICAgICAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWx0ZXJzLmNvbG9ycyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAhIFNldEFycmF5cy5lcXVhbCh0aGlzLmZpbHRlcnMuY29sb3JzLCBmaWx0ZXJzLmNvbG9ycykpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVycy5jb2xvcnMgPSBmaWx0ZXJzLmNvbG9ycztcbiAgICAgICAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWx0ZXJzLmFubm90YXRpb25UeXBlcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAhIFNldEFycmF5cy5lcXVhbCh0aGlzLmZpbHRlcnMuYW5ub3RhdGlvblR5cGVzLCBmaWx0ZXJzLmFubm90YXRpb25UeXBlcykpIHtcblxuICAgICAgICAgICAgdGhpcy5maWx0ZXJzLmFubm90YXRpb25UeXBlcyA9IGZpbHRlcnMuYW5ub3RhdGlvblR5cGVzO1xuICAgICAgICAgICAgbW9kaWZpZWQgPSB0cnVlO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kaWZpZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhpcy5vbkZpbHRlcmVkKHRoaXMuZmlsdGVycyk7XG4gICAgfVxuXG59XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhcHBsaWVkIGFubm90YXRpb24gZmlsdGVycy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNdXRhYmxlQW5ub3RhdGlvblJlcG9GaWx0ZXJzIHtcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgb25seSBzaG93IGZsYWdnZWQgZG9jdW1lbnRzLlxuICAgICAqL1xuICAgIGZsYWdnZWQ/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogIFdoZW4gdHJ1ZSwgc2hvdyBib3RoIGFyY2hpdmVkIGFuZCBub24tYXJjaGl2ZWQgZG9jdW1lbnRzLlxuICAgICAqL1xuICAgIGFyY2hpdmVkPzogYm9vbGVhbjtcblxuICAgIGNvbG9yczogUmVhZG9ubHlBcnJheTxIaWdobGlnaHRDb2xvcj47XG5cbiAgICB0ZXh0OiBzdHJpbmc7XG5cbiAgICBmaWx0ZXJlZFRhZ3M6IEZpbHRlcmVkVGFncztcblxuICAgIGFubm90YXRpb25UeXBlczogUmVhZG9ubHlBcnJheTxBbm5vdGF0aW9uVHlwZT47XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBbm5vdGF0aW9uUmVwb0ZpbHRlcnMgZXh0ZW5kcyBSZWFkb25seTxNdXRhYmxlQW5ub3RhdGlvblJlcG9GaWx0ZXJzPiB7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXJ0aWFsQW5ub3RhdGlvblJlcG9GaWx0ZXJzIGV4dGVuZHMgUGFydGlhbDxSZWFkb25seTxNdXRhYmxlQW5ub3RhdGlvblJlcG9GaWx0ZXJzPj4ge1xuXG59XG5cbmV4cG9ydCBjbGFzcyBEZWZhdWx0QW5ub3RhdGlvblJlcG9GaWx0ZXJzIGltcGxlbWVudHMgTXV0YWJsZUFubm90YXRpb25SZXBvRmlsdGVycyB7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXJjaGl2ZWQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IGZpbHRlcmVkVGFnczogRmlsdGVyZWRUYWdzID0gbmV3IEZpbHRlcmVkVGFncygpO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IGZsYWdnZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIHB1YmxpYyByZWFkb25seSB0ZXh0OiBzdHJpbmcgPSBcIlwiO1xuXG4gICAgcHVibGljIHJlYWRvbmx5IGFubm90YXRpb25UeXBlczogUmVhZG9ubHlBcnJheTxBbm5vdGF0aW9uVHlwZT4gPSBbXTtcblxuICAgIHB1YmxpYyByZWFkb25seSBjb2xvcnM6IFJlYWRvbmx5QXJyYXk8QW5ub3RhdGlvblR5cGU+ID0gW107XG5cbn1cblxuZXhwb3J0IHR5cGUgRmlsdGVyZWRDYWxsYmFjayA9IChmaWx0ZXJzOiBBbm5vdGF0aW9uUmVwb0ZpbHRlcnMpID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIFVwZGF0ZUZpbHRlcnNDYWxsYmFjayA9IChmaWx0ZXJzOiBQYXJ0aWFsQW5ub3RhdGlvblJlcG9GaWx0ZXJzKSA9PiB2b2lkO1xuIl19