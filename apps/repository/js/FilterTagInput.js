"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_select_1 = __importDefault(require("react-select"));
const Blackout_1 = require("../../../web/js/ui/blackout/Blackout");
const TagOptions_1 = require("./TagOptions");
const Button_1 = __importDefault(require("reactstrap/lib/Button"));
const Popover_1 = __importDefault(require("reactstrap/lib/Popover"));
const PopoverBody_1 = __importDefault(require("reactstrap/lib/PopoverBody"));
const SimpleTooltipEx_1 = require("../../../web/js/ui/tooltip/SimpleTooltipEx");
const Styles = {
    dropdownChevron: {
        display: 'inline-block',
        width: 0,
        height: 0,
        marginLeft: '.255em',
        verticalAlign: '.255em',
        borderTop: '.3em solid',
        borderRight: '.3em solid transparent',
        borderBottom: 0,
        borderLeft: '.3em solid transparent',
        color: 'var(--secondary)'
    }
};
class FilterTagInput extends React.PureComponent {
    constructor(props, context) {
        super(props, context);
        this.toggle = this.toggle.bind(this);
        this.handleChange = this.handleChange.bind(this);
        this.state = {
            open: false,
            defaultValue: []
        };
        this.id = this.props.id || "filter-tag-input";
    }
    render() {
        const options = TagOptions_1.TagOptions.fromTags(this.props.tagsDBProvider().tags());
        const tagsPopoverPlacement = this.props.tagPopoverPlacement || 'bottom';
        return (React.createElement("div", null,
            React.createElement(SimpleTooltipEx_1.SimpleTooltipEx, { text: this.props.tooltip || "", disabled: this.state.open },
                React.createElement(Button_1.default, { color: "light", id: this.id, size: "md", disabled: this.props.disabled, onClick: () => this.toggle(!this.state.open), className: "header-filter-clickable p-1 pl-2 pr-2 border" },
                    React.createElement("i", { className: "fa fa-tag doc-button doc-button-selectable mr-1" }),
                    React.createElement("span", { className: "d-none-mobile" }, "Tags"),
                    React.createElement("div", { style: Styles.dropdownChevron }))),
            React.createElement(Popover_1.default, { placement: tagsPopoverPlacement, isOpen: this.state.open, target: this.id, trigger: "legacy", fade: false, delay: 0, toggle: () => this.toggle(false), className: "tag-input-popover" },
                React.createElement(PopoverBody_1.default, { className: "shadow" },
                    React.createElement("div", { className: "pt-1 pb-1" },
                        React.createElement("strong", null, "Filter documents by tag:")),
                    React.createElement(react_select_1.default, { escapeClearsValue: true, isMulti: true, isClearable: true, autoFocus: true, onKeyDown: event => this.onKeyDown(event), className: "filter-tag-input", classNamePrefix: "select", onChange: this.handleChange, defaultValue: this.state.defaultValue, options: options })))));
    }
    onKeyDown(event) {
        if (event.key.toLowerCase() === "escape") {
            this.toggle(false);
        }
        if (event.getModifierState("Control") && event.key.toLowerCase() === "enter") {
            this.toggle(false);
        }
    }
    toggle(open) {
        Blackout_1.Blackout.toggle(open);
        this.setState(Object.assign(Object.assign({}, this.state), { open }));
    }
    handleChange(selectedOptions) {
        const defaultValue = selectedOptions;
        this.props.filteredTags.set(TagOptions_1.TagOptions.toTags(selectedOptions));
        this.props.refresher();
        Blackout_1.Blackout.disable();
        this.setState({ defaultValue, open: false });
    }
}
exports.FilterTagInput = FilterTagInput;
//# sourceMappingURL=data:application/json;base64,