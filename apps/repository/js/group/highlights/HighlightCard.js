"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const DocAnnotationComponent_1 = require("./annotations/DocAnnotationComponent");
const ProfileHeader_1 = require("./ProfileHeader");
const DocFooter_1 = require("./DocFooter");
const LoadingProgress_1 = require("../../../../../web/js/ui/LoadingProgress");
class HighlightCard extends React.Component {
    constructor(props, context) {
        super(props, context);
    }
    render() {
        const { docAnnotationProfileRecord } = this.props;
        if (!docAnnotationProfileRecord) {
            return React.createElement(LoadingProgress_1.LoadingProgress, null);
        }
        return (React.createElement("div", { className: "border-top border-left border-right p-2" },
            React.createElement("div", { style: { display: 'flex' } },
                React.createElement("div", { style: { flexGrow: 1 }, className: "mt-auto mb-auto" },
                    React.createElement(ProfileHeader_1.ProfileHeader, { groupName: this.props.groupName, docAnnotationProfileRecord: docAnnotationProfileRecord }))),
            React.createElement("div", null),
            React.createElement("div", { style: { display: 'flex' }, className: "mt-2" },
                React.createElement("div", { className: "text-grey600" },
                    React.createElement(DocAnnotationComponent_1.DocAnnotationComponent, { persistenceLayerProvider: this.props.persistenceLayerProvider, docAnnotationProfileRecord: docAnnotationProfileRecord }))),
            React.createElement("div", null,
                React.createElement(DocFooter_1.DocFooter, { persistenceLayerProvider: this.props.persistenceLayerProvider, groupID: this.props.groupID, docAnnotationProfileRecord: docAnnotationProfileRecord }))));
    }
}
exports.HighlightCard = HighlightCard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGlnaGxpZ2h0Q2FyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkhpZ2hsaWdodENhcmQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDZDQUErQjtBQUcvQixpRkFBNEU7QUFFNUUsbURBQThDO0FBQzlDLDJDQUFzQztBQUd0Qyw4RUFBeUU7QUFFekUsTUFBYSxhQUFjLFNBQVEsS0FBSyxDQUFDLFNBQXlCO0lBRTlELFlBQVksS0FBYSxFQUFFLE9BQVk7UUFDbkMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU0sTUFBTTtRQUVULE1BQU0sRUFBQywwQkFBMEIsRUFBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFaEQsSUFBSSxDQUFFLDBCQUEwQixFQUFFO1lBQzlCLE9BQU8sb0JBQUMsaUNBQWUsT0FBRSxDQUFDO1NBQzdCO1FBRUQsT0FBTyxDQUVILDZCQUFLLFNBQVMsRUFBQyx5Q0FBeUM7WUFFcEQsNkJBQUssS0FBSyxFQUFFLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBQztnQkFFekIsNkJBQUssS0FBSyxFQUFFLEVBQUMsUUFBUSxFQUFFLENBQUMsRUFBQyxFQUNwQixTQUFTLEVBQUMsaUJBQWlCO29CQUU1QixvQkFBQyw2QkFBYSxJQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFDL0IsMEJBQTBCLEVBQUUsMEJBQTBCLEdBQUcsQ0FFdEUsQ0FFSjtZQUVOLGdDQUVNO1lBRU4sNkJBQUssS0FBSyxFQUFFLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBQyxFQUFFLFNBQVMsRUFBQyxNQUFNO2dCQUUzQyw2QkFBSyxTQUFTLEVBQUMsY0FBYztvQkFFekIsb0JBQUMsK0NBQXNCLElBQUMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsRUFDN0QsMEJBQTBCLEVBQUUsMEJBQTBCLEdBQUcsQ0FVL0UsQ0FDSjtZQUVOO2dCQUVJLG9CQUFDLHFCQUFTLElBQUMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsRUFDN0QsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUMzQiwwQkFBMEIsRUFBRSwwQkFBMEIsR0FBRyxDQUVsRSxDQUVKLENBRVQsQ0FBQztJQUNOLENBQUM7Q0FFSjtBQWpFRCxzQ0FpRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1BlcnNpc3RlbmNlTGF5ZXJQcm92aWRlcn0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3dlYi9qcy9kYXRhc3RvcmUvUGVyc2lzdGVuY2VMYXllclwiO1xuaW1wb3J0IHtHcm91cERvY0Fubm90YXRpb259IGZyb20gXCIuLi8uLi8uLi8uLi8uLi93ZWIvanMvZGF0YXN0b3JlL3NoYXJpbmcvZGIvZG9jX2Fubm90YXRpb25zL0dyb3VwRG9jQW5ub3RhdGlvbnNcIjtcbmltcG9ydCB7RG9jQW5ub3RhdGlvbkNvbXBvbmVudH0gZnJvbSBcIi4vYW5ub3RhdGlvbnMvRG9jQW5ub3RhdGlvbkNvbXBvbmVudFwiO1xuaW1wb3J0IHtQcm9maWxlUmVjb3JkfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vd2ViL2pzL2RhdGFzdG9yZS9zaGFyaW5nL2RiL1Byb2ZpbGVKb2luc1wiO1xuaW1wb3J0IHtQcm9maWxlSGVhZGVyfSBmcm9tIFwiLi9Qcm9maWxlSGVhZGVyXCI7XG5pbXBvcnQge0RvY0Zvb3Rlcn0gZnJvbSBcIi4vRG9jRm9vdGVyXCI7XG5pbXBvcnQge0dyb3VwSURTdHJ9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi93ZWIvanMvZGF0YXN0b3JlL0RhdGFzdG9yZVwiO1xuaW1wb3J0IHtHcm91cE5hbWVTdHJ9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi93ZWIvanMvZGF0YXN0b3JlL3NoYXJpbmcvZGIvR3JvdXBzXCI7XG5pbXBvcnQge0xvYWRpbmdQcm9ncmVzc30gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3dlYi9qcy91aS9Mb2FkaW5nUHJvZ3Jlc3NcIjtcblxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodENhcmQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMsIGNvbnRleHQ6IGFueSkge1xuICAgICAgICBzdXBlcihwcm9wcywgY29udGV4dCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpIHtcblxuICAgICAgICBjb25zdCB7ZG9jQW5ub3RhdGlvblByb2ZpbGVSZWNvcmR9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBpZiAoISBkb2NBbm5vdGF0aW9uUHJvZmlsZVJlY29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIDxMb2FkaW5nUHJvZ3Jlc3MvPjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm9yZGVyLXRvcCBib3JkZXItbGVmdCBib3JkZXItcmlnaHQgcC0yXCI+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7ZGlzcGxheTogJ2ZsZXgnfX0+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e2ZsZXhHcm93OiAxfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtdC1hdXRvIG1iLWF1dG9cIj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPFByb2ZpbGVIZWFkZXIgZ3JvdXBOYW1lPXt0aGlzLnByb3BzLmdyb3VwTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY0Fubm90YXRpb25Qcm9maWxlUmVjb3JkPXtkb2NBbm5vdGF0aW9uUHJvZmlsZVJlY29yZH0vPlxuXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICB7Lyp7dGhpcy5wcm9wcy5vcmlnaW5hbH0qL31cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tkaXNwbGF5OiAnZmxleCd9fSBjbGFzc05hbWU9XCJtdC0yXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWdyZXk2MDBcIj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPERvY0Fubm90YXRpb25Db21wb25lbnQgcGVyc2lzdGVuY2VMYXllclByb3ZpZGVyPXt0aGlzLnByb3BzLnBlcnNpc3RlbmNlTGF5ZXJQcm92aWRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY0Fubm90YXRpb25Qcm9maWxlUmVjb3JkPXtkb2NBbm5vdGF0aW9uUHJvZmlsZVJlY29yZH0vPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICB7Lyo8TW9tZW50IHdpdGhUaXRsZT17dHJ1ZX0qL31cbiAgICAgICAgICAgICAgICAgICAgICAgIHsvKiAgICAgICAgdGl0bGVGb3JtYXQ9XCJEIE1NTSBZWVlZIGhoOk1NIEFcIiovfVxuICAgICAgICAgICAgICAgICAgICAgICAgey8qICAgICAgICBmb3JtYXQ9XCJNTU0gREQgWVlZWSBISDptbSBBXCIqL31cbiAgICAgICAgICAgICAgICAgICAgICAgIHsvKiAgICAgICAgYWdvKi99XG4gICAgICAgICAgICAgICAgICAgICAgICB7LyogICAgICAgIGZpbHRlcj17KHZhbHVlKSA9PiB2YWx1ZS5yZXBsYWNlKC9eYW4/IC9nLCAnMSAnKX0+Ki99XG4gICAgICAgICAgICAgICAgICAgICAgICB7LyogICAge3RoaXMucHJvcHMucHVibGlzaGVkfSovfVxuICAgICAgICAgICAgICAgICAgICAgICAgey8qPC9Nb21lbnQ+Ki99XG5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxEb2NGb290ZXIgcGVyc2lzdGVuY2VMYXllclByb3ZpZGVyPXt0aGlzLnByb3BzLnBlcnNpc3RlbmNlTGF5ZXJQcm92aWRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cElEPXt0aGlzLnByb3BzLmdyb3VwSUR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jQW5ub3RhdGlvblByb2ZpbGVSZWNvcmQ9e2RvY0Fubm90YXRpb25Qcm9maWxlUmVjb3JkfS8+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHJvcHMge1xuICAgIHJlYWRvbmx5IHBlcnNpc3RlbmNlTGF5ZXJQcm92aWRlcjogUGVyc2lzdGVuY2VMYXllclByb3ZpZGVyO1xuICAgIHJlYWRvbmx5IGdyb3VwTmFtZTogR3JvdXBOYW1lU3RyO1xuICAgIHJlYWRvbmx5IGdyb3VwSUQ6IEdyb3VwSURTdHI7XG4gICAgcmVhZG9ubHkgZG9jQW5ub3RhdGlvblByb2ZpbGVSZWNvcmQ/OiBQcm9maWxlUmVjb3JkPEdyb3VwRG9jQW5ub3RhdGlvbj47XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU3RhdGUge1xufVxuIl19