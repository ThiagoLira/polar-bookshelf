"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RepoDocInfos_1 = require("../RepoDocInfos");
const RendererAnalytics_1 = require("../../../../web/js/ga/RendererAnalytics");
const FilteredTags_1 = require("../FilteredTags");
const Optional_1 = require("polar-shared/src/util/ts/Optional");
const TagMatcher_1 = require("../../../../web/js/tags/TagMatcher");
const Strings_1 = require("polar-shared/src/util/Strings");
class DocRepoFilters {
    constructor(onRefreshed, repoDocInfosProvider) {
        this.onRefreshed = onRefreshed;
        this.repoDocInfosProvider = repoDocInfosProvider;
        this.filters = {
            flagged: false,
            archived: false,
            title: "",
            filteredTags: new FilteredTags_1.FilteredTags()
        };
    }
    onToggleFlaggedOnly(value) {
        this.filters.flagged = value;
        this.refresh();
    }
    onToggleFilterArchived(value) {
        this.filters.archived = value;
        this.refresh();
    }
    onFilterByTitle(title) {
        this.filters.title = title;
        this.refresh();
    }
    onTagged(tags) {
        const isRootTag = () => {
            return tags.length === 1 && tags[0].id === '/';
        };
        if (isRootTag()) {
            this.filters.filteredTags.set([]);
        }
        else {
            this.filters.filteredTags.set(tags);
        }
        this.refresh();
    }
    refresh() {
        this.onRefreshed(this.filter(this.repoDocInfosProvider()));
    }
    filter(repoDocInfos) {
        repoDocInfos = this.doFilterValid(repoDocInfos);
        repoDocInfos = this.doFilterByTitle(repoDocInfos);
        repoDocInfos = this.doFilterFlagged(repoDocInfos);
        repoDocInfos = this.doFilterArchived(repoDocInfos);
        repoDocInfos = this.doFilterByTags(repoDocInfos);
        return repoDocInfos;
    }
    doFilterValid(repoDocs) {
        return repoDocs.filter(current => RepoDocInfos_1.RepoDocInfos.isValid(current));
    }
    doFilterByTitle(repoDocs) {
        if (!Strings_1.Strings.empty(this.filters.title)) {
            const toSTR = (value) => {
                return Optional_1.Optional.of(value)
                    .getOrElse("")
                    .toLowerCase();
            };
            const searchString = toSTR(this.filters.title);
            return repoDocs.filter(current => {
                const title = toSTR(current.title);
                const filename = toSTR(current.filename);
                return title.includes(searchString) || filename.includes(searchString);
            });
        }
        return repoDocs;
    }
    doFilterFlagged(repoDocs) {
        if (this.filters.flagged) {
            return repoDocs.filter(current => current.flagged);
        }
        return repoDocs;
    }
    doFilterArchived(repoDocs) {
        if (!this.filters.archived) {
            return repoDocs.filter(current => !current.archived);
        }
        return repoDocs;
    }
    doFilterByTags(repoDocs) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'filter-by-tags' });
        const tags = this.filters.filteredTags.get()
            .filter(current => current.id !== '/');
        const tagMatcherFactory = new TagMatcher_1.TagMatcherFactory(tags);
        if (tags.length === 0) {
            return repoDocs;
        }
        return tagMatcherFactory.filter(repoDocs, current => Object.values(current.docInfo.tags || {}));
    }
}
exports.DocRepoFilters = DocRepoFilters;
//# sourceMappingURL=data:application/json;base64,