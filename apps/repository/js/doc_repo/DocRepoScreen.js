"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("polar-shared/src/logger/Logger");
const Optional_1 = require("polar-shared/src/util/ts/Optional");
const Tags_1 = require("polar-shared/src/tags/Tags");
const Preconditions_1 = require("polar-shared/src/Preconditions");
const RendererAnalytics_1 = require("../../../../web/js/ga/RendererAnalytics");
const MessageBanner_1 = require("../MessageBanner");
const DocRepoTableDropdown_1 = require("./DocRepoTableDropdown");
const DocRepoTableColumns_1 = require("./DocRepoTableColumns");
const SettingsStore_1 = require("../../../../web/js/datastore/SettingsStore");
const RepoDocMetaLoaders_1 = require("../RepoDocMetaLoaders");
const PersistenceLayerManagers_1 = require("../../../../web/js/datastore/PersistenceLayerManagers");
const SynchronizingDocLoader_1 = require("../util/SynchronizingDocLoader");
const ReleasingReactComponent_1 = __importDefault(require("../framework/ReleasingReactComponent"));
const RepoHeader_1 = require("../repo_header/RepoHeader");
const FixedNav_1 = require("../FixedNav");
const Functions_1 = require("polar-shared/src/util/Functions");
const DocRepoFilterBar_1 = require("./DocRepoFilterBar");
const DocRepoFilters_1 = require("./DocRepoFilters");
const Toaster_1 = require("../../../../web/js/ui/toaster/Toaster");
const ProgressTracker_1 = require("polar-shared/src/util/ProgressTracker");
const ProgressMessages_1 = require("../../../../web/js/ui/progress_bar/ProgressMessages");
const Dialogs_1 = require("../../../../web/js/ui/dialogs/Dialogs");
const DocRepoButtonBar_1 = require("./DocRepoButtonBar");
const DocRepoTable_1 = require("./DocRepoTable");
const Dock_1 = require("../../../../web/js/ui/dock/Dock");
const TagTree_1 = require("../../../../web/js/ui/tree/TagTree");
const Arrays_1 = require("polar-shared/src/util/Arrays");
const Numbers_1 = require("polar-shared/src/util/Numbers");
const SelectedDocs_1 = require("./SelectedDocs");
const TreeState_1 = require("../../../../web/js/ui/tree/TreeState");
const SetArrays_1 = require("polar-shared/src/util/SetArrays");
const log = Logger_1.Logger.create();
class DocRepoScreen extends ReleasingReactComponent_1.default {
    constructor(props, context) {
        super(props, context);
        this.persistenceLayerManager = this.props.persistenceLayerManager;
        this.synchronizingDocLoader = new SynchronizingDocLoader_1.SynchronizingDocLoader(this.props.persistenceLayerManager);
        this.onDocDeleteRequested = this.onDocDeleteRequested.bind(this);
        this.onDocTagged = this.onDocTagged.bind(this);
        this.onDocDeleted = this.onDocDeleted.bind(this);
        this.onDocSetTitle = this.onDocSetTitle.bind(this);
        this.onSelectedColumns = this.onSelectedColumns.bind(this);
        this.onDocSidebarVisible = this.onDocSidebarVisible.bind(this);
        this.onFilterByTitle = this.onFilterByTitle.bind(this);
        this.onToggleFilterArchived = this.onToggleFilterArchived.bind(this);
        this.onToggleFlaggedOnly = this.onToggleFlaggedOnly.bind(this);
        this.clearSelected = this.clearSelected.bind(this);
        this.onSelected = this.onSelected.bind(this);
        this.selectRow = this.selectRow.bind(this);
        this.onMultiTagged = this.onMultiTagged.bind(this);
        this.onMultiDeleted = this.onMultiDeleted.bind(this);
        this.getSelected = this.getSelected.bind(this);
        this.getRow = this.getRow.bind(this);
        this.onDragStart = this.onDragStart.bind(this);
        this.onDragEnd = this.onDragEnd.bind(this);
        this.onRemoveFromFolder = this.onRemoveFromFolder.bind(this);
        this.state = {
            data: [],
            tags: [],
            columns: new DocRepoTableColumns_1.DocRepoTableColumns(),
            selected: [],
            docSidebarVisible: false
        };
        const onRefreshed = repoDocInfos => this.doRefresh(repoDocInfos);
        const repoDocInfosProvider = () => this.props.repoDocMetaManager.repoDocInfoIndex.values();
        this.docRepoFilters =
            new DocRepoFilters_1.DocRepoFilters(onRefreshed, repoDocInfosProvider);
        const onSelected = (tags) => this.docRepoFilters.onTagged(tags.map(current => Tags_1.Tags.create(current)));
        const onDropped = (tag) => this.onMultiTagged([tag], SelectedDocs_1.DraggingSelectedDocs.get());
        this.treeState = new TreeState_1.TreeState(onSelected, onDropped);
        this.init();
        this.initAsync()
            .catch(err => log.error("Could not init: ", err));
    }
    init() {
        PersistenceLayerManagers_1.PersistenceLayerManagers.onPersistenceManager(this.props.persistenceLayerManager, (persistenceLayer) => {
            this.releaser.register(persistenceLayer.addEventListener(() => this.refresh()));
        });
        this.releaser.register(RepoDocMetaLoaders_1.RepoDocMetaLoaders.addThrottlingEventListener(this.props.repoDocMetaLoader, () => this.refresh()));
        this.releaser.register(this.props.repoDocMetaLoader.addEventListener(event => {
            if (!DocRepoScreen.hasSentInitAnalytics && event.progress.progress === 100) {
                this.emitInitAnalytics(this.props.repoDocMetaManager.repoDocInfoIndex.size());
                DocRepoScreen.hasSentInitAnalytics = true;
            }
        }));
    }
    initAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const settingProvider = yield SettingsStore_1.SettingsStore.load();
            log.info("Settings loaded: ", settingProvider);
            Optional_1.Optional.of(settingProvider().documentRepository)
                .map(current => current.columns)
                .when(columns => {
                log.info("Loaded columns from settings: ", columns);
                this.setState(Object.assign(Object.assign({}, this.state), { columns }));
                this.refresh();
            });
            this.refresh();
        });
    }
    emitInitAnalytics(nrDocs) {
        RendererAnalytics_1.RendererAnalytics.set({ 'nrDocs': nrDocs });
        const persistenceLayerType = this.persistenceLayerManager.currentType();
        RendererAnalytics_1.RendererAnalytics.event({ category: 'document-repository', action: `docs-loaded-${persistenceLayerType}-${nrDocs}` });
    }
    onMultiTagged(tags, repoDocInfos = this.getSelected()) {
        for (const repoDocInfo of repoDocInfos) {
            const existingTags = Object.values(repoDocInfo.tags || {});
            const effectiveTags = Tags_1.Tags.union(existingTags, tags || []);
            this.onDocTagged(repoDocInfo, effectiveTags)
                .catch(err => log.error(err));
        }
    }
    onRemoveFromFolder(folder, repoDocInfos) {
        for (const repoDocInfo of repoDocInfos) {
            const existingTags = Object.values(repoDocInfo.tags || {});
            const newTags = Tags_1.Tags.difference(existingTags, [folder]);
            this.onDocTagged(repoDocInfo, newTags)
                .catch(err => log.error(err));
        }
    }
    onMultiDeleted() {
        const repoDocInfos = this.getSelected();
        this.onDocDeleteRequested(repoDocInfos);
    }
    clearSelected() {
        setTimeout(() => {
            this.setState(Object.assign(Object.assign({}, this.state), { selected: [] }));
        }, 1);
    }
    getSelected() {
        if (!this.reactTable) {
            return [];
        }
        const resolvedState = this.reactTable.getResolvedState();
        const { sortedData } = resolvedState;
        const offset = (resolvedState.page) * resolvedState.pageSize;
        const result = this.state.selected
            .map(selectedIdx => sortedData[offset + selectedIdx])
            .filter(item => Preconditions_1.isPresent(item))
            .map(item => item._original);
        return result;
    }
    getRow(viewIndex) {
        const resolvedState = this.reactTable.getResolvedState();
        const { sortedData } = resolvedState;
        const offset = (resolvedState.page) * resolvedState.pageSize;
        const idx = offset + viewIndex;
        return sortedData[idx]._original;
    }
    selectRow(selectedIdx, event, type) {
        selectedIdx = Numbers_1.Numbers.toNumber(selectedIdx);
        const computeStrategy = () => {
            if (type === 'checkbox') {
                return 'toggle';
            }
            if (type === 'click') {
                if (event.getModifierState("Shift")) {
                    return 'range';
                }
                if (event.getModifierState("Control") || event.getModifierState("Meta")) {
                    return 'toggle';
                }
            }
            if (type === 'context') {
                if (this.state.selected.includes(selectedIdx)) {
                    return 'none';
                }
            }
            return 'one';
        };
        const doStrategyRange = () => {
            let min = 0;
            let max = 0;
            if (this.state.selected.length > 0) {
                const sorted = [...this.state.selected].sort((a, b) => a - b);
                min = Arrays_1.Arrays.first(sorted);
                max = Arrays_1.Arrays.last(sorted);
            }
            const selected = [...Numbers_1.Numbers.range(Math.min(min, selectedIdx), Math.max(max, selectedIdx))];
            return selected;
        };
        const doStrategyToggle = () => {
            const selected = [...this.state.selected];
            if (selected.includes(selectedIdx)) {
                return SetArrays_1.SetArrays.difference(selected, [selectedIdx]);
            }
            else {
                return SetArrays_1.SetArrays.union(selected, [selectedIdx]);
            }
        };
        const doStrategyOne = () => {
            return [selectedIdx];
        };
        const doStrategy = () => {
            const strategy = computeStrategy();
            switch (strategy) {
                case "one":
                    return doStrategyOne();
                case "range":
                    return doStrategyRange();
                case "toggle":
                    return doStrategyToggle();
                case "none":
                    return undefined;
            }
        };
        const selected = doStrategy();
        if (selected) {
            this.setState(Object.assign(Object.assign({}, this.state), { selected }));
        }
    }
    onSelected(selected) {
        this.setState(Object.assign(Object.assign({}, this.state), { selected }));
    }
    render() {
        const tagsProvider = () => this.props.repoDocMetaManager.repoDocInfoIndex.toTagDescriptors();
        const selectedDocs = this.getSelected();
        const primaryDoc = selectedDocs.length > 0 ? selectedDocs[0] : undefined;
        const docActive = {
            right: 'd-none-mobile',
            splitter: 'd-none-mobile'
        };
        const docInactive = {
            right: 'd-none',
            splitter: 'd-none'
        };
        const rightDocComponentClassNames = this.state.docSidebarVisible ? docActive : docInactive;
        return (React.createElement("div", { id: "doc-repository", className: "", style: {
                height: '100%'
            } },
            React.createElement(FixedNav_1.FixedNav, { id: "doc-repo-table" },
                React.createElement("header", null,
                    React.createElement(RepoHeader_1.RepoHeader, { persistenceLayerManager: this.props.persistenceLayerManager }),
                    React.createElement("div", { id: "header-filter" },
                        React.createElement("div", { style: { display: 'flex' }, className: "p-1" },
                            React.createElement("div", { className: "", style: {
                                    whiteSpace: 'nowrap',
                                    marginTop: 'auto',
                                    marginBottom: 'auto',
                                    display: 'flex'
                                } },
                                React.createElement(DocRepoButtonBar_1.DocRepoButtonBar, { hasSelected: this.state.selected.length > 0, tagsProvider: tagsProvider, onMultiTagged: tags => this.onMultiTagged(tags), onMultiDeleted: () => this.onMultiDeleted() })),
                            React.createElement("div", { style: { marginLeft: 'auto' } },
                                React.createElement(DocRepoFilterBar_1.DocRepoFilterBar, { onToggleFlaggedOnly: value => this.onToggleFlaggedOnly(value), onToggleFilterArchived: value => this.onToggleFilterArchived(value), onFilterByTitle: (title) => this.onFilterByTitle(title), tagsDBProvider: () => this.props.repoDocMetaManager.tagsDB, refresher: () => this.refresh(), filteredTags: this.docRepoFilters.filters.filteredTags, docSidebarVisible: this.state.docSidebarVisible, onDocSidebarVisible: visible => this.onDocSidebarVisible(visible), right: React.createElement("div", { className: "d-mobile-none", style: { whiteSpace: 'nowrap', marginTop: 'auto', marginBottom: 'auto' } },
                                        React.createElement(DocRepoTableDropdown_1.DocRepoTableDropdown, { id: "table-dropdown", options: Object.values(this.state.columns), onSelectedColumns: (selectedColumns) => this.onSelectedColumns(selectedColumns) })) })))),
                    React.createElement(MessageBanner_1.MessageBanner, null)),
                React.createElement(Dock_1.Dock, { componentClassNames: {
                        left: 'd-none-mobile',
                        splitter: 'd-none-mobile'
                    }, side: 'left', initialWidth: 300, left: React.createElement("div", { style: {
                            display: 'flex',
                            flexDirection: 'column',
                            height: '100%',
                            overflow: 'auto'
                        } },
                        React.createElement("div", { className: "p-1 border-top" },
                            React.createElement(TagTree_1.TagTree, { tags: this.state.tags, treeState: this.treeState, rootTitle: "Folders", tagType: 'folder', noCreate: true }),
                            React.createElement(TagTree_1.TagTree, { tags: this.state.tags, treeState: this.treeState, rootTitle: "Tags", tagType: 'regular', filterDisabled: true, noCreate: true }))), right: React.createElement(Dock_1.Dock, { componentClassNames: rightDocComponentClassNames, side: 'right', initialWidth: 300, left: React.createElement(DocRepoTable_1.DocRepoTable, { columns: this.state.columns, selected: this.state.selected, data: this.state.data, relatedTags: this.props.repoDocMetaManager.relatedTags, synchronizingDocLoader: this.synchronizingDocLoader, tagsProvider: () => tagsProvider(), writeDocInfoTags: (repoDocInfo, tags) => this.props.repoDocMetaManager.writeDocInfoTags(repoDocInfo, tags), deleteDocInfo: repoDocInfo => this.props.repoDocMetaManager.deleteDocInfo(repoDocInfo), writeDocInfoTitle: (repoDocInfo, title) => this.props.repoDocMetaManager.writeDocInfoTitle(repoDocInfo, title), writeDocInfo: docInfo => this.props.repoDocMetaManager.writeDocInfo(docInfo), refresh: () => this.refresh(), onDocDeleteRequested: repoDocInfos => this.onDocDeleteRequested(repoDocInfos), onDocDeleted: repoDocInfos => this.onDocDeleted(repoDocInfos), onDocSetTitle: (repoDocInfo, title) => this.onDocSetTitle(repoDocInfo, title), onDocTagged: (repoDocInfo, tags) => this.onDocTagged(repoDocInfo, tags), onMultiDeleted: () => this.onMultiDeleted(), selectRow: (selectedIdx, event1, type) => this.selectRow(selectedIdx, event1, type), onSelected: selected => this.onSelected(selected), onReactTable: reactTable => this.reactTable = reactTable, onDragStart: event => this.onDragStart(event), onDragEnd: () => this.onDragEnd(), filters: this.docRepoFilters.filters, getSelected: () => this.getSelected(), getRow: (viewIndex) => this.getRow(viewIndex), onRemoveFromFolder: (folder, repoDocInfos) => this.onRemoveFromFolder(folder, repoDocInfos) }), right: React.createElement("div", null) }) }))));
    }
    onDragStart(event) {
        const configureDragImage = () => {
            const src = document.createElement("div");
            event.dataTransfer.setDragImage(src, 0, 0);
        };
        configureDragImage();
        const selected = this.getSelected();
        SelectedDocs_1.DraggingSelectedDocs.set(selected);
    }
    onDragEnd() {
        SelectedDocs_1.DraggingSelectedDocs.clear();
    }
    onDocTagged(repoDocInfo, tags) {
        return __awaiter(this, void 0, void 0, function* () {
            RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'doc-tagged' });
            yield this.props.repoDocMetaManager.writeDocInfoTags(repoDocInfo, tags);
            this.refresh();
        });
    }
    onDocDeleteRequested(repoDocInfos) {
        Dialogs_1.Dialogs.confirm({
            title: "Are you sure you want to delete these document(s)?",
            subtitle: "This is a permanent operation and can't be undone.  All associated annotations will also be removed.",
            onCancel: Functions_1.NULL_FUNCTION,
            type: 'danger',
            onConfirm: () => this.onDocDeleted(repoDocInfos),
        });
    }
    onDocSidebarVisible(docSidebarVisible) {
        this.setState(Object.assign(Object.assign({}, this.state), { docSidebarVisible }));
    }
    onDocDeleted(repoDocInfos) {
        const doDeletes = () => __awaiter(this, void 0, void 0, function* () {
            const stats = {
                successes: 0,
                failures: 0
            };
            this.clearSelected();
            const progressTracker = new ProgressTracker_1.ProgressTracker({ total: repoDocInfos.length, id: 'delete' });
            for (const repoDocInfo of repoDocInfos) {
                log.info("Deleting document: ", repoDocInfo);
                try {
                    yield this.props.repoDocMetaManager.deleteDocInfo(repoDocInfo);
                    ++stats.successes;
                    this.refresh();
                }
                catch (e) {
                    ++stats.failures;
                    log.error("Could not delete doc: ", e);
                }
                finally {
                    const progress = progressTracker.incr();
                    ProgressMessages_1.ProgressMessages.broadcast(progress);
                }
            }
            this.clearSelected();
            if (stats.failures === 0) {
                Toaster_1.Toaster.success(`${stats.successes} documents successfully deleted.`);
            }
            else {
                Toaster_1.Toaster.error(`Failed to delete ${stats.failures} with ${stats.successes} successful.`);
            }
        });
        doDeletes()
            .catch(err => log.error("Unable to delete files: ", err));
    }
    onDocSetTitle(repoDocInfo, title) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'set-doc-title' });
        log.info("Setting doc title: ", title);
        this.props.repoDocMetaManager.writeDocInfoTitle(repoDocInfo, title)
            .catch(err => log.error("Could not write doc title: ", err));
        this.refresh();
    }
    onSelectedColumns(columns) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'selected-columns' });
        SettingsStore_1.SettingsStore.load()
            .then((settingsProvider) => {
            const currentSettings = settingsProvider();
            const settings = Object.assign(Object.assign({}, currentSettings), { documentRepository: {
                    columns: this.state.columns
                } });
            SettingsStore_1.SettingsStore.write(settings)
                .catch(err => log.error(err));
        })
            .catch(err => log.error("Could not load settings: ", err));
        this.refresh();
    }
    onFilterByTitle(title) {
        RendererAnalytics_1.RendererAnalytics.event({ category: 'user', action: 'filter-by-title' });
        this.docRepoFilters.onFilterByTitle(title);
    }
    refresh() {
        this.docRepoFilters.refresh();
    }
    doRefresh(data) {
        const tags = this.props.repoDocMetaManager.repoDocInfoIndex.toTagDescriptors();
        const state = Object.assign(Object.assign({}, this.state), { data, tags });
        setTimeout(() => {
            this.setState(state);
        }, 1);
    }
    onToggleFlaggedOnly(value) {
        this.docRepoFilters.onToggleFlaggedOnly(value);
    }
    onToggleFilterArchived(value) {
        this.docRepoFilters.onToggleFilterArchived(value);
    }
}
exports.default = DocRepoScreen;
DocRepoScreen.hasSentInitAnalytics = false;
//# sourceMappingURL=data:application/json;base64,