"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("polar-shared/src/logger/Logger");
const ToggleButton_1 = require("../../../../web/js/ui/ToggleButton");
const FilterTagInput_1 = require("../FilterTagInput");
const InputGroup_1 = __importDefault(require("reactstrap/lib/InputGroup"));
const Input_1 = __importDefault(require("reactstrap/lib/Input"));
const SimpleTooltipEx_1 = require("../../../../web/js/ui/tooltip/SimpleTooltipEx");
const log = Logger_1.Logger.create();
class Styles {
}
class DocRepoFilterBar extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.state = {};
    }
    render() {
        const Right = () => {
            if (this.props.right) {
                return this.props.right;
            }
            else {
                return React.createElement("div", null);
            }
        };
        return (React.createElement("div", { id: "filter-bar", style: {
                display: 'flex',
                marginLeft: 'auto',
                justifyContent: 'flex-end'
            } },
            React.createElement("div", { className: "mr-2", style: { whiteSpace: 'nowrap', marginTop: 'auto', marginBottom: 'auto' } },
                React.createElement("div", { className: "checkbox-group" },
                    React.createElement(SimpleTooltipEx_1.SimpleTooltipEx, { text: "Only show flagged documents." },
                        React.createElement(ToggleButton_1.ToggleButton, { id: "toggle-flagged", size: "md", label: "flagged", iconClassName: "fas fa-flag", initialValue: false, onChange: value => this.props.onToggleFlaggedOnly(value) })))),
            React.createElement("div", { className: "header-filter-box mr-1", style: { whiteSpace: 'nowrap', marginTop: 'auto', marginBottom: 'auto' } },
                React.createElement("div", { className: "checkbox-group" },
                    React.createElement(SimpleTooltipEx_1.SimpleTooltipEx, { text: `
                                           Show both archived and unarchived
                                           documents.  Archived documents are
                                           hidden by default.
                                         ` },
                        React.createElement(ToggleButton_1.ToggleButton, { id: "toggle-archived", size: "md", label: "archived", iconClassName: "fas fa-check", initialValue: false, onChange: value => this.props.onToggleFilterArchived(value) })))),
            React.createElement("div", { className: "header-filter-box header-filter-tags mr-1 d-none-desktop", style: { whiteSpace: 'nowrap', marginTop: 'auto', marginBottom: 'auto' } },
                React.createElement(FilterTagInput_1.FilterTagInput, { id: "filter-tag-input", tagsDBProvider: this.props.tagsDBProvider, refresher: this.props.refresher, tooltip: "Filter the document list by a specific tag.", filteredTags: this.props.filteredTags })),
            React.createElement("div", { className: "header-filter-box mr-1 d-none-mobile", style: { whiteSpace: 'nowrap', marginTop: 'auto', marginBottom: 'auto' } },
                React.createElement("div", { className: "header-filter-box" },
                    React.createElement(SimpleTooltipEx_1.SimpleTooltipEx, { text: `
                                            Filter the document list by the title of the document.
                                         ` },
                        React.createElement(InputGroup_1.default, { size: "md" },
                            React.createElement(Input_1.default, { id: "filter_title", type: "text", placeholder: "Filter by title", onChange: (value) => this.props.onFilterByTitle(value.target.value) }))))),
            React.createElement(Right, null)));
    }
}
exports.DocRepoFilterBar = DocRepoFilterBar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jUmVwb0ZpbHRlckJhci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkRvY1JlcG9GaWx0ZXJCYXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDZDQUErQjtBQUMvQiwyREFBc0Q7QUFDdEQscUVBQWdFO0FBRWhFLHNEQUFpRDtBQUdqRCwyRUFBbUQ7QUFDbkQsaUVBQXlDO0FBQ3pDLG1GQUE4RTtBQUs5RSxNQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFHNUIsTUFBTSxNQUFNO0NBRVg7QUFFRCxNQUFhLGdCQUFpQixTQUFRLEtBQUssQ0FBQyxTQUF5QjtJQUVqRSxZQUFZLEtBQWEsRUFBRSxPQUFZO1FBQ25DLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUNaLENBQUM7SUFFTixDQUFDO0lBRU0sTUFBTTtRQUVULE1BQU0sS0FBSyxHQUFHLEdBQUcsRUFBRTtZQUVmLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUU7Z0JBQ2xCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7YUFDM0I7aUJBQU07Z0JBQ0gsT0FBTyxnQ0FBTSxDQUFDO2FBQ2pCO1FBRUwsQ0FBQyxDQUFDO1FBRUYsT0FBTyxDQUVILDZCQUFLLEVBQUUsRUFBQyxZQUFZLEVBQ2YsS0FBSyxFQUFFO2dCQUNILE9BQU8sRUFBRSxNQUFNO2dCQUNmLFVBQVUsRUFBRSxNQUFNO2dCQUNsQixjQUFjLEVBQUUsVUFBVTthQUM3QjtZQUVGLDZCQUFLLFNBQVMsRUFBQyxNQUFNLEVBQ2hCLEtBQUssRUFBRSxFQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFDO2dCQUV2RSw2QkFBSyxTQUFTLEVBQUMsZ0JBQWdCO29CQUUzQixvQkFBQyxpQ0FBZSxJQUFDLElBQUksRUFBQyw4QkFBOEI7d0JBRWhELG9CQUFDLDJCQUFZLElBQUMsRUFBRSxFQUFDLGdCQUFnQixFQUNuQixJQUFJLEVBQUMsSUFBSSxFQUNULEtBQUssRUFBQyxTQUFTLEVBQ2YsYUFBYSxFQUFDLGFBQWEsRUFDM0IsWUFBWSxFQUFFLEtBQUssRUFDbkIsUUFBUSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUUzRCxDQUVoQixDQUVKO1lBRU4sNkJBQUssU0FBUyxFQUFDLHdCQUF3QixFQUNsQyxLQUFLLEVBQUUsRUFBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBQztnQkFFdkUsNkJBQUssU0FBUyxFQUFDLGdCQUFnQjtvQkFFM0Isb0JBQUMsaUNBQWUsSUFBQyxJQUFJLEVBQUU7Ozs7MENBSUw7d0JBRWQsb0JBQUMsMkJBQVksSUFBQyxFQUFFLEVBQUMsaUJBQWlCLEVBQ3BCLElBQUksRUFBQyxJQUFJLEVBQ1QsS0FBSyxFQUFDLFVBQVUsRUFDaEIsYUFBYSxFQUFDLGNBQWMsRUFDNUIsWUFBWSxFQUFFLEtBQUssRUFDbkIsUUFBUSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUU5RCxDQUVoQixDQUVKO1lBRU4sNkJBQUssU0FBUyxFQUFDLDBEQUEwRCxFQUNwRSxLQUFLLEVBQUUsRUFBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBQztnQkFFdkUsb0JBQUMsK0JBQWMsSUFBQyxFQUFFLEVBQUMsa0JBQWtCLEVBQ3JCLGNBQWMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFDekMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUMvQixPQUFPLEVBQUMsNkNBQTZDLEVBQ3JELFlBQVksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBSSxDQUV2RDtZQUVOLDZCQUFLLFNBQVMsRUFBQyxzQ0FBc0MsRUFDaEQsS0FBSyxFQUFFLEVBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUM7Z0JBRXZFLDZCQUFLLFNBQVMsRUFBQyxtQkFBbUI7b0JBRTlCLG9CQUFDLGlDQUFlLElBQUMsSUFBSSxFQUFFOzswQ0FFTDt3QkFFZCxvQkFBQyxvQkFBVSxJQUFDLElBQUksRUFBQyxJQUFJOzRCQUVqQixvQkFBQyxlQUFLLElBQUMsRUFBRSxFQUFDLGNBQWMsRUFDakIsSUFBSSxFQUFDLE1BQU0sRUFDWCxXQUFXLEVBQUMsaUJBQWlCLEVBQzdCLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUVwRSxDQUdDLENBRWhCLENBRUo7WUFVTixvQkFBQyxLQUFLLE9BQUUsQ0FFTixDQUVULENBQUM7SUFFTixDQUFDO0NBSUo7QUFqSUQsNENBaUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtMb2dnZXJ9IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvbG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQge1RvZ2dsZUJ1dHRvbn0gZnJvbSAnLi4vLi4vLi4vLi4vd2ViL2pzL3VpL1RvZ2dsZUJ1dHRvbic7XG5pbXBvcnQge1NpbXBsZVRvb2x0aXB9IGZyb20gJy4uLy4uLy4uLy4uL3dlYi9qcy91aS90b29sdGlwL1NpbXBsZVRvb2x0aXAnO1xuaW1wb3J0IHtGaWx0ZXJUYWdJbnB1dH0gZnJvbSAnLi4vRmlsdGVyVGFnSW5wdXQnO1xuaW1wb3J0IHtUYWdzREJ9IGZyb20gJy4uL1RhZ3NEQic7XG5pbXBvcnQge0ZpbHRlcmVkVGFnc30gZnJvbSAnLi4vRmlsdGVyZWRUYWdzJztcbmltcG9ydCBJbnB1dEdyb3VwIGZyb20gJ3JlYWN0c3RyYXAvbGliL0lucHV0R3JvdXAnO1xuaW1wb3J0IElucHV0IGZyb20gJ3JlYWN0c3RyYXAvbGliL0lucHV0JztcbmltcG9ydCB7U2ltcGxlVG9vbHRpcEV4fSBmcm9tICcuLi8uLi8uLi8uLi93ZWIvanMvdWkvdG9vbHRpcC9TaW1wbGVUb29sdGlwRXgnO1xuaW1wb3J0IHtCdXR0b259IGZyb20gXCJyZWFjdHN0cmFwXCI7XG5pbXBvcnQge05VTExfRlVOQ1RJT059IGZyb20gXCJwb2xhci1zaGFyZWQvc3JjL3V0aWwvRnVuY3Rpb25zXCI7XG5pbXBvcnQge0RvY1NpZGViYXJCdXR0b259IGZyb20gXCIuL0RvY1NpZGViYXJCdXR0b25cIjtcblxuY29uc3QgbG9nID0gTG9nZ2VyLmNyZWF0ZSgpO1xuXG5cbmNsYXNzIFN0eWxlcyB7XG5cbn1cblxuZXhwb3J0IGNsYXNzIERvY1JlcG9GaWx0ZXJCYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJUHJvcHMsIGNvbnRleHQ6IGFueSkge1xuICAgICAgICBzdXBlcihwcm9wcywgY29udGV4dCk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoKSB7XG5cbiAgICAgICAgY29uc3QgUmlnaHQgPSAoKSA9PiB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMucmlnaHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2Lz47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gKFxuXG4gICAgICAgICAgICA8ZGl2IGlkPVwiZmlsdGVyLWJhclwiXG4gICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJ1xuICAgICAgICAgICAgICAgICB9fT5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXItMlwiXG4gICAgICAgICAgICAgICAgICAgICBzdHlsZT17e3doaXRlU3BhY2U6ICdub3dyYXAnLCBtYXJnaW5Ub3A6ICdhdXRvJywgbWFyZ2luQm90dG9tOiAnYXV0byd9fT5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNoZWNrYm94LWdyb3VwXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTaW1wbGVUb29sdGlwRXggdGV4dD1cIk9ubHkgc2hvdyBmbGFnZ2VkIGRvY3VtZW50cy5cIj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUb2dnbGVCdXR0b24gaWQ9XCJ0b2dnbGUtZmxhZ2dlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwibWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJmbGFnZ2VkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25DbGFzc05hbWU9XCJmYXMgZmEtZmxhZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWU9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3ZhbHVlID0+IHRoaXMucHJvcHMub25Ub2dnbGVGbGFnZ2VkT25seSh2YWx1ZSl9Lz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TaW1wbGVUb29sdGlwRXg+XG5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyLWZpbHRlci1ib3ggbXItMVwiXG4gICAgICAgICAgICAgICAgICAgICBzdHlsZT17e3doaXRlU3BhY2U6ICdub3dyYXAnLCBtYXJnaW5Ub3A6ICdhdXRvJywgbWFyZ2luQm90dG9tOiAnYXV0byd9fT5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNoZWNrYm94LWdyb3VwXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTaW1wbGVUb29sdGlwRXggdGV4dD17YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgYm90aCBhcmNoaXZlZCBhbmQgdW5hcmNoaXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50cy4gIEFyY2hpdmVkIGRvY3VtZW50cyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW4gYnkgZGVmYXVsdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYH0+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VG9nZ2xlQnV0dG9uIGlkPVwidG9nZ2xlLWFyY2hpdmVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJtZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cImFyY2hpdmVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25DbGFzc05hbWU9XCJmYXMgZmEtY2hlY2tcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt2YWx1ZSA9PiB0aGlzLnByb3BzLm9uVG9nZ2xlRmlsdGVyQXJjaGl2ZWQodmFsdWUpfS8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU2ltcGxlVG9vbHRpcEV4PlxuXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlci1maWx0ZXItYm94IGhlYWRlci1maWx0ZXItdGFncyBtci0xIGQtbm9uZS1kZXNrdG9wXCJcbiAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2hpdGVTcGFjZTogJ25vd3JhcCcsIG1hcmdpblRvcDogJ2F1dG8nLCBtYXJnaW5Cb3R0b206ICdhdXRvJ319PlxuXG4gICAgICAgICAgICAgICAgICAgIDxGaWx0ZXJUYWdJbnB1dCBpZD1cImZpbHRlci10YWctaW5wdXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnc0RCUHJvdmlkZXI9e3RoaXMucHJvcHMudGFnc0RCUHJvdmlkZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoZXI9e3RoaXMucHJvcHMucmVmcmVzaGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcD1cIkZpbHRlciB0aGUgZG9jdW1lbnQgbGlzdCBieSBhIHNwZWNpZmljIHRhZy5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRUYWdzPXt0aGlzLnByb3BzLmZpbHRlcmVkVGFnc30gLz5cblxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXItZmlsdGVyLWJveCBtci0xIGQtbm9uZS1tb2JpbGVcIlxuICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3t3aGl0ZVNwYWNlOiAnbm93cmFwJywgbWFyZ2luVG9wOiAnYXV0bycsIG1hcmdpbkJvdHRvbTogJ2F1dG8nfX0+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXItZmlsdGVyLWJveFwiPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8U2ltcGxlVG9vbHRpcEV4IHRleHQ9e2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsdGVyIHRoZSBkb2N1bWVudCBsaXN0IGJ5IHRoZSB0aXRsZSBvZiB0aGUgZG9jdW1lbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB9PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXAgc2l6ZT1cIm1kXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0IGlkPVwiZmlsdGVyX3RpdGxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRmlsdGVyIGJ5IHRpdGxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsodmFsdWUpID0+IHRoaXMucHJvcHMub25GaWx0ZXJCeVRpdGxlKHZhbHVlLnRhcmdldC52YWx1ZSl9Lz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvSW5wdXRHcm91cD5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1NpbXBsZVRvb2x0aXBFeD5cblxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgey8qPGRpdiBjbGFzc05hbWU9XCJoZWFkZXItZmlsdGVyLWJveCBtci0xXCIqL31cbiAgICAgICAgICAgICAgICB7LyogICAgIHN0eWxlPXt7d2hpdGVTcGFjZTogJ25vd3JhcCcsIG1hcmdpblRvcDogJ2F1dG8nLCBtYXJnaW5Cb3R0b206ICdhdXRvJ319PiovfVxuXG4gICAgICAgICAgICAgICAgey8qICAgIDxEb2NTaWRlYmFyQnV0dG9uIHNlbGVjdGVkPXt0aGlzLnByb3BzLmRvY1NpZGViYXJWaXNpYmxlfSovfVxuICAgICAgICAgICAgICAgIHsvKiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4gdGhpcy5wcm9wcy5vbkRvY1NpZGViYXJWaXNpYmxlKCEgdGhpcy5wcm9wcy5kb2NTaWRlYmFyVmlzaWJsZSl9Lz4qL31cblxuICAgICAgICAgICAgICAgIHsvKjwvZGl2PiovfVxuXG4gICAgICAgICAgICAgICAgPFJpZ2h0Lz5cblxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgKTtcblxuICAgIH1cblxuXG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHJvcHMge1xuXG4gICAgcmVhZG9ubHkgZG9jU2lkZWJhclZpc2libGU6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgZmxhZ2dlZCB0b2dnbGUgaXMgZW5hYmxlZC9kaXNhYmxlZFxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9uVG9nZ2xlRmxhZ2dlZE9ubHk6IFRvZ2dsZUNhbGxiYWNrO1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIGFyY2hpdmUgdG9nZ2xlIGlzIGVuYWJsZWQvZGlzYWJsZWRcbiAgICAgKi9cbiAgICByZWFkb25seSBvblRvZ2dsZUZpbHRlckFyY2hpdmVkOiBUb2dnbGVDYWxsYmFjaztcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRoZSB0aXRsZSBpcyBmaWx0ZXJlZCB3aXRoIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSB0aXRsZSB0b1xuICAgICAqIGZpbHRlciBieS4gIFdoZW4gdGhlIHRpdGxlIGlzIFwiXCIgdGhlbiBubyBmaWx0ZXIgaXMgYXBwbGllZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBvbkZpbHRlckJ5VGl0bGU6ICh0aXRsZTogc3RyaW5nKSA9PiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogQW4gaW5kZXggb2YgdGhlIGN1cnJlbnRseSBhdmFpbGFibGUgdGFncy5cbiAgICAgKi9cbiAgICByZWFkb25seSB0YWdzREJQcm92aWRlcjogKCkgPT4gVGFnc0RCO1xuXG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0byByZWZyZXNoIHRoZSB0YWJsZSB3aGVuIG5ldyByZXN1bHRzIGhhdmUgYmVlbiBzZWxlY3RlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWZyZXNoZXI6ICgpID0+IHZvaWQ7XG5cbiAgICByZWFkb25seSBvbkRvY1NpZGViYXJWaXNpYmxlOiAodmlzaWJsZTogYm9vbGVhbikgPT4gdm9pZDtcblxuICAgIC8qKlxuICAgICAqIEEgcHJvdmlkZXIgdGhhdCBjYW4gYmUgdXBkYXRlZCB3aXRoIHRoZSBmaWx0ZXJlZCB0YWdzIHRoYXQgYXJlIGN1cnJlbnRseVxuICAgICAqIGJlaW5nIHVzZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZmlsdGVyZWRUYWdzOiBGaWx0ZXJlZFRhZ3M7XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGRlZmluZWQsIGEgSlNYIGVsZW1lbnQgdG8gZGlzcGxheSBvbiB0aGUgcmlnaHQgb2YgdGhlXG4gICAgICogRmlsdGVyQmFyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJpZ2h0PzogSlNYLkVsZW1lbnQ7XG5cbn1cblxuaW50ZXJmYWNlIElTdGF0ZSB7XG5cbn1cblxuZXhwb3J0IHR5cGUgVG9nZ2xlQ2FsbGJhY2sgPSAodmFsdWU6IGJvb2xlYW4pID0+IHZvaWQ7XG4iXX0=