"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const StatTitle_1 = __importDefault(require("./StatTitle"));
const line_1 = require("@nivo/line");
const Statistics_1 = require("polar-shared/src/util/Statistics");
const ISODateTimeStrings_1 = require("polar-shared/src/metadata/ISODateTimeStrings");
const S2Plus_1 = require("polar-spaced-repetition-api/src/scheduler/S2Plus/S2Plus");
const ReviewerStatistics_1 = require("../reviewer/ReviewerStatistics");
const Logger_1 = require("polar-shared/src/logger/Logger");
const StatBox_1 = require("./StatBox");
const LoadingProgress_1 = require("../../../../web/js/ui/LoadingProgress");
const log = Logger_1.Logger.create();
class SpacedRepQueueChart extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            data: undefined
        };
    }
    componentDidMount() {
        ReviewerStatistics_1.ReviewerStatistics.statistics(this.props.mode, this.props.type)
            .then(data => this.setState({ data }))
            .catch(err => log.error("Could not fetch queue stats: ", err));
    }
    render() {
        const { data } = this.state;
        if (!data) {
            return React.createElement(LoadingProgress_1.LoadingProgress, null);
        }
        const computeStats = () => {
            const firstDatapointsReducer = (timestamp, datapoints) => {
                const first = datapoints[0];
                return Object.assign(Object.assign({}, first), { created: timestamp });
            };
            const minDatapointsReducer = (timestamp, datapoints) => {
                const min = S2Plus_1.StageCountsCalculator.createMutable();
                datapoints.forEach(current => {
                    min.nrNew = Math.min(min.nrNew, current.nrNew);
                    min.nrLapsed = Math.min(min.nrLapsed, current.nrLapsed);
                    min.nrLearning = Math.min(min.nrLearning, current.nrLearning);
                    min.nrReview = Math.min(min.nrReview, current.nrReview);
                });
                const first = datapoints[0];
                return Object.assign(Object.assign({}, first), { created: timestamp });
            };
            const sumDatapointsReducer = (timestamp, datapoints) => {
                const sum = S2Plus_1.StageCountsCalculator.createMutable();
                datapoints.forEach(current => {
                    sum.nrNew += current.nrNew;
                    sum.nrLapsed += current.nrLapsed;
                    sum.nrLearning += current.nrLearning;
                    sum.nrReview += current.nrReview;
                });
                const first = datapoints[0];
                return Object.assign(Object.assign(Object.assign({}, first), sum), { created: timestamp });
            };
            const createDatapointsReducer = () => {
                switch (this.props.type) {
                    case "queue":
                        return minDatapointsReducer;
                    case "completed":
                        return sumDatapointsReducer;
                }
            };
            return Statistics_1.Statistics.compute(data, createDatapointsReducer());
        };
        const stats = computeStats();
        const computeLineData = () => {
            const toDataPoint = (spacedRepStat, id) => {
                const x = ISODateTimeStrings_1.ISODateTimeStrings.parse(spacedRepStat.created);
                const y = spacedRepStat[id];
                return { x, y };
            };
            const computeLine = (id) => {
                return {
                    id,
                    data: stats.map(current => toDataPoint(current, id))
                };
            };
            return [
                computeLine('nrLearning'),
                computeLine('nrReview'),
                computeLine('nrLapsed')
            ];
        };
        const lineData = computeLineData();
        const NeedChardData = () => {
            return React.createElement("div", null);
        };
        const Chart = () => {
            const createTitle = () => {
                switch (this.props.type) {
                    case "queue":
                        return "Number of tasks pending (queue length)";
                    case "completed":
                        return "Number of tasks completed";
                }
            };
            const title = createTitle();
            return (React.createElement("div", { className: "" },
                React.createElement(StatBox_1.StatBox, { style: { height: '300px', width: '100%' } },
                    React.createElement(StatTitle_1.default, null, title),
                    React.createElement(line_1.ResponsiveLine, { data: lineData, margin: {
                            top: 10,
                            right: 10,
                            bottom: 50,
                            left: 40
                        }, colors: "set1", colorBy: "id", enableArea: true, yScale: {
                            type: 'linear'
                        }, xScale: {
                            type: 'time',
                        }, axisBottom: {
                            format: '%b %d',
                            tickValues: 5,
                        }, animate: true }))));
        };
        const Main = () => {
            if (lineData[0].data.length < 3) {
                return React.createElement(NeedChardData, null);
            }
            else {
                return React.createElement(Chart, null);
            }
        };
        return React.createElement("div", { className: "", style: {} },
            React.createElement(Main, null));
    }
}
exports.SpacedRepQueueChart = SpacedRepQueueChart;
//# sourceMappingURL=data:application/json;base64,