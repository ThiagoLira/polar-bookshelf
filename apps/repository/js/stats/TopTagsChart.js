"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Logger_1 = require("polar-shared/src/logger/Logger");
const DocInfoStatistics_1 = require("../../../../web/js/metadata/DocInfoStatistics");
const pie_1 = require("@nivo/pie");
const StatTitle_1 = __importDefault(require("./StatTitle"));
const log = Logger_1.Logger.create();
class TopTagsChart extends React.Component {
    constructor(props, context) {
        super(props, context);
        this.state = {};
    }
    render() {
        const topTags = DocInfoStatistics_1.DocInfoStatistics.computeTopTags(this.props.docInfos, 10);
        const data = topTags.map(current => {
            return {
                id: current.key,
                label: current.key,
                value: current.value
            };
        });
        return (React.createElement("div", { id: "top-tags-chart", className: "p-1" },
            React.createElement(StatTitle_1.default, null, "Top Tags"),
            React.createElement("div", { style: { height: '600px', width: '100%' } },
                React.createElement(pie_1.ResponsivePie, { data: data, margin: {
                        "top": 40,
                        "right": 80,
                        "bottom": 80,
                        "left": 80
                    }, innerRadius: 0.5, padAngle: 0.7, cornerRadius: 3, colors: "category10", colorBy: "id", borderWidth: 1, borderColor: "inherit:darker(0.2)", radialLabelsSkipAngle: 10, radialLabelsTextXOffset: 6, radialLabelsTextColor: "#333333", radialLabelsLinkOffset: 0, radialLabelsLinkDiagonalLength: 16, radialLabelsLinkHorizontalLength: 24, radialLabelsLinkStrokeWidth: 1, radialLabelsLinkColor: "inherit", slicesLabelsSkipAngle: 10, slicesLabelsTextColor: "#333333", animate: true, motionStiffness: 90, motionDamping: 15 }))));
    }
}
exports.default = TopTagsChart;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9wVGFnc0NoYXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVG9wVGFnc0NoYXJ0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBK0I7QUFDL0IsMkRBQXNEO0FBQ3RELHFGQUFnRjtBQUVoRixtQ0FBd0M7QUFDeEMsNERBQW9DO0FBRXBDLE1BQU0sR0FBRyxHQUFHLGVBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUU1QixNQUFxQixZQUFhLFNBQVEsS0FBSyxDQUFDLFNBQXlCO0lBRXJFLFlBQVksS0FBYSxFQUFFLE9BQVk7UUFDbkMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV0QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQ1osQ0FBQztJQUVOLENBQUM7SUFFTSxNQUFNO1FBRVQsTUFBTSxPQUFPLEdBQUcscUNBQWlCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRTFFLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDL0IsT0FBTztnQkFDSCxFQUFFLEVBQUUsT0FBTyxDQUFDLEdBQUc7Z0JBQ2YsS0FBSyxFQUFFLE9BQU8sQ0FBQyxHQUFHO2dCQUNsQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7YUFDdkIsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxDQUVILDZCQUFLLEVBQUUsRUFBQyxnQkFBZ0IsRUFBQyxTQUFTLEVBQUMsS0FBSztZQUVwQyxvQkFBQyxtQkFBUyxtQkFBcUI7WUFFL0IsNkJBQUssS0FBSyxFQUFFLEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDO2dCQUV4QyxvQkFBQyxtQkFBYSxJQUNWLElBQUksRUFBRSxJQUFJLEVBQ1YsTUFBTSxFQUFFO3dCQUNKLEtBQUssRUFBRSxFQUFFO3dCQUNULE9BQU8sRUFBRSxFQUFFO3dCQUNYLFFBQVEsRUFBRSxFQUFFO3dCQUNaLE1BQU0sRUFBRSxFQUFFO3FCQUNiLEVBQ0QsV0FBVyxFQUFFLEdBQUcsRUFDaEIsUUFBUSxFQUFFLEdBQUcsRUFDYixZQUFZLEVBQUUsQ0FBQyxFQUNmLE1BQU0sRUFBQyxZQUFZLEVBQ25CLE9BQU8sRUFBQyxJQUFJLEVBQ1osV0FBVyxFQUFFLENBQUMsRUFDZCxXQUFXLEVBQUMscUJBQXFCLEVBQ2pDLHFCQUFxQixFQUFFLEVBQUUsRUFDekIsdUJBQXVCLEVBQUUsQ0FBQyxFQUMxQixxQkFBcUIsRUFBQyxTQUFTLEVBQy9CLHNCQUFzQixFQUFFLENBQUMsRUFDekIsOEJBQThCLEVBQUUsRUFBRSxFQUNsQyxnQ0FBZ0MsRUFBRSxFQUFFLEVBQ3BDLDJCQUEyQixFQUFFLENBQUMsRUFDOUIscUJBQXFCLEVBQUMsU0FBUyxFQUMvQixxQkFBcUIsRUFBRSxFQUFFLEVBQ3pCLHFCQUFxQixFQUFDLFNBQVMsRUFDL0IsT0FBTyxFQUFFLElBQUksRUFDYixlQUFlLEVBQUUsRUFBRSxFQUNuQixhQUFhLEVBQUUsRUFBRSxHQUVuQixDQUNBLENBQ0osQ0FFVCxDQUFDO0lBQ04sQ0FBQztDQUVKO0FBbEVELCtCQWtFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7TG9nZ2VyfSBmcm9tICdwb2xhci1zaGFyZWQvc3JjL2xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHtEb2NJbmZvU3RhdGlzdGljc30gZnJvbSAnLi4vLi4vLi4vLi4vd2ViL2pzL21ldGFkYXRhL0RvY0luZm9TdGF0aXN0aWNzJztcbmltcG9ydCB7SURvY0luZm99IGZyb20gJ3BvbGFyLXNoYXJlZC9zcmMvbWV0YWRhdGEvSURvY0luZm8nO1xuaW1wb3J0IHtSZXNwb25zaXZlUGllfSBmcm9tICdAbml2by9waWUnO1xuaW1wb3J0IFN0YXRUaXRsZSBmcm9tICcuL1N0YXRUaXRsZSc7XG5cbmNvbnN0IGxvZyA9IExvZ2dlci5jcmVhdGUoKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9wVGFnc0NoYXJ0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogSVByb3BzLCBjb250ZXh0OiBhbnkpIHtcbiAgICAgICAgc3VwZXIocHJvcHMsIGNvbnRleHQpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuXG4gICAgICAgIGNvbnN0IHRvcFRhZ3MgPSBEb2NJbmZvU3RhdGlzdGljcy5jb21wdXRlVG9wVGFncyh0aGlzLnByb3BzLmRvY0luZm9zLCAxMCk7XG5cbiAgICAgICAgY29uc3QgZGF0YSA9IHRvcFRhZ3MubWFwKGN1cnJlbnQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZDogY3VycmVudC5rZXksXG4gICAgICAgICAgICAgICAgbGFiZWw6IGN1cnJlbnQua2V5LFxuICAgICAgICAgICAgICAgIHZhbHVlOiBjdXJyZW50LnZhbHVlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gKFxuXG4gICAgICAgICAgICA8ZGl2IGlkPVwidG9wLXRhZ3MtY2hhcnRcIiBjbGFzc05hbWU9XCJwLTFcIj5cblxuICAgICAgICAgICAgICAgIDxTdGF0VGl0bGU+VG9wIFRhZ3M8L1N0YXRUaXRsZT5cblxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3toZWlnaHQ6ICc2MDBweCcsIHdpZHRoOiAnMTAwJSd9fT5cblxuICAgICAgICAgICAgICAgICAgICA8UmVzcG9uc2l2ZVBpZVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YT17ZGF0YX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbj17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidG9wXCI6IDQwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmlnaHRcIjogODAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJib3R0b21cIjogODAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsZWZ0XCI6IDgwXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJSYWRpdXM9ezAuNX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZEFuZ2xlPXswLjd9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JuZXJSYWRpdXM9ezN9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM9XCJjYXRlZ29yeTEwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yQnk9XCJpZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aD17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yPVwiaW5oZXJpdDpkYXJrZXIoMC4yKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpYWxMYWJlbHNTa2lwQW5nbGU9ezEwfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaWFsTGFiZWxzVGV4dFhPZmZzZXQ9ezZ9XG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpYWxMYWJlbHNUZXh0Q29sb3I9XCIjMzMzMzMzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGlhbExhYmVsc0xpbmtPZmZzZXQ9ezB9XG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpYWxMYWJlbHNMaW5rRGlhZ29uYWxMZW5ndGg9ezE2fVxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaWFsTGFiZWxzTGlua0hvcml6b250YWxMZW5ndGg9ezI0fVxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaWFsTGFiZWxzTGlua1N0cm9rZVdpZHRoPXsxfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaWFsTGFiZWxzTGlua0NvbG9yPVwiaW5oZXJpdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGljZXNMYWJlbHNTa2lwQW5nbGU9ezEwfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2VzTGFiZWxzVGV4dENvbG9yPVwiIzMzMzMzM1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgbW90aW9uU3RpZmZuZXNzPXs5MH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdGlvbkRhbXBpbmc9ezE1fVxuXG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICApO1xuICAgIH1cblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wcyB7XG4gICAgcmVhZG9ubHkgZG9jSW5mb3M6IFJlYWRvbmx5QXJyYXk8SURvY0luZm8+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTdGF0ZSB7XG5cbn1cblxuIl19